,method_1,method_2,label
1036,"public Comparable [] findCommonElements () {
 Set < Comparable > collectionSet1 = new HashSet < > (Arrays.asList (collection1));
 Set < Comparable > collectionSet2 = new HashSet < > (Arrays.asList (collection2));
 for (Comparable x : collectionSet1) {
 if (! collectionSet2.add (x)) {
 commonStuff.add (x);
 }
 }
 return commonStuff.toArray ();
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",0
357,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int number;
 if (value.isEmpty ()) {
 number = 0;
 } else if (value.length () > 4) {
 number = Integer.valueOf (value.substring (value.length () - 4), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 1000;
 if (number >= 100) {
 buffer.append (unitProcessor.getName (number / 100));
 buffer.append (SEPARATOR);
 buffer.append (SCALE.getName (EXPONENT));
 }
 String tensName = tensProcessor.getName (number % 100);
 if (! tensName.isEmpty () && (number >= 100)) {
 buffer.append (SEPARATOR);
 }
 buffer.append (tensName);
 return buffer.toString ();
 }","public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if (name.isEmpty ()) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || decimalValue.isEmpty ())) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 return name;
 }",1
98,"public static boolean isBalanced (String brackets) {
 Map < Character, Character > braces = new HashMap < > ();
 braces.put ('(', ')');
 braces.put ('[', ']');
 braces.put ('{', '}');
 if (brackets.length () % 2 != 0) {
 return false;
 }
 Stack < Character > halfBraces = new Stack ();
 for (char ch : brackets.toCharArray ()) {
 if (braces.containsKey (ch)) {
 halfBraces.push (braces.get (ch));
 } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
 return false;
 }
 }
 return halfBraces.isEmpty ();
 }","public static boolean isBalanced (String str) {
 boolean result = false;
 if (str.length () < 2) return false;
 Stack < Character > stack = new Stack < > ();
 for (int i = 0;
 i < str.length (); i ++) {
 char ch = str.charAt (i);
 if (! parenthesesMapRight.containsKey (ch) && ! parenthesesMapLeft.containsKey (ch)) {
 continue;
 }
 if (parenthesesMapLeft.containsKey (ch)) {
 stack.push (ch);
 } else {
 if (! stack.isEmpty () && stack.pop () == parenthesesMapRight.get (ch).charValue ()) {
 result = true;
 } else {
 return false;
 }
 }
 }
 if (! stack.isEmpty ()) return result = false;
 return result;
 }",1
1287,"public static void main (String [] args) {
 String s = ""this is a this is this a this yes this is a this what it may be i do not care about this"";
 String a [] = s.split ("" "");
 Map < String, Integer > words = new HashMap < > ();
 for (String str : a) {
 if (words.containsKey (str)) {
 words.put (str, 1 + words.get (str));
 } else {
 words.put (str, 1);
 }
 }
 System.out.println (words);
 }","public Ships () {
 setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 setSize (500, 500);
 l5.setIcon (new ImageIcon (""C:\\Users\\The Wimpster\\Desktop\\images22.png""));
 add (l5);
 l5.setBounds (0, 10, 75, 50);
 addMouseMotionListener (new MouseAdapter () {
 public void mouseMoved (MouseEvent e) {
 int x = e.getX ();
 int y = e.getY ();
 int imgWidth = 50;
 int imgHeight = 50;
 l5.setBounds (x - (imgWidth / 2), y - (imgHeight / 2), imgWidth, imgHeight);
 l5.repaint ();
 }}
 );
 setVisible (true);
 }",0
1583,"public String longestSequenceOfChar (String str) {
 String interimresult = """";
 String result = """";
 for (int i = 0;
 i < str.length (); i ++) {
 char ch = str.charAt (i);
 interimresult += ch;
 for (int j = i + 1;
 j < str.length (); j ++) {
 char ch1 = str.charAt (j);
 if (ch != ch1) {
 break;
 }
 interimresult += ch;
 }
 if (interimresult.length () > result.length ()) result = interimresult;
 interimresult = """";
 }
 return result;
 }","public void run () {
 try {
 runs = true;
 if (noColor < 2) {
 noColor ++;
 changeBtnForegroung (clr [noColor]);
 } else {
 noColor = 0;
 changeBtnForegroung (clr [noColor]);
 }
 changeBtnMargin (new Insets (initMargin.top, initMargin.left + 10, initMargin.bottom, initMargin.right - 10));
 border = new EmptyBorder (0, 5, 10, 5);
 changePnlBorder (border);
 Thread.sleep (100);
 changeBtnMargin (new Insets (initMargin.top, initMargin.left - 10, initMargin.bottom, initMargin.right + 10));
 border = new EmptyBorder (0, 0, 10, 10);
 changePnlBorder (border);
 Thread.sleep (100);
 changeBtnMargin (new Insets (initMargin.top, initMargin.left + 10, initMargin.bottom, initMargin.right - 10));
 border = new EmptyBorder (5, 10, 5, 0);
 changePnlBorder (border);
 Thread.sleep (100);
 changeBtnMargin (new Insets (initMargin.top, initMargin.left - 10, initMargin.bottom, initMargin.right + 10));
 border = new EmptyBorder (10, 10, 0, 0);
 changePnlBorder (border);
 Thread.sleep (100);
 changeBtnMargin (new Insets (initMargin.top, initMargin.left, initMargin.bottom, initMargin.right));
 border = new EmptyBorder (5, 5, 5, 5);
 changePnlBorder (border);
 Thread.sleep (100);
 count ++;
 } catch (Exception e) {
 System.out.println (e);
 }
 }",0
805,"public void serialize (Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
 jgen.writeStartObject ();
 JavaType javaType = provider.constructType (CustomClass.class);
 BeanDescription beanDesc = provider.getConfig ().introspect (javaType);
 JsonSerializer < Object > serializer = BeanSerializerFactory.instance.findBeanSerializer (provider, javaType, beanDesc);
 serializer.unwrappingSerializer (null).serialize (value, jgen, provider);
 jgen.writeObjectField (""my_extra_field"", ""some data"");
 jgen.writeEndObject ();
 }","@Override
 public void serialize (Test value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 jgen.writeStartObject ();
 Field [] fields = value.getClass ().getDeclaredFields ();
 for (Field field : fields) {
 try {
 jgen.writeObjectField (field.getName (), field.get (value));
 } catch (IllegalArgumentException | IllegalAccessException e) {
 e.printStackTrace ();
 }
 }
 jgen.writeObjectField (""extra_field"", ""whatever_value"");
 jgen.writeEndObject ();
 }",1
1196,"public static boolean isBalanced (String brackets) {
 Map < Character, Character > braces = new HashMap < > ();
 braces.put ('(', ')');
 braces.put ('[', ']');
 braces.put ('{', '}');
 if (brackets.length () % 2 != 0) {
 return false;
 }
 Stack < Character > halfBraces = new Stack ();
 for (char ch : brackets.toCharArray ()) {
 if (braces.containsKey (ch)) {
 halfBraces.push (braces.get (ch));
 } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
 return false;
 }
 }
 return halfBraces.isEmpty ();
 }","public int hashCode () {
 int result = 17;
 result = 31 * result + (booleanField ? 1 : 0);
 result = 31 * result + byteField;
 result = 31 * result + charField;
 result = 31 * result + shortField;
 result = 31 * result + intField;
 result = 31 * result + (int) (longField ^ (longField>>> 32));
 result = 31 * result + Float.floatToIntBits (floatField);
 long doubleFieldBits = Double.doubleToLongBits (doubleField);
 result = 31 * result + (int) (doubleFieldBits ^ (doubleFieldBits>>> 32));
 result = 31 * result + Arrays.hashCode (arrayField);
 result = 31 * result + referenceField.hashCode ();
 result = 31 * result + (nullableReferenceField == null ? 0 : nullableReferenceField.hashCode ());
 return result;
 }",0
629,"private static String [] tokenizer (String subject, String [] delimiters) {
 Arrays.sort (delimiters, new Comparator < String > () {
 @Override
 public int compare (String s1, String s2) {
 return s2.length () - s1.length ();
 }}
 );
 List < String > tokens = new ArrayList < String > ();
 tokens.add (subject);
 for (int i = 0;
 i < delimiters.length; i ++) {
 tokens = splitStrings (tokens, delimiters, i);
 }
 return tokens.toArray (new String [] {});
 }","public Object [] tokenizer (String value, String [] delimeters) {
 List < String > list = new ArrayList < String > ();
 for (String s : delimeters) {
 if (value.contains (s)) {
 String [] strArr = value.split (""\\"" + s);
 for (String str : strArr) {
 list.add (str);
 if (! list.contains (s)) {
 list.add (s);
 }
 }
 }
 }
 Object [] newValues = list.toArray ();
 return newValues;
 }",1
1851,"public void type (CharSequence chars, int ms) {
 ms = ms > 0 ? ms : 0;
 for (int i = 0, len = chars.length ();
 i < len; i ++) {
 char c = chars.charAt (i);
 AWTKeyStroke keyStroke = getKeyStroke (c);
 int keyCode = keyStroke.getKeyCode ();
 boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
 if (shift) {
 robot.keyPress (KeyEvent.VK_SHIFT);
 }
 robot.keyPress (keyCode);
 robot.keyRelease (keyCode);
 if (shift) {
 robot.keyRelease (KeyEvent.VK_SHIFT);
 }
 if (ms > 0) {
 robot.delay (ms);
 }
 }
 }","public String inputStreamToString (InputStream inputStream) throws IOException {
 String newLine = System.getProperty (""line.separator"");
 BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
 StringBuilder result = new StringBuilder (UTF_8);
 String line;
 boolean flag = false;
 while ((line = reader.readLine ()) != null) {
 result.append (flag ? newLine : """").append (line);
 flag = true;
 }
 return result.toString ();
 }",0
1868,"public static int countLines (String str) {
 if (str == null || str.length () == 0) return 0;
 int lines = 1;
 int len = str.length ();
 for (int pos = 0;
 pos < len; pos ++) {
 char c = str.charAt (pos);
 if (c == '\r') {
 lines ++;
 if (pos + 1 < len && str.charAt (pos + 1) == '\n') pos ++;
 } else if (c == '\n') {
 lines ++;
 }
 }
 return lines;
 }","public void processRow (ResultSet rs) throws SQLException {
 Long id = rs.getLong (""CUSTOMER_ID"");
 Customer customer = map.get (id);
 if (customer == null) {
 customer = new Customer ();
 customer.setId (id);
 customer.setName (rs.getString (""CUSTOMER_NAME""));
 customer.setAccountNumber (rs.getLong (""CUSTOMER_ACCOUNT_NO""));
 map.put (id, customer);
 }
 }",0
611,"public static int [] genRandoms (int n, int numberOfRandoms, int min) {
 int randomArray [] = new int [numberOfRandoms];
 for (int i = 0;
 i < numberOfRandoms; i ++) {
 randomArray [i] = min;
 }
 for (int i = min * numberOfRandoms;
 i < n; i ++) {
 randomArray [randomRange (numberOfRandoms)] += 1;
 }
 return randomArray;
 }","public static int [] genRandoms (int total, int numberOfRandoms, int minimumValue) {
 int [] ret = new int [numberOfRandoms];
 Random rnd = new Random ();
 int totalLeft = total;
 for (int i = 0;
 i < numberOfRandoms; i ++) {
 final int rollsLeft = numberOfRandoms - i;
 int thisMax = totalLeft - (rollsLeft - 1) * minimumValue;
 int thisMin = Math.max (minimumValue, totalLeft / rollsLeft);
 int range = thisMax - thisMin;
 if (range < 0) throw new IllegalArgumentException (""Cannot have "" + minimumValue + "" * "" + numberOfRandoms + "" < "" + total);
 int rndValue = range;
 for (int j = 0;
 j * j < rollsLeft; j ++) rndValue = rnd.nextInt (rndValue + 1);
 totalLeft -= ret [i] = rndValue + thisMin;
 }
 Collections.shuffle (Arrays.asList (ret), rnd);
 return ret;
 }",1
804,"public static String capitalizer (final String texto) {
 String [] palavras = texto.split ("" "");
 StringBuilder sb = new StringBuilder ();
 List < String > excessoes = new ArrayList < String > (Arrays.asList (""de"", ""da"", ""das"", ""do"", ""dos"", ""na"", ""nas"", ""no"", ""nos"", ""a"", ""e"", ""o"", ""em"", ""com""));
 for (String palavra : palavras) {
 if (excessoes.contains (palavra.toLowerCase ())) sb.append (palavra.toLowerCase ()).append ("" "");
 else sb.append (Character.toUpperCase (palavra.charAt (0))).append (palavra.substring (1).toLowerCase ()).append ("" "");
 }
 return sb.toString ().trim ();
 }","private String capitalizer (String word) {
 String [] words = word.split ("" "");
 StringBuilder sb = new StringBuilder ();
 if (words [0].length () > 0) {
 sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
 for (int i = 1;
 i < words.length; i ++) {
 sb.append ("" "");
 sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
 }
 }
 return sb.toString ();
 }",1
1571,"public static void main (final String [] args) {
 final JFrame frame = new JFrame (""Display Keyword Panel"");
 final JPanel panel = new JPanel ();
 panel.setLayout (new BoxLayout (panel, BoxLayout.Y_AXIS));
 text1.setBorder (null);
 text1.setOpaque (false);
 text1.setEditable (false);
 text2.setBorder (null);
 text2.setOpaque (false);
 text2.setEditable (false);
 text1.getInputMap ().put (KeyStroke.getKeyStroke ('G', KeyEvent.CTRL_DOWN_MASK), ""copyAll"");
 text1.getActionMap ().put (""copyAll"", new AbstractAction () {
 @Override
 public void actionPerformed (ActionEvent e) {
 StringBuilder s = new StringBuilder ();
 s.append (text1.getText ()).append (""\n"").append (text2.getText ());
 System.out.println (s.toString ());
 }}
 );
 panel.add (text1);
 panel.add (text2);
 frame.setLayout (new BorderLayout ());
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.getContentPane ().add (panel, BorderLayout.CENTER);
 frame.setLocation (450, 400);
 frame.pack ();
 frame.setVisible (true);
 }","private void transform (Integer hash, HSSFCellStyle styleOld, XSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (styleOld.getFont (this.workbookOld)));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }",0
1866,"public void actionPerformed (ActionEvent e) {
 ImageIcon saveIcon = new ImageIcon (""save-icon.png"");
 int askSave = JOptionPane.showConfirmDialog (null, ""Save current image?"", """", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, saveIcon);
 if (askSave == JOptionPane.YES_OPTION) {
 saveImage ();
 System.exit (0);
 } else {
 System.exit (0);
 }
 }","public void actionPerformed (ActionEvent e) {
 try {
 OutputStream os = new BufferedOutputStream (new FileOutputStream (file));
 XMLEncoder xe = new XMLEncoder (os);
 xe.setPersistenceDelegate (DefaultTableModel.class, new DefaultTableModelPersistenceDelegate ());
 xe.writeObject (model);
 xe.close ();
 Reader r = new BufferedReader (new InputStreamReader (new FileInputStream (file), ""UTF-8""));
 textArea.read (r, null);
 } catch (IOException ex) {
 ex.printStackTrace ();
 }
 }",0
1555,"private int sum (@NotNull
 Index mainIndex,@NotNull
 Index secondaryIndex) {
 int localSum = 0;
 while (mainIndex.index < array.length && secondaryIndex.sign.test (array [mainIndex.index])) {
 mainIndex.index ++;
 }
 if (mainIndex.index < array.length) {
 localSum += array [mainIndex.index ++];
 } else {
 for (; secondaryIndex.index < array.length; secondaryIndex.index ++) {
 if (secondaryIndex.sign.test (array [secondaryIndex.index])) {
 localSum += array [secondaryIndex.index];
 }
 }
 }
 return localSum;
 }","public static void main (String args []) {
 try {
 Game game = new Chess ();
 Thread t1 = new Thread (game);
 t1.start ();
 Thread.sleep (1000);
 game.setRunGame (false);
 Thread.sleep (1000);
 game = new TicTacToe ();
 Thread t2 = new Thread (game);
 t2.start ();
 Thread.sleep (1000);
 game.setRunGame (false);
 } catch (Exception err) {
 err.printStackTrace ();
 }
 }",0
1992,"public int [] solution (String S, int [] P, int [] K) {
 char [] sc = S.toCharArray ();
 int [] A = new int [sc.length];
 int [] G = new int [sc.length];
 int [] C = new int [sc.length];
 int prevA = - 1, prevG = - 1, prevC = - 1;
 for (int i = 0;
 i < sc.length; i ++) {
 if (sc [i] == 'A') prevA = i;
 else if (sc [i] == 'G') prevG = i;
 else if (sc [i] == 'C') prevC = i;
 A [i] = prevA;
 G [i] = prevG;
 C [i] = prevC;
 }
 int [] result = new int [P.length];
 for (int i = 0;
 i < P.length; i ++) {
 if (A [K [i]] >= P [i] && A [K [i]] <= K [i]) {
 result [i] = 1;
 } else if (C [K [i]] >= P [i] && C [K [i]] <= K [i]) {
 result [i] = 2;
 } else if (G [K [i]] >= P [i] && G [K [i]] <= K [i]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 return result;
 }","public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }",0
252,"public int countLines (String filename) throws IOException {
 LineNumberReader reader = new LineNumberReader (new FileReader (filename));
 int cnt = 0;
 String lineRead = """";
 while ((lineRead = reader.readLine ()) != null) {
 }
 cnt = reader.getLineNumber ();
 reader.close ();
 return cnt;
 }","public static int countLines (File input) throws IOException {
 try (InputStream is = new FileInputStream (input)) {
 int count = 1;
 for (int aChar = 0;
 aChar != - 1; aChar = is.read ()) count += aChar == '\n' ? 1 : 0;
 return count;
 }
 }",1
425,"public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }","public void type (CharSequence chars, int ms) {
 ms = ms > 0 ? ms : 0;
 for (int i = 0, len = chars.length ();
 i < len; i ++) {
 char c = chars.charAt (i);
 AWTKeyStroke keyStroke = getKeyStroke (c);
 int keyCode = keyStroke.getKeyCode ();
 boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
 if (shift) {
 robot.keyPress (KeyEvent.VK_SHIFT);
 }
 robot.keyPress (keyCode);
 robot.keyRelease (keyCode);
 if (shift) {
 robot.keyRelease (KeyEvent.VK_SHIFT);
 }
 if (ms > 0) {
 robot.delay (ms);
 }
 }
 }",1
1948,"public static void main (String [] args) {
 try {
 InetAddress address = InetAddress.getByName (""192.168.1.103"");
 boolean reachable = address.isReachable (10000);
 System.out.println (""Is host reachable? "" + reachable);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public static void main (String [] args) {
 String s = ""AVBVDABCHJHDFABCJKHKHF"", ned = ""ABC"";
 int nedIndex = - 1, count = 0, totalNed = 0;
 for (int i = 0;
 i < s.length (); i ++) {
 if (i > ned.length () - 1) nedIndex ++;
 else nedIndex = i;
 if (s.charAt (i) == ned.charAt (nedIndex)) count ++;
 else {
 nedIndex = 0;
 count = 0;
 if (s.charAt (i) == ned.charAt (nedIndex)) count ++;
 else nedIndex = - 1;
 }
 if (count == ned.length ()) {
 nedIndex = - 1;
 count = 0;
 totalNed ++;
 System.out.println (totalNed + "" needle found at index="" + (i - (ned.length () - 1)));
 }
 }
 System.out.print (""Total Ned="" + totalNed);
 }",0
243,"public int [] solution (String S, int [] P, int [] K) {
 char [] sc = S.toCharArray ();
 int [] A = new int [sc.length];
 int [] G = new int [sc.length];
 int [] C = new int [sc.length];
 int prevA = - 1, prevG = - 1, prevC = - 1;
 for (int i = 0;
 i < sc.length; i ++) {
 if (sc [i] == 'A') prevA = i;
 else if (sc [i] == 'G') prevG = i;
 else if (sc [i] == 'C') prevC = i;
 A [i] = prevA;
 G [i] = prevG;
 C [i] = prevC;
 }
 int [] result = new int [P.length];
 for (int i = 0;
 i < P.length; i ++) {
 if (A [K [i]] >= P [i] && A [K [i]] <= K [i]) {
 result [i] = 1;
 } else if (C [K [i]] >= P [i] && C [K [i]] <= K [i]) {
 result [i] = 2;
 } else if (G [K [i]] >= P [i] && G [K [i]] <= K [i]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 return result;
 }","public int [] solution (String S, int [] P, int [] Q) {
 int N = S.length ();
 int M = P.length;
 int [] result = new int [M];
 lastOccurrencesMap = new int [3] [N];
 int lastA = - 1;
 int lastC = - 1;
 int lastG = - 1;
 for (int i = 0;
 i < N; i ++) {
 char c = S.charAt (i);
 if (c == 'A') {
 lastA = i;
 } else if (c == 'C') {
 lastC = i;
 } else if (c == 'G') {
 lastG = i;
 }
 lastOccurrencesMap [0] [i] = lastA;
 lastOccurrencesMap [1] [i] = lastC;
 lastOccurrencesMap [2] [i] = lastG;
 }
 for (int i = 0;
 i < M; i ++) {
 int startIndex = P [i];
 int endIndex = Q [i];
 int minimum = 4;
 for (int n = 0;
 n < 3; n ++) {
 int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
 if (lastOccurence != 0) {
 minimum = n + 1;
 break;
 }
 }
 result [i] = minimum;
 }
 return result;
 }",1
1872,"public static void main (String [] args) throws IOException {
 String ch;
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Enter the Statement:"");
 ch = br.readLine ();
 int count = 0, len = 0;
 do {
 try {
 char name [] = ch.toCharArray ();
 len = name.length;
 count = 0;
 for (int j = 0;
 j < len; j ++) {
 if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;
 }
 if (count != 0) System.out.println (name [0] + "" "" + count + "" Times"");
 ch = ch.replace ("""" + name [0], """");
 } catch (Exception ex) {
 }
 } while (len != 1);
 }","public static void main (String args []) {
 java.awt.EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 new RowSorterDefaults ();
 }}
 );
 }",0
1723,"public void deleteRecursive (File path) {
 File [] c = path.listFiles ();
 System.out.println (""Cleaning out folder:"" + path.toString ());
 for (File file : c) {
 if (file.isDirectory ()) {
 System.out.println (""Deleting file:"" + file.toString ());
 deleteRecursive (file);
 file.delete ();
 } else {
 file.delete ();
 }
 }
 path.delete ();
 }","public void sort (int [] input) {
 for (int i = 0;
 i < input.length - 1; i ++) {
 int k = i + 1;
 int nxtVal = input [k];
 while (input [k - 1] > nxtVal) {
 input [k] = input [k - 1];
 k --;
 if (k == 0) break;
 }
 input [k] = nxtVal;
 }
 System.out.println (""Medium sorting is done and the result is :"");
 for (int i : input) {
 System.out.print (i + "","");
 }
 }",0
194,"public static void main (String [] args) {
 int x = 123456789;
 System.out.println (""x = "" + x);
 int hi = x, n = 0;
 while (hi > 9) {
 hi /= 10;
 ++ n;
 }
 for (int i = 0;
 i < n; i ++) hi *= 10;
 x -= hi;
 System.out.println (""x with high digit removed = "" + x);
 }","public static void main (String [] argv) {
 final int x = 123456789;
 int newX = x;
 final double originalLog = Math.floor (Math.log10 (x));
 final int getRidOf = (int) Math.pow (10, originalLog);
 while (originalLog == Math.floor (Math.log10 (newX))) {
 newX -= getRidOf;
 }
 System.out.println (newX);
 }",1
26,"public void actionPerformed (ActionEvent e) {
 JPanel panel = new JPanel ();
 panel.add (new JLabel (""Hello""));
 panel.setBorder (new MatteBorder (0, 0, 1, 0, Color.GRAY));
 GridBagConstraints gbc = new GridBagConstraints ();
 gbc.gridwidth = GridBagConstraints.REMAINDER;
 gbc.weightx = 1;
 gbc.fill = GridBagConstraints.HORIZONTAL;
 mainList.add (panel, gbc, 0);
 validate ();
 repaint ();
 }","public void actionPerformed (ActionEvent e) {
 final JPanel newPanel = new JPanel ();
 newPanel.add (new JLabel (""Label "" + i ++));
 listContainer.add (newPanel);
 listContainer.revalidate ();
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 newPanel.scrollRectToVisible (newPanel.getBounds ());
 }}
 );
 }",1
530,"public int sqrt (int x) {
 if (x == 0 || x == 1) {
 return x;
 }
 int start = 1, end = x / 2;
 while (start <= end) {
 int mid = start + (end - start) / 2;
 if (mid == x / mid) {
 return mid;
 }
 if (mid < x / mid) {
 start = mid + 1;
 } else {
 end = mid - 1;
 }
 }
 return start - 1;
 }","public static double sqrt (int n) {
 double low = 0;
 double high = n;
 double mid = (high - low) / 2;
 while (Math.abs ((mid * mid) - n) > 0.000000000001) {
 if ((mid * mid) > n) {
 high = mid;
 mid = (high - low) / 2;
 } else {
 low = mid;
 mid = mid + ((high - low) / 2);
 }
 }
 return mid;
 }",1
281,"private static void shuffleArray (int [] array) {
 int index;
 Random random = new Random ();
 for (int i = array.length - 1;
 i > 0; i --) {
 index = random.nextInt (i + 1);
 if (index != i) {
 array [index] ^= array [i];
 array [i] ^= array [index];
 array [index] ^= array [i];
 }
 }
 }","static void shuffleArray (int [] ar) {
 Random rnd = ThreadLocalRandom.current ();
 for (int i = ar.length - 1;
 i > 0; i --) {
 int index = rnd.nextInt (i + 1);
 int a = ar [index];
 ar [index] = ar [i];
 ar [i] = a;
 }
 }",1
399,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","private void transform (HSSFCell cellOld, XSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (! this.styleMap.containsKey (hash)) {
 this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",1
546,"public void actionPerformed (ActionEvent e) {
 timer.stop ();
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 pastRemWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 pastRemWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }","public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Display Dialogs"");
 for (Window window : Window.getWindows ()) {
 if (window instanceof JDialog) {
 JDialog dialog = (JDialog) window;
 System.out.println (""\t"" + dialog.getTitle () + "" "" + dialog.isDisplayable ());
 }
 }
 }",1
323,"public static void main (String [] args) {
 String str = ""AAABBBBCC"";
 int length = str.length ();
 StringBuilder sb = new StringBuilder ();
 int count = 1;
 for (int i = 0;
 i < length; i ++) {
 if (i == length - 1) {
 sb.append (str.charAt (i) + """" + count);
 break;
 }
 if (str.charAt (i) == str.charAt (i + 1)) {
 count ++;
 } else {
 sb.append (str.charAt (i) + """" + count);
 count = 1;
 }
 }
 System.out.println (sb.toString ());
 }","public static void main (String [] args) {
 String output = """";
 Multiset < String > wordsMultiset = HashMultiset.create ();
 String [] words = ""AAABBBBCC"".split ("""");
 wordsMultiset.addAll (Arrays.asList (words));
 for (Entry < String > string : wordsMultiset.entrySet ()) {
 if (! string.getElement ().isEmpty ()) output += string.getCount () + """" + string.getElement ();
 }
 System.out.println (output);
 }",1
1908,"public static void main (String [] args) throws IOException, UnsupportedAudioFileException, LineUnavailableException {
 File in = new File (""C:\\Users\\Sandra\\Desktop\\music\\rags.wav"");
 AudioInputStream audioInputStream = AudioSystem.getAudioInputStream (in);
 Clip play = AudioSystem.getClip ();
 play.open (audioInputStream);
 FloatControl volume = (FloatControl) play.getControl (FloatControl.Type.MASTER_GAIN);
 volume.setValue (1.0f);
 play.start ();
 play.drain ();
 play.close ();
 }","public int solution (int X, int [] A) {
 HashSet < Integer > hset = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= X) hset.add (A [i]);
 if (hset.size () == X) return i;
 }
 return - 1;
 }",0
1251,"public static void main (final String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.println (""Enter some text, or '"" + EXIT_COMMAND + ""' to quit"");
 while (true) {
 System.out.print (""><![CDATA[ "");
 String input = br.readLine ();
 System.out.println (input);
 if (input.length () == EXIT_COMMAND.length () && input.toLowerCase ().equals (EXIT_COMMAND)) {
 System.out.println (""Exiting."");
 return;
 }
 System.out.println (""...response goes here..."");
 }
 }","public static int [] removeDuplicates (int [] arr) {
 int end = arr.length;
 for (int i = 0;
 i < end; i ++) {
 for (int j = i + 1;
 j < end; j ++) {
 if (arr [i] == arr [j]) {
 arr [j] = arr [end - 1];
 end --;
 j --;
 }
 }
 }
 int [] whitelist = new int [end];
 System.arraycopy (arr, 0, whitelist, 0, end);
 return whitelist;
 }",0
1959,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }","public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 final int valid = 6;
 Scanner one = new Scanner (System.in);
 System.out.println (""Enter your username: "");
 String s = one.nextLine ();
 if (s.length () < valid) {
 System.out.println (""Enter a valid username"");
 System.out.println (""User name must contain "" + valid + "" characters"");
 System.out.println (""Enter again: "");
 s = one.nextLine ();
 }
 System.out.println (""Username accepted: "" + s);
 Scanner two = new Scanner (System.in);
 System.out.println (""Enter your age: "");
 int a = two.nextInt ();
 System.out.println (""Age accepted: "" + a);
 Scanner three = new Scanner (System.in);
 System.out.println (""Enter your sex: "");
 String sex = three.nextLine ();
 System.out.println (""Sex accepted: "" + sex);
 }",0
1199,"public static void main (String [] args) {
 Runnable get = new Runnable () {
 @Override
 public void run () {
 for (int i = 0;
 ; i ++) {
 if (i % 1000 == 0) {
 System.out.printf (""get: %d\n"", i);
 }
 Map < K, String > m2 = new HashMap < > (map);
 }
 }}
 new Thread (get).start ();
 for (int i = 0;
 ; i ++) {
 if (i % 1000 == 0) {
 System.out.printf (""put: %d\n"", i);
 }
 String s = Integer.toString (1000 + i);
 map.put (new K (s), s);
 }
 }","public static void main (String [] args) {
 final int max = 100;
 new java.util.concurrent.Semaphore (max) {
 void go () {
 acquireUninterruptibly ();
 System.err.println (max - availablePermits ());
 go ();
 }}
 .go ();
 }",0
703,"public static void main (String [] args) throws IOException {
 JFrame myFrame = new JFrame (""myJfTitle"");
 myFrame.setSize (300, 100);
 myFrame.setLayout (new BorderLayout ());
 JPanel myPanel = new JPanel ();
 JButton myButton = new JButton (""Click me"");
 JProgressBar myBar = new JProgressBar ();
 myBar.setPreferredSize (new Dimension (myFrame.getWidth (), myFrame.getHeight ()));
 myFrame.addComponentListener (new ComponentAdapter () {
 public void componentResized (ComponentEvent evt) {
 Component c = (Component) evt.getSource ();
 myBar.setPreferredSize (new Dimension (myFrame.getWidth (), myFrame.getHeight ()));
 }}
 );
 JPanel glass = (JPanel) myFrame.getGlassPane ();
 glass.setVisible (true);
 myBar.setValue (50);
 glass.add (myButton, BorderLayout.CENTER);
 myPanel.add (myBar);
 myFrame.add (myPanel);
 myFrame.revalidate ();
 myFrame.repaint ();
 myFrame.setVisible (true);
 }","public static void main (String [] args) throws IOException {
 JFrame myFrame = new JFrame (""myJfTitle"");
 myFrame.setLayout (new BorderLayout ());
 JButton myButton = new JButton (""Click me"");
 myButton.setAlignmentX (Component.CENTER_ALIGNMENT);
 JProgressBar myBar = new JProgressBar ();
 LayoutManager overlay = new OverlayLayout (myBar);
 myBar.setLayout (overlay);
 myBar.setValue (50);
 myBar.add (myButton);
 myFrame.add (myBar, BorderLayout.CENTER);
 myFrame.pack ();
 myFrame.setSize (new Dimension (300, 100));
 myFrame.setVisible (true);
 }",1
748,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! """".equals (highName)) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! """".equals (lowName)) {
 buffer.append (SEPARATOR);
 }
 }
 if (! """".equals (lowName)) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }",1
1168,"public boolean handleMessage (SOAPMessageContext context) {
 Boolean isRequest = (Boolean) context.get (MessageContext.MESSAGE_OUTBOUND_PROPERTY);
 if (isRequest) {
 System.out.println (""is Request"");
 } else {
 System.out.println (""is Response"");
 }
 SOAPMessage message = context.getMessage ();
 try {
 SOAPEnvelope envelope = message.getSOAPPart ().getEnvelope ();
 SOAPHeader header = envelope.getHeader ();
 message.writeTo (System.out);
 } catch (SOAPException | IOException e) {
 e.printStackTrace ();
 }
 return true;
 }","public static boolean longerTF (boolean [] guess) {
 int consecutiveVariableTrue = 0, maxConsecutiveVariableTrue = 0;
 int consecutiveVariableFalse = 0, maxConsecutiveVariableFalse = 0;
 for (int x = 0;
 x < guess.length; x ++) {
 if (guess [x] == true) {
 consecutiveVariableTrue ++;
 if (maxConsecutiveVariableTrue < consecutiveVariableTrue) maxConsecutiveVariableTrue = consecutiveVariableTrue;
 } else {
 consecutiveVariableTrue = 0;
 }
 }
 for (int x = 0;
 x < guess.length; x ++) {
 if (guess [x] == false) {
 consecutiveVariableFalse ++;
 if (maxConsecutiveVariableFalse < consecutiveVariableFalse) maxConsecutiveVariableFalse = consecutiveVariableFalse;
 } else {
 consecutiveVariableFalse = 0;
 }
 }
 if (maxConsecutiveVariableTrue >= maxConsecutiveVariableFalse) {
 return true;
 }
 return false;
 }",0
1062,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }",0
1747,"public static String sequenceNums (int [] nums) {
 StringBuilder sb = new StringBuilder ();
 if (nums.length == 0) return sb.toString ();
 int begin = nums [0], end = nums [0];
 for (int cur : nums) if (cur - end <= 1) end = cur;
 else {
 appendRange (sb, begin, end);
 begin = end = cur;
 }
 appendRange (sb, begin, end);
 return sb.substring (1);
 }","public void start (Stage primaryStage) {
 Canvas canvas = new Canvas (width, height);
 GraphicsContext gc = canvas.getGraphicsContext2D ();
 Scene scene = new Scene (new Group (canvas));
 primaryStage.setScene (scene);
 primaryStage.show ();
 Random ran = new Random ();
 triangle = new Point [3];
 triangle [1] = new Point (0d, 0d);
 triangle [0] = new Point (width / 2d, (double) height);
 triangle [2] = new Point ((double) width, 0d);
 midPoint = Point.findMidTo (triangle [0], triangle [1], triangle [2]);
 timer = new Timeline (new KeyFrame (Duration.millis (.1), (ActionEvent event) -> {
 if (points -- > 0) {
 int r = ran.nextInt (3);
 midPoint = midPoint.findMidTo (triangle [r]);
 gc.fillOval (midPoint.getX (), midPoint.getY (), 1, 1);
 } else {
 System.out.println (""Stopping!"");
 timer.stop ();
 }
 }));
 timer.setCycleCount (Timeline.INDEFINITE);
 timer.play ();
 }",0
185,"public static void main (String [] args) {
 final String USERNAME = ""abc"";
 final String PASSWORD = ""abc"";
 final String host = ""3.98.22.10"";
 final int port = 22;
 HashMap < String, List < String > > result = new HashMap < String, List < String > > ();
 exec_linux_cmd ex = new exec_linux_cmd ();
 result = ex.exec_cmd (USERNAME, PASSWORD, host, port, cmd);
 System.out.println (""Result ---> "" + result.get (""result""));
 System.out.println (""Error Msg ---> "" + result.get (""error""));
 }","public static void main (String args []) throws InterruptedException, IOException {
 List < String > command = new ArrayList < String > ();
 command.add (args [0]);
 ProcessBuilder builder = new ProcessBuilder (command);
 Map < String, String > environ = builder.environment ();
 final Process process = builder.start ();
 InputStream is = process.getInputStream ();
 InputStreamReader isr = new InputStreamReader (is);
 BufferedReader br = new BufferedReader (isr);
 String line;
 while ((line = br.readLine ()) != null) {
 System.out.println (line);
 }
 System.out.println (""Program terminated!"");
 }",1
480,"public static void printTable (String [] countries, int [] populations) {
 if (countries.length != 0) {
 int longestNameInput = countries [0].length ();
 int longestPopInput = String.valueOf (populations [0]).length ();
 for (int i = 0;
 i < countries.length; i ++) {
 int countLength = countries [i].length ();
 int popLength = String.valueOf (populations [i]).length ();
 if (countLength > longestNameInput) longestNameInput = countLength;
 if (popLength > longestPopInput) longestPopInput = popLength;
 }
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.print (countries [i]);
 for (int j = 0;
 j < (longestNameInput - countries [i].length ()); j ++) System.out.print ("" "");
 System.out.print ("" | "");
 for (int k = 0;
 k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print ("" "");
 System.out.println (populations [i]);
 }
 }
 }","public static void printTable (String [] countries, int [] populations) {
 int defaultLength = 10;
 int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
 int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.format (""%-"" + maxCountryLength + ""s | %"" + maxPopulationLength + ""d\n"", countries [i], populations [i]);
 }
 }",1
1154,"public static String join (Collection s, String delimiter) {
 StringBuffer buffer = new StringBuffer ();
 Iterator iter = s.iterator ();
 while (iter.hasNext ()) {
 buffer.append (iter.next ());
 if (iter.hasNext ()) {
 buffer.append (delimiter);
 }
 }
 return buffer.toString ();
 }","public static Boolean isAnagram (String word, String anagram_word) {
 if (word.length () != anagram_word.length ()) {
 return false;
 }
 char [] words_char = word.toCharArray ();
 char [] anagram_word_char = anagram_word.toCharArray ();
 int words_char_num = 1;
 int anagram_word_num = 1;
 Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
 for (int i = 0;
 i < words_char.length; i ++) {
 words_char_num *= wordPrimeMap.get (words_char [i]);
 }
 for (int i = 0;
 i < anagram_word_char.length; i ++) {
 anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
 }
 return anagram_word_num == words_char_num;
 }",0
1507,"public void type (char character) {
 switch (character) {
 case 'a' :
 doType (VK_A);
 break;
 case 'b' :
 doType (VK_B);
 break;
 case 'c' :
 doType (VK_C);
 break;
 case 'd' :
 doType (VK_D);
 break;
 case 'e' :
 doType (VK_E);
 break;
 case 'f' :
 doType (VK_F);
 break;
 case 'g' :
 doType (VK_G);
 break;
 case 'h' :
 doType (VK_H);
 break;
 case 'i' :
 doType (VK_I);
 break;
 case 'j' :
 doType (VK_J);
 break;
 case 'k' :
 doType (VK_K);
 break;
 case 'l' :
 doType (VK_L);
 break;
 case 'm' :
 doType (VK_M);
 break;
 case 'n' :
 doType (VK_N);
 break;
 case 'o' :
 doType (VK_O);
 break;
 case 'p' :
 doType (VK_P);
 break;
 case 'q' :
 doType (VK_Q);
 break;
 case 'r' :
 doType (VK_R);
 break;
 case 's' :
 doType (VK_S);
 break;
 case 't' :
 doType (VK_T);
 break;
 case 'u' :
 doType (VK_U);
 break;
 case 'v' :
 doType (VK_V);
 break;
 case 'w' :
 doType (VK_W);
 break;
 case 'x' :
 doType (VK_X);
 break;
 case 'y' :
 doType (VK_Y);
 break;
 case 'z' :
 doType (VK_Z);
 break;
 case 'A' :
 doType (VK_SHIFT, VK_A);
 break;
 case 'B' :
 doType (VK_SHIFT, VK_B);
 break;
 case 'C' :
 doType (VK_SHIFT, VK_C);
 break;
 case 'D' :
 doType (VK_SHIFT, VK_D);
 break;
 case 'E' :
 doType (VK_SHIFT, VK_E);
 break;
 case 'F' :
 doType (VK_SHIFT, VK_F);
 break;
 case 'G' :
 doType (VK_SHIFT, VK_G);
 break;
 case 'H' :
 doType (VK_SHIFT, VK_H);
 break;
 case 'I' :
 doType (VK_SHIFT, VK_I);
 break;
 case 'J' :
 doType (VK_SHIFT, VK_J);
 break;
 case 'K' :
 doType (VK_SHIFT, VK_K);
 break;
 case 'L' :
 doType (VK_SHIFT, VK_L);
 break;
 case 'M' :
 doType (VK_SHIFT, VK_M);
 break;
 case 'N' :
 doType (VK_SHIFT, VK_N);
 break;
 case 'O' :
 doType (VK_SHIFT, VK_O);
 break;
 case 'P' :
 doType (VK_SHIFT, VK_P);
 break;
 case 'Q' :
 doType (VK_SHIFT, VK_Q);
 break;
 case 'R' :
 doType (VK_SHIFT, VK_R);
 break;
 case 'S' :
 doType (VK_SHIFT, VK_S);
 break;
 case 'T' :
 doType (VK_SHIFT, VK_T);
 break;
 case 'U' :
 doType (VK_SHIFT, VK_U);
 break;
 case 'V' :
 doType (VK_SHIFT, VK_V);
 break;
 case 'W' :
 doType (VK_SHIFT, VK_W);
 break;
 case 'X' :
 doType (VK_SHIFT, VK_X);
 break;
 case 'Y' :
 doType (VK_SHIFT, VK_Y);
 break;
 case 'Z' :
 doType (VK_SHIFT, VK_Z);
 break;
 case '`' :
 doType (VK_BACK_QUOTE);
 break;
 case '0' :
 doType (VK_0);
 break;
 case '1' :
 doType (VK_1);
 break;
 case '2' :
 doType (VK_2);
 break;
 case '3' :
 doType (VK_3);
 break;
 case '4' :
 doType (VK_4);
 break;
 case '5' :
 doType (VK_5);
 break;
 case '6' :
 doType (VK_6);
 break;
 case '7' :
 doType (VK_7);
 break;
 case '8' :
 doType (VK_8);
 break;
 case '9' :
 doType (VK_9);
 break;
 case '-' :
 doType (VK_MINUS);
 break;
 case '=' :
 doType (VK_EQUALS);
 break;
 case '~' :
 doType (VK_SHIFT, VK_BACK_QUOTE);
 break;
 case '!' :
 doType (VK_EXCLAMATION_MARK);
 break;
 case '@' :
 doType (VK_AT);
 break;
 case '#' :
 doType (VK_NUMBER_SIGN);
 break;
 case '$' :
 doType (VK_DOLLAR);
 break;
 case '%' :
 doType (VK_SHIFT, VK_5);
 break;
 case '^' :
 doType (VK_CIRCUMFLEX);
 break;
 case '&' :
 doType (VK_AMPERSAND);
 break;
 case '*' :
 doType (VK_ASTERISK);
 break;
 case '(' :
 doType (VK_LEFT_PARENTHESIS);
 break;
 case ')' :
 doType (VK_RIGHT_PARENTHESIS);
 break;
 case '_' :
 doType (VK_UNDERSCORE);
 break;
 case '+' :
 doType (VK_PLUS);
 break;
 case '\t' :
 doType (VK_TAB);
 break;
 case '\n' :
 doType (VK_ENTER);
 break;
 case '[' :
 doType (VK_OPEN_BRACKET);
 break;
 case ']' :
 doType (VK_CLOSE_BRACKET);
 break;
 case '\\' :
 doType (VK_BACK_SLASH);
 break;
 case '{' :
 doType (VK_SHIFT, VK_OPEN_BRACKET);
 break;
 case '}' :
 doType (VK_SHIFT, VK_CLOSE_BRACKET);
 break;
 case '|' :
 doType (VK_SHIFT, VK_BACK_SLASH);
 break;
 case ';' :
 doType (VK_SEMICOLON);
 break;
 case ':' :
 doType (VK_COLON);
 break;
 case '\'' :
 doType (VK_QUOTE);
 break;
 case '""' :
 doType (VK_QUOTEDBL);
 break;
 case ',' :
 doType (VK_COMMA);
 break;
 case '<' :
 doType (VK_SHIFT, VK_COMMA);
 break;
 case '.' :
 doType (VK_PERIOD);
 break;
 case '>' :
 doType (VK_SHIFT, VK_PERIOD);
 break;
 case '/' :
 doType (VK_SLASH);
 break;
 case '?' :
 doType (VK_SHIFT, VK_SLASH);
 break;
 case ' ' :
 doType (VK_SPACE);
 break;
 default :
 throw new IllegalArgumentException (""Cannot type character "" + character);
 }
 }","public static void main (String [] args) throws Exception {
 int [] values = new int [10];
 values [0] = 2;
 System.out.print (values [0]);
 for (int i = 1;
 i < values.length; i ++) {
 values [i] = values [i - 1] + 2;
 System.out.print ("" "" + values [i]);
 }
 }",0
802,"public static String toHexString (byte bytes []) {
 if (bytes == null) {
 return null;
 }
 StringBuffer sb = new StringBuffer ();
 for (int iter = 0;
 iter < bytes.length; iter ++) {
 byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
 byte low = (byte) (bytes [iter] & 0x0f);
 sb.append (nibble2char (high));
 sb.append (nibble2char (low));
 }
 return sb.toString ();
 }","public static String toHexString (byte [] bytes) {
 StringBuilder hexString = new StringBuilder ();
 for (int i = 0;
 i < bytes.length; i ++) {
 String hex = Integer.toHexString (0xFF & bytes [i]);
 if (hex.length () == 1) {
 hexString.append ('0');
 }
 hexString.append (hex);
 }
 return hexString.toString ();
 }",1
6,"public static void main (String [] args) throws InterruptedException {
 AtomicInteger counter = new AtomicInteger ();
 ExecutorService pool = Executors.newFixedThreadPool (4);
 for (int i = 0;
 i < 4; ++ i) {
 pool.execute (new MyTask (counter));
 }
 pool.shutdown ();
 pool.awaitTermination (1, TimeUnit.HOURS);
 }","public static void main (String [] args) throws InterruptedException {
 BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
 expensiveObjects.put (new Object ());
 expensiveObjects.put (new Object ());
 expensiveObjects.put (new Object ());
 expensiveObjects.put (new Object ());
 ExecutorService executorService = Executors.newFixedThreadPool (4);
 for (int i = 0;
 i < 4; i ++) {
 executorService.execute (new MyRunnable (expensiveObjects));
 }
 executorService.shutdown ();
 executorService.awaitTermination (5, TimeUnit.SECONDS);
 System.out.println (""Final: "" + outputCount.get ());
 }",1
1492,"public void onActivityResult (int requestCode, int resultCode, Intent data) {
 super.onActivityResult (requestCode, resultCode, data);
 if (resultCode == RESULT_OK) {
 switch (requestCode) {
 case SELECT_IMAGE :
 String imagePath = getPath (data.getData ());
 Savingimagepath (imagePath);
 img.setImageDrawable (Drawable.createFromPath (imagePath));
 break;
 }
 }
 }","public static void main (String [] args) {
 String set = new java.util.BitSet () {
 {
 set (1, 100 + 1);
 }
 }
 .toString ();
 System.out.append (set, 1, set.length () - 1);
 }",0
603,"public static void main (String [] args) throws Exception {
 DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance ();
 DocumentBuilder db = dbf.newDocumentBuilder ();
 Document document = db.parse (new File (""input.xml""));
 NodeList nodeList = document.getElementsByTagName (""Item"");
 for (int x = 0, size = nodeList.getLength ();
 x < size; x ++) {
 System.out.println (nodeList.item (x).getAttributes ().getNamedItem (""name"").getNodeValue ());
 }
 }","public static void main (String [] s) throws VTDException {
 VTDGen vg = new VTDGen ();
 if (! vg.parseFile (""input.xml"", false)) return;
 VTDNav vn = vg.getNav ();
 AutoPilot ap = new AutoPilot (vn);
 ap.selectXPath (""/xml/item/@name"");
 int i = 0;
 while ((i = ap.evalXPath ()) != - 1) {
 System.out.println ("" item name is ===>"" + vn.toString (i + 1));
 }
 }",1
1570,"public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 new CaretPositionTest ();
 }}
 );
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",0
395,"public static void main (String [] args) {
 int a = 100;
 int b = 1000;
 int lowest = b;
 int highest = a;
 int count = 100000;
 Random random = new Random ();
 for (int i = 0;
 i < count; i ++) {
 int nextNumber = (int) ((Math.abs (random.nextDouble ()) * (b - a))) + a;
 if (nextNumber < a || nextNumber > b) {
 System.err.println (""number not in range :"" + nextNumber);
 } else {
 System.out.println (nextNumber);
 }
 if (nextNumber < lowest) {
 lowest = nextNumber;
 }
 if (nextNumber > highest) {
 highest = nextNumber;
 }
 }
 System.out.println (""Produced "" + count + "" numbers from "" + lowest + "" to "" + highest);
 }","public static final void main (String...aArgs) {
 log (""Generating 10 random integers in range 1..10."");
 int START = 1;
 int END = 10;
 Random randomGenerator = new Random ();
 for (int idx = 1;
 idx <= 10; ++ idx) {
 showRandomInteger (START, END, randomGenerator);
 }
 log (""Done"");
 }",1
239,"private int count8 (int n) {
 String nString = Integer.toString (n);
 boolean isPrevChar8 = false;
 int total = 0;
 for (int i = 0;
 i < nString.length (); i ++) {
 char nextChar = nString.charAt (i);
 if (nextChar == '8') {
 total += (isPrevChar8 ? 2 : 1);
 isPrevChar8 = true;
 } else {
 isPrevChar8 = false;
 }
 }
 return total;
 }","public static int count8 (int num) {
 int count = 0;
 boolean doubl = false;
 while (true) {
 int n = num % 10;
 num = num / 10;
 if (n == 8) {
 if (doubl) {
 count = count + 2;
 } else {
 count ++;
 }
 doubl = true;
 } else {
 doubl = false;
 }
 if (num == 0) break;
 }
 return count;
 }",1
1487,"public int [] solution (String S, int [] P, int [] Q) {
 int N = S.length ();
 int M = P.length;
 int [] result = new int [M];
 lastOccurrencesMap = new int [3] [N];
 int lastA = - 1;
 int lastC = - 1;
 int lastG = - 1;
 for (int i = 0;
 i < N; i ++) {
 char c = S.charAt (i);
 if (c == 'A') {
 lastA = i;
 } else if (c == 'C') {
 lastC = i;
 } else if (c == 'G') {
 lastG = i;
 }
 lastOccurrencesMap [0] [i] = lastA;
 lastOccurrencesMap [1] [i] = lastC;
 lastOccurrencesMap [2] [i] = lastG;
 }
 for (int i = 0;
 i < M; i ++) {
 int startIndex = P [i];
 int endIndex = Q [i];
 int minimum = 4;
 for (int n = 0;
 n < 3; n ++) {
 int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
 if (lastOccurence != 0) {
 minimum = n + 1;
 break;
 }
 }
 result [i] = minimum;
 }
 return result;
 }","private void transform (HSSFRow rowOld, XSSFRow rowNew) {
 XSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 if (rowOld.getRowStyle () != null) {
 Integer hash = rowOld.getRowStyle ().hashCode ();
 if (! this.styleMap.containsKey (hash)) this.transform (hash, rowOld.getRowStyle (), this.workbookNew.createCellStyle ());
 rowNew.setRowStyle (this.styleMap.get (hash));
 }
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform ((HSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",0
825,"public synchronized void run () {
 int i = 2;
 while (i < 50) {
 while (s.getState () != 1) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 1) System.out.println (""t2 "" + i);
 s.setState (2);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }","public void run () {
 try {
 for (int i = 0;
 i < 2; i ++) {
 System.out.println (""tic"");
 }
 } catch (Exception e) {
 e.getStackTrace ();
 }
 }",1
1394,"public static boolean contains (String a, String b) {
 String temp = b;
 for (int i = 0;
 i < a.length (); i ++) {
 temp = temp.replaceFirst (Pattern.quote (a.substring (i, i + 1)), """");
 if (b.length () - temp.length () != i + 1) return false;
 }
 return true;
 }","public boolean isBalanced (String strExpression) {
 Map < Character, Character > bracketPair = new HashMap < Character, Character > ();
 bracketPair.put ('(', ')');
 bracketPair.put ('[', ']');
 bracketPair.put ('{', '}');
 Stack < Character > stk = new Stack < Character > ();
 for (int i = 0;
 i < strExpression.length (); i ++) {
 if (bracketPair.containsKey (strExpression.charAt (i))) stk.push (strExpression.charAt (i));
 else if (bracketPair.containsValue (strExpression.charAt (i))) if (stk.isEmpty () || bracketPair.get (stk.pop ()) != strExpression.charAt (i)) return false;
 }
 if (stk.isEmpty ()) return true;
 else return false;
 }",0
1870,"public void type (char c) {
 keyPress (VK_ALT);
 keyPress (VK_NUMPAD0);
 keyRelease (VK_NUMPAD0);
 String altCode = Integer.toString (c);
 for (int i = 0;
 i < altCode.length (); i ++) {
 c = (char) (altCode.charAt (i) + '0');
 keyPress (c);
 keyRelease (c);
 }
 keyRelease (VK_ALT);
 }","public static void main (String [] args) {
 String [] list1 = {""a"", ""b"", ""c"",};
 TimeUnit [] list2 = TimeUnit.values ();
 int [] list3 = new int [] {1, 2, 3, 4};
 int [] lengths = new int [] {list1.length, list2.length, list3.length};
 for (int [] indices : new CartesianProduct (lengths)) {
 System.out.println (Arrays.toString (indices) + "" "" + list1 [indices [0]] + "", "" + list2 [indices [1]] + "", "" + list3 [indices [2]]);
 }
 }",0
85,"public V remove (Object key) {
 readWriteLock.writeLock ().lock ();
 V value;
 try {
 value = super.remove (key);
 } finally {
 readWriteLock.writeLock ().unlock ();
 }
 return value;
 }","public VV remove (String key) {
 synchronized (lock) {
 Item < VV > item = cache.remove (key);
 if (item != null) {
 return item.payload;
 } else {
 return null;
 }
 }
 }",1
1072,"public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) {
 return false;
 }
 for (int i = 0;
 i < s2.length (); i ++) {
 if (! s1.contains ("""" + s2.charAt (i))) {
 return false;
 }
 s1 = s1.replaceFirst ("""" + s2.charAt (i), """");
 s2 = s2.replaceFirst ("""" + s2.charAt (i), """");
 }
 return true;
 }","public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 char [] c1 = s1.toCharArray ();
 char [] c2 = s2.toCharArray ();
 Arrays.sort (c1);
 Arrays.sort (c2);
 for (int i = 0;
 i < c1.length; i ++) {
 if (c1 [i] != c2 [i]) return false;
 }
 return true;
 }",0
161,"public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }",1
1964,"public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }","static String transpose (String s) {
 char [] c = s.toCharArray ();
 int n = (int) Math.sqrt (s.length ());
 for (int i = 0;
 i < n; ++ i) {
 for (int j = i + 1;
 j < n; ++ j) {
 char h = c [i * n + j];
 c [i * n + j] = c [j * n + i];
 c [j * n + i] = h;
 }
 }
 return new String (c);
 }",0
1501,"public void run () {
 try {
 UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
 } catch (Exception ex) {
 }
 final JPanel panel = new JPanel ();
 panel.setBackground (Color.RED);
 final JFrame frame = new JFrame (""Test"");
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.add (panel);
 JButton change = new JButton (""Switch"");
 change.addActionListener (new ActionListener () {
 @Override
 public void actionPerformed (ActionEvent e) {
 long start = System.currentTimeMillis ();
 frame.remove (panel);
 long end = System.currentTimeMillis ();
 JPanel newPanel = new JPanel ();
 newPanel.setBackground (Color.BLUE);
 frame.add (newPanel);
 frame.validate ();
 }}
 );
 frame.add (change, BorderLayout.SOUTH);
 frame.setSize (100, 100);
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }","public static void main (String [] args) {
 String test = ""The quick brown fox jumped over the lazy dog."";
 int countA = 0, countO = 0, countSpace = 0, countDot = 0;
 for (int i = 0;
 i < test.length (); i ++) {
 switch (test.charAt (i)) {
 case 'a' :
 case 'A' :
 countA ++;
 break;
 case 'o' :
 case 'O' :
 countO ++;
 break;
 case ' ' :
 countSpace ++;
 break;
 case '.' :
 countDot ++;
 break;
 }
 }
 System.out.printf (""%s%d%n%s%d%n%s%d%n%s%d"", ""A: "", countA, ""O: "", countO, ""Space: "", countSpace, ""Dot: "", countDot);
 }",0
349,"public int compare (int x, int y) {
 if (x & 1 == y & 1) {
 if (x & 1 == 0) {
 return Integer.compare (x, y);
 } else {
 return Integer.compare (y, x);
 }
 }
 if (x & 1 == 0) {
 return - 1;
 }
 return 1;
 }","@Override
 public int compare (Integer o1, Integer o2) {
 if (o1 % 2 == 0) {
 if (o2 % 2 == 0) {
 if (o1 < o2) return - 1;
 else return 1;
 } else {
 return - 1;
 }
 } else {
 if (o2 % 2 != 0) {
 if (o1 < o2) return 1;
 else return - 1;
 } else {
 return 1;
 }
 }
 }",1
1853,"public static void main (String [] args) {
 double rate = 0;
 CurrencyConverter w = new CurrencyConverter ();
 w.print ();
 System.out.print (""Choose the input currency: "");
 Scanner sc = new Scanner (System.in);
 int choice = sc.nextInt ();
 if (choice < 1 || choice > 12) {
 System.out.println (""404 not found XD"");
 sc.close ();
 return;
 }
 System.out.print (""Choose the output currency: "");
 int output = sc.nextInt ();
 Currency first = Currency.values () [choice - 1];
 Currency second = Currency.values () [output - 1];
 System.out.printf (""Now enter the input in "" + first.getFullName () + "": "");
 double input = sc.nextDouble ();
 if (choice == output) System.out.println (""Troller ._. pabobo"");
 rate = (input * first.getRate ()) / second.getRate ();
 System.out.print (""The conversion of "" + first.toString () + "" to "" + second.toString () + "" = "" + rate);
 sc.close ();
 }","public synchronized void run () {
 int i = 2;
 while (i < 50) {
 while (s.getState () != 1) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 1) System.out.println (""t2 "" + i);
 s.setState (2);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }",0
627,"public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }","public void type (String text) {
 char c;
 for (int ii = 0;
 ii < text.length (); ii ++) {
 c = text.charAt (ii);
 if (c <= 31 || c == 129) {
 pressControlKey (c);
 } else {
 typeAsciiCode (c);
 }
 }
 }",1
1928,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 System.out.println (""how many number you want to put in the pot?"");
 int num = input.nextInt ();
 int numbers [] = new int [num];
 for (int i = 0;
 i < num; i ++) {
 System.out.println (""number"" + i + "":"");
 numbers [i] = input.nextInt ();
 }
 for (int temp : numbers) {
 System.out.print (temp + ""\t"");
 }
 input.close ();
 }","private static int solution (int N) {
 int gap = 0;
 String binaryStr = Integer.toBinaryString (N);
 String [] zeroArrays = binaryStr.split (""1"");
 System.out.println (Arrays.toString (zeroArrays));
 for (String zeroArray : zeroArrays) {
 gap = zeroArray.length () > gap ? zeroArray.length () : gap;
 }
 return gap;
 }",0
693,"public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 JFrame frame = new FrameDemo ();
 frame.setVisible (true);
 }}
 );
 }","public static void main (String [] args) {
 JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (WindowConstants.EXIT_ON_CLOSE);
 frame.getContentPane ().setLayout (new BorderLayout (0, 0));
 JPanel centerPanel = new JPanel ();
 centerPanel.setPreferredSize (new Dimension (300, 200));
 centerPanel.setBackground (Color.green);
 centerPanel.setCursor (new Cursor (java.awt.Cursor.HAND_CURSOR));
 frame.getContentPane ().add (centerPanel);
 JPanel northPanel = new JPanel ();
 northPanel.setBackground (Color.RED);
 northPanel.setForeground (Color.BLACK);
 northPanel.setPreferredSize (new Dimension (0, 150));
 frame.getContentPane ().add (northPanel, BorderLayout.NORTH);
 JPanel westPanel = new JPanel ();
 westPanel.setBackground (Color.MAGENTA);
 westPanel.setPreferredSize (new Dimension (200, 0));
 frame.getContentPane ().add (westPanel, BorderLayout.WEST);
 JPanel southPanel = new JPanel ();
 southPanel.setBackground (Color.YELLOW);
 southPanel.setPreferredSize (new Dimension (0, 150));
 frame.getContentPane ().add (southPanel, BorderLayout.SOUTH);
 JPanel eastPanel = new JPanel ();
 eastPanel.setBackground (Color.BLUE);
 eastPanel.setPreferredSize (new Dimension (200, 0));
 frame.getContentPane ().add (eastPanel, BorderLayout.EAST);
 frame.pack ();
 frame.setVisible (true);
 frame.setLocationRelativeTo (null);
 }",1
1905,"static String shuffle (String text) {
 if (text.length () <= 1) return text;
 int split = text.length () / 2;
 String temp1 = shuffle (text.substring (0, split));
 String temp2 = shuffle (text.substring (split));
 if (Math.random () > 0.5) return temp1 + temp2;
 else return temp2 + temp1;
 }","static void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 String strAbsPathSrc = src.getAbsolutePath ();
 String strAbsPathDest = dest.getAbsolutePath ();
 try {
 Files.walkFileTree (src.toPath (), new SimpleFileVisitor < Path > () {
 @Override
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
 if (dstFile.exists ()) return FileVisitResult.CONTINUE;
 if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
 Files.copy (file, dstFile.toPath ());
 return FileVisitResult.CONTINUE;
 }}
 );
 } catch (IOException e) {
 return;
 }
 return;
 }",0
1372,"public void tick (float delta) {
 for (Entity e : entities) {
 if (color == Color.WHITE) {
 if (getSurrounding (- 32, - 32) != null && getSurrounding (- 32, - 32).getColor () == Color.BLACK) {
 if (getSurrounding (- 32, - 32).getStrength () < strength) {
 getSurrounding (- 32, - 32).setStrength (- 50);
 }
 }
 }
 if (! inGame.entities.isEmpty () && strength <= 0) {
 inGame.entities.remove (this);
 }
 }
 }","public void actionPerformed (ActionEvent e) {
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }",0
1386,"public static String toJavaMethodName (String xmlmethodName) {
 StringBuilder nameBuilder = new StringBuilder (xmlmethodName.length ());
 boolean capitalizeNextChar = false;
 for (char c : xmlMethodName.toCharArray ()) {
 if (c == '-') {
 capitalizeNextChar = true;
 continue;
 }
 if (capitalizeNextChar) {
 nameBuilder.append (Character.toUpperCase (c));
 } else {
 nameBuilder.append (c);
 }
 capitalizeNextChar = false;
 }
 return nameBuilder.toString ();
 }","public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 JFrame frame = new FrameDemo ();
 frame.setVisible (true);
 }}
 );
 }",0
1312,"public static void main (String [] args) {
 String stmt = "" INSERT INTO `TABLENAME` VALUES(xxx,yyy,zzz),(aaa,'bb),(b',ccc),(aaa,bbb,ccc); "";
 System.out.printf (""%s\n"", stmt);
 stmt = stmt.split (""(?i)\\s+values\\s*\\(|\\);"") [1];
 System.out.printf (""values list: %s\n"", stmt);
 Matcher m = Pattern.compile (""('\\w*)(\\)\\,\\()+(\\w*')"").matcher (stmt);
 while (m.find ()) {
 stmt = stmt.substring (0, m.start (2)) + ""###"" + stmt.substring (m.end (2), stmt.length ());
 System.out.printf (""values list with pattern subst inside char literal: %s\n"", stmt);
 }
 String [] multiValues = stmt.split (""\\)\\,\\("");
 for (int i = 0;
 i < multiValues.length; i ++) {
 multiValues [i] = multiValues [i].replaceAll (""###"", ""),("");
 }
 System.out.println (Arrays.toString (multiValues));
 }","public static void main (String [] args) throws InterruptedException {
 for (int i = 0;
 i < 6; i ++) {
 Runnable helloTask = new Runnable () {
 @Override
 public void run () {
 new ThreadSeq ().printHello ();
 }}
 ;
 Runnable worldTask = new Runnable () {
 @Override
 public void run () {
 new ThreadSeq ().printWorld ();
 }}
 ;
 Thread t1 = new Thread (helloTask);
 Thread t2 = new Thread (worldTask);
 t1.start ();
 t1.join ();
 t2.start ();
 t2.join ();
 }
 }",0
505,"public void start (Stage primaryStage) throws Exception {
 AnchorPane root = new AnchorPane ();
 root.setStyle (""-fx-padding:20;-fx-background-color:dodgerblue;"");
 final TextArea textArea = new TextArea ();
 AnchorPane.setTopAnchor (textArea, 10.0);
 AnchorPane.setLeftAnchor (textArea, 10.0);
 AnchorPane.setRightAnchor (textArea, 10.0);
 root.getChildren ().add (textArea);
 primaryStage.setScene (new Scene (root, 400, 300));
 primaryStage.show ();
 ScrollBar scrollBar = lookupVerticalScrollBar (textArea);
 scrollBar.setOpacity (0.0);
 scrollBar.visibleProperty ().addListener (new ChangeListener < Boolean > () {
 @Override
 public void changed (ObservableValue < ? extends Boolean > source, Boolean wasVisible, Boolean isVisible) {
 if (isVisible) {
 textArea.setPrefRowCount (textArea.getPrefRowCount () + 1);
 textArea.requestLayout ();
 }
 }}
 );
 }","public void start (Stage primaryStage) {
 final TextArea textArea = new TextArea ();
 textArea.setPrefSize (200, 40);
 textArea.setWrapText (true);
 textHolder.textProperty ().bind (textArea.textProperty ());
 textHolder.layoutBoundsProperty ().addListener (new ChangeListener < Bounds > () {
 @Override
 public void changed (ObservableValue < ? extends Bounds > observable, Bounds oldValue, Bounds newValue) {
 if (oldHeight != newValue.getHeight ()) {
 System.out.println (""newValue = "" + newValue.getHeight ());
 oldHeight = newValue.getHeight ();
 textArea.setPrefHeight (textHolder.getLayoutBounds ().getHeight () + 20);
 }
 }}
 );
 Group root = new Group (textArea);
 Scene scene = new Scene (root, 300, 250);
 primaryStage.setScene (scene);
 primaryStage.show ();
 }",1
1624,"synchronized public void print () throws InterruptedException {
 while (count < 15) {
 for (int i = 0;
 i < 5; i ++) {
 count ++;
 System.out.println (count + "" -- "" + Thread.currentThread ());
 }
 notifyAll ();
 wait ();
 }
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2 = (Graphics2D) g;
 g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 double xScale = ((double) getWidth () - (2 * padding) - labelPadding) / (scores.size () - 1);
 double yScale = ((double) getHeight () - 2 * padding - labelPadding) / (getMaxScore () - getMinScore ());
 List < Point > graphPoints = new ArrayList < > ();
 for (int i = 0;
 i < scores.size (); i ++) {
 int x1 = (int) (i * xScale + padding + labelPadding);
 int y1 = (int) ((getMaxScore () - scores.get (i)) * yScale + padding);
 graphPoints.add (new Point (x1, y1));
 }
 g2.setColor (Color.WHITE);
 g2.fillRect (padding + labelPadding, padding, getWidth () - (2 * padding) - labelPadding, getHeight () - 2 * padding - labelPadding);
 g2.setColor (Color.BLACK);
 for (int i = 0;
 i < numberYDivisions + 1; i ++) {
 int x0 = padding + labelPadding;
 int x1 = pointWidth + padding + labelPadding;
 int y0 = getHeight () - ((i * (getHeight () - padding * 2 - labelPadding)) / numberYDivisions + padding + labelPadding);
 int y1 = y0;
 if (scores.size () > 0) {
 g2.setColor (gridColor);
 g2.drawLine (padding + labelPadding + 1 + pointWidth, y0, getWidth () - padding, y1);
 g2.setColor (Color.BLACK);
 String yLabel = ((int) ((getMinScore () + (getMaxScore () - getMinScore ()) * ((i * 1.0) / numberYDivisions)) * 100)) / 100.0 + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (yLabel);
 g2.drawString (yLabel, x0 - labelWidth - 5, y0 + (metrics.getHeight () / 2) - 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 for (int i = 0;
 i < scores.size (); i ++) {
 if (scores.size () > 1) {
 int x0 = i * (getWidth () - padding * 2 - labelPadding) / (scores.size () - 1) + padding + labelPadding;
 int x1 = x0;
 int y0 = getHeight () - padding - labelPadding;
 int y1 = y0 - pointWidth;
 if ((i % ((int) ((scores.size () / 20.0)) + 1)) == 0) {
 g2.setColor (gridColor);
 g2.drawLine (x0, getHeight () - padding - labelPadding - 1 - pointWidth, x1, padding);
 g2.setColor (Color.BLACK);
 String xLabel = i + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (xLabel);
 g2.drawString (xLabel, x0 - labelWidth / 2, y0 + metrics.getHeight () + 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 }
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, padding + labelPadding, padding);
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, getWidth () - padding, getHeight () - padding - labelPadding);
 Stroke oldStroke = g2.getStroke ();
 g2.setColor (lineColor);
 g2.setStroke (GRAPH_STROKE);
 for (int i = 0;
 i < graphPoints.size () - 1; i ++) {
 int x1 = graphPoints.get (i).x;
 int y1 = graphPoints.get (i).y;
 int x2 = graphPoints.get (i + 1).x;
 int y2 = graphPoints.get (i + 1).y;
 g2.drawLine (x1, y1, x2, y2);
 }
 g2.setStroke (oldStroke);
 g2.setColor (pointColor);
 for (int i = 0;
 i < graphPoints.size (); i ++) {
 int x = graphPoints.get (i).x - pointWidth / 2;
 int y = graphPoints.get (i).y - pointWidth / 2;
 int ovalW = pointWidth;
 int ovalH = pointWidth;
 g2.fillOval (x, y, ovalW, ovalH);
 }
 }",0
572,"public int [] solution (String S, int [] P, int [] K) {
 char [] sc = S.toCharArray ();
 int [] A = new int [sc.length];
 int [] G = new int [sc.length];
 int [] C = new int [sc.length];
 int prevA = - 1, prevG = - 1, prevC = - 1;
 for (int i = 0;
 i < sc.length; i ++) {
 if (sc [i] == 'A') prevA = i;
 else if (sc [i] == 'G') prevG = i;
 else if (sc [i] == 'C') prevC = i;
 A [i] = prevA;
 G [i] = prevG;
 C [i] = prevC;
 }
 int [] result = new int [P.length];
 for (int i = 0;
 i < P.length; i ++) {
 if (A [K [i]] >= P [i] && A [K [i]] <= K [i]) {
 result [i] = 1;
 } else if (C [K [i]] >= P [i] && C [K [i]] <= K [i]) {
 result [i] = 2;
 } else if (G [K [i]] >= P [i] && G [K [i]] <= K [i]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 return result;
 }","public static int [] solution (String S, int [] P, int [] Q) {
 int [] arr = new int [S.length ()];
 for (int i = 0;
 i < S.length (); i ++) {
 switch (S.charAt (i)) {
 case 'A' :
 arr [i] = 1;
 break;
 case 'C' :
 arr [i] = 2;
 break;
 case 'G' :
 arr [i] = 3;
 break;
 case 'T' :
 arr [i] = 4;
 break;
 default :
 break;
 }
 }
 segmentNode root = buildTree (arr, 0, S.length () - 1);
 int [] result = new int [P.length];
 for (int i = 0;
 i < P.length; i ++) {
 result [i] = getMin (root, P [i], Q [i]);
 }
 return result;
 }",1
163,"public void run () {
 countCalled ++;
 if (countCalled < maxCalled) {
 if (countCalled % 3 == 0) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 System.out.println (""Push a new event to EDT"");
 frame1.getContentPane ().setBackground (Color.red);
 isThereReallyEDT ();
 }}
 );
 } else {
 if (this.getExecutionTime () < ALLOWED_TARDINESS) {
 countRun ++;
 isThereReallyEDT ();
 }
 }
 } else {
 System.out.println (""Terminating this madness"");
 System.exit (0);
 }
 }","public void run () {
 JFrame frame2 = new JFrame (""Frame 2"");
 frame2.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame2.getContentPane ().add (new JLabel (""Hello in frame 2""));
 frame2.pack ();
 frame2.setLocation (200, 200);
 frame2.setVisible (true);
 isThereReallyEDT ();
 }",1
1878,"public void makeGrid (int size) {
 this.lines = size;
 grid = new Cell [size] [size];
 for (int i = 0;
 i < size; i ++) for (int j = 0;
 j < size; j ++) {
 grid [i] [j] = new Cell ();
 }
 }","public int [] solution (String S, int [] P, int [] Q) {
 final char [] characterInput = S.toCharArray ();
 final int [] integerInput = new int [characterInput.length];
 for (int counter = 0;
 counter < characterInput.length; counter ++) {
 integerInput [counter] = characterMapping.get (characterInput [counter]);
 }
 int [] result = new int [P.length];
 for (int index = 0;
 index < P.length; index ++) {
 if (P [index] == Q [index]) {
 result [index] = integerInput [P [index]];
 break;
 }
 final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
 final int minimumValue = minimum (subArray);
 result [index] = minimumValue;
 }
 return result;
 }",0
1882,"public void authenticate (String apiKeyAndSessionKey, String host, String applicationSecret) throws IOException, XMPPException {
 if (apiKeyAndSessionKey == null || applicationSecret == null) {
 throw new IllegalArgumentException (""Invalid parameters"");
 }
 String [] keyArray = apiKeyAndSessionKey.split (""\\|"", 2);
 if (keyArray.length < 2) {
 throw new IllegalArgumentException (""API key or session key is not present"");
 }
 this.apiKey = keyArray [0];
 this.applicationSecret = applicationSecret;
 this.sessionKey = keyArray [1];
 this.authenticationId = sessionKey;
 this.password = applicationSecret;
 this.hostname = host;
 String [] mechanisms = {""DIGEST-MD5""};
 Map < String, String > props = new HashMap < String, String > ();
 this.sc = Sasl.createSaslClient (mechanisms, null, ""xmpp"", host, props, this);
 authenticate ();
 }","public void run () {
 int i = 1;
 while (true) {
 System.out.println (i);
 try {
 Thread.sleep (1000);
 cb.await ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 i = i + 3;
 }
 }",0
1939,"public static String validName (Scanner input, Scanner histogram) {
 String user = """";
 String name = input.next ();
 if (histogram.findInLine (name) != null) {
 System.out.println (""This name exist"");
 } else {
 System.out.println (""Name not found"");
 user = validName (input, histogram);
 }
 return user;
 }","public void actionPerformed (ActionEvent e) {
 String name = employeeName.getText ();
 if (name.equals ("""") || alreadyInList (name)) {
 Toolkit.getDefaultToolkit ().beep ();
 employeeName.requestFocusInWindow ();
 employeeName.selectAll ();
 return;
 }
 int index = list.getSelectedIndex ();
 if (index == - 1) {
 index = 0;
 } else {
 index ++;
 }
 listModel.insertElementAt (employeeName.getText (), index);
 employeeName.requestFocusInWindow ();
 employeeName.setText ("""");
 list.setSelectedIndex (index);
 list.ensureIndexIsVisible (index);
 }",0
1754,"int computeHeight (Node root) {
 int levels = 0;
 for (Node child : root.children) {
 int childHeight = computeHeight (child);
 if (childHeight > levels) {
 levels = childHeight;
 }
 }
 return levels + 1;
 }","public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }",0
949,"public static void main (String [] args) {
 CountDownLatch latch = new CountDownLatch (1);
 System.out.println (""Start server"");
 ServerModule serverModule = new ServerModule (latch);
 serverModule.start ();
 try {
 latch.await ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 System.out.println (""Server is done"");
 }","public static void main (String [] args) throws InterruptedException {
 Thread t = new Thread (() -> {
 try {
 Thread.sleep (5000L);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 });
 System.out.println (""Starting Server!"");
 t.start ();
 t.join ();
 System.out.println (""Server is done!"");
 }",1
921,"public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 Set < Integer > leaves = new HashSet < > ();
 for (int i = 0;
 i < A.length; i ++) {
 leaves.add (A [i]);
 if (leaves.contains (X) && leaves.size () == X) return i;
 }
 return - 1;
 }",1
1411,"public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String lsStart = """";
 String lsInsert = """";
 String lsEnd = """";
 String lsText = """";
 Log.d (""debug"", moPattern.toString ());
 Log.d (""debug"", ""source: "" + source + "", start: "" + start + "", end:"" + end + "", dest: "" + dest + "", dstart: "" + dstart + "", dend: "" + dend);
 lsText = dest.toString ();
 if (lsText.length () > 0) {
 lsStart = lsText.substring (0, dstart);
 Log.d (""debug"", ""lsStart : "" + lsStart);
 if (source != """") {
 lsInsert = source.toString ();
 Log.d (""debug"", ""lsInsert: "" + lsInsert);
 }
 lsEnd = lsText.substring (dend);
 Log.d (""debug"", ""lsEnd   : "" + lsEnd);
 lsText = lsStart + lsInsert + lsEnd;
 Log.d (""debug"", ""lsText  : "" + lsText);
 }
 Matcher loMatcher = moPattern.matcher (lsText);
 Log.d (""debug"", ""loMatcher.matches(): "" + loMatcher.matches () + "", lsText: "" + lsText);
 if (! loMatcher.matches ()) {
 return """";
 }
 return null;
 }","public static String merge (String...strings) {
 int maxLength = 0;
 StringBuilder sb = new StringBuilder ();
 for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
 for (int i = 0;
 i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
 return sb.toString ();
 }",0
268,"public static void main (String [] args) {
 final A a = new A ();
 final B b = new B ();
 NameFuncPair [] fArray = new NameFuncPair [] {new NameFuncPair (""A"") {
 @Override
 void f (String x) {
 a.g (x);
 }}
 , new NameFuncPair (""B"") {
 @Override
 void f (String x) {
 b.h (x);
 }}
 ,};
 for (NameFuncPair fInstance : fArray) {
 if (fInstance.name.equals (""B"")) {
 fInstance.f (fInstance.name + ""(some args)"");
 }
 }
 }","public static void main (final String [] argv) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
 final String methodName;
 final Method method;
 final Main main;
 main = new Main ();
 if (argv.length == 0) {
 methodName = ""foo"";
 } else {
 methodName = ""bar"";
 }
 method = Main.class.getDeclaredMethod (methodName, int.class);
 main.car (method, 42);
 }",1
285,"public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 new CaretPositionTest ();
 }}
 );
 }","public static void main (final String [] args) {
 final JFrame frame = new JFrame (""Display Keyword Panel"");
 final JPanel panel = new JPanel ();
 panel.setLayout (new BoxLayout (panel, BoxLayout.Y_AXIS));
 text1.setBorder (null);
 text1.setOpaque (false);
 text1.setEditable (false);
 text2.setBorder (null);
 text2.setOpaque (false);
 text2.setEditable (false);
 text1.getInputMap ().put (KeyStroke.getKeyStroke ('G', KeyEvent.CTRL_DOWN_MASK), ""copyAll"");
 text1.getActionMap ().put (""copyAll"", new AbstractAction () {
 @Override
 public void actionPerformed (ActionEvent e) {
 StringBuilder s = new StringBuilder ();
 s.append (text1.getText ()).append (""\n"").append (text2.getText ());
 System.out.println (s.toString ());
 }}
 );
 panel.add (text1);
 panel.add (text2);
 frame.setLayout (new BorderLayout ());
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.getContentPane ().add (panel, BorderLayout.CENTER);
 frame.setLocation (450, 400);
 frame.pack ();
 frame.setVisible (true);
 }",1
1017,"public String getString () {
 StringBuilder msg = new StringBuilder ();
 String read;
 do {
 read = inputGenerator.getMessage ();
 msg.append (read);
 } while (read.toLowerCase ().startsWith (""hi""));
 return msg.toString ();
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2 = (Graphics2D) g;
 g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 double xScale = ((double) getWidth () - (2 * padding) - labelPadding) / (scores.size () - 1);
 double yScale = ((double) getHeight () - 2 * padding - labelPadding) / (getMaxScore () - getMinScore ());
 List < Point > graphPoints = new ArrayList < > ();
 for (int i = 0;
 i < scores.size (); i ++) {
 int x1 = (int) (i * xScale + padding + labelPadding);
 int y1 = (int) ((getMaxScore () - scores.get (i)) * yScale + padding);
 graphPoints.add (new Point (x1, y1));
 }
 g2.setColor (Color.WHITE);
 g2.fillRect (padding + labelPadding, padding, getWidth () - (2 * padding) - labelPadding, getHeight () - 2 * padding - labelPadding);
 g2.setColor (Color.BLACK);
 for (int i = 0;
 i < numberYDivisions + 1; i ++) {
 int x0 = padding + labelPadding;
 int x1 = pointWidth + padding + labelPadding;
 int y0 = getHeight () - ((i * (getHeight () - padding * 2 - labelPadding)) / numberYDivisions + padding + labelPadding);
 int y1 = y0;
 if (scores.size () > 0) {
 g2.setColor (gridColor);
 g2.drawLine (padding + labelPadding + 1 + pointWidth, y0, getWidth () - padding, y1);
 g2.setColor (Color.BLACK);
 String yLabel = ((int) ((getMinScore () + (getMaxScore () - getMinScore ()) * ((i * 1.0) / numberYDivisions)) * 100)) / 100.0 + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (yLabel);
 g2.drawString (yLabel, x0 - labelWidth - 5, y0 + (metrics.getHeight () / 2) - 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 for (int i = 0;
 i < scores.size (); i ++) {
 if (scores.size () > 1) {
 int x0 = i * (getWidth () - padding * 2 - labelPadding) / (scores.size () - 1) + padding + labelPadding;
 int x1 = x0;
 int y0 = getHeight () - padding - labelPadding;
 int y1 = y0 - pointWidth;
 if ((i % ((int) ((scores.size () / 20.0)) + 1)) == 0) {
 g2.setColor (gridColor);
 g2.drawLine (x0, getHeight () - padding - labelPadding - 1 - pointWidth, x1, padding);
 g2.setColor (Color.BLACK);
 String xLabel = i + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (xLabel);
 g2.drawString (xLabel, x0 - labelWidth / 2, y0 + metrics.getHeight () + 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 }
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, padding + labelPadding, padding);
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, getWidth () - padding, getHeight () - padding - labelPadding);
 Stroke oldStroke = g2.getStroke ();
 g2.setColor (lineColor);
 g2.setStroke (GRAPH_STROKE);
 for (int i = 0;
 i < graphPoints.size () - 1; i ++) {
 int x1 = graphPoints.get (i).x;
 int y1 = graphPoints.get (i).y;
 int x2 = graphPoints.get (i + 1).x;
 int y2 = graphPoints.get (i + 1).y;
 g2.drawLine (x1, y1, x2, y2);
 }
 g2.setStroke (oldStroke);
 g2.setColor (pointColor);
 for (int i = 0;
 i < graphPoints.size (); i ++) {
 int x = graphPoints.get (i).x - pointWidth / 2;
 int y = graphPoints.get (i).y - pointWidth / 2;
 int ovalW = pointWidth;
 int ovalH = pointWidth;
 g2.fillOval (x, y, ovalW, ovalH);
 }
 }",0
1651,"public static void printTable (String [] countries, int [] populations) {
 if (countries.length != 0) {
 int longestNameInput = countries [0].length ();
 int longestPopInput = String.valueOf (populations [0]).length ();
 for (int i = 0;
 i < countries.length; i ++) {
 int countLength = countries [i].length ();
 int popLength = String.valueOf (populations [i]).length ();
 if (countLength > longestNameInput) longestNameInput = countLength;
 if (popLength > longestPopInput) longestPopInput = popLength;
 }
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.print (countries [i]);
 for (int j = 0;
 j < (longestNameInput - countries [i].length ()); j ++) System.out.print ("" "");
 System.out.print ("" | "");
 for (int k = 0;
 k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print ("" "");
 System.out.println (populations [i]);
 }
 }
 }","public void run () {
 try {
 for (int i = 0;
 i < 2; i ++) {
 System.out.println (""tic"");
 }
 } catch (Exception e) {
 e.getStackTrace ();
 }
 }",0
321,"public ValidateRevalidateRepaint () {
 validate = revalidate = repaint = false;
 panel = new JPanel (new GridBagLayout ());
 gbc = new GridBagConstraints ();
 gbc.insets = new Insets (0, 20, 0, 20);
 panel.add (getFiller (), gbc);
 JFrame f = new JFrame ();
 f.setJMenuBar (getMenuBar ());
 f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 f.getContentPane ().add (panel);
 f.getContentPane ().add (getRadioPanel (), ""East"");
 f.getContentPane ().add (getCheckBoxPanel (), ""South"");
 f.setSize (400, 200);
 f.setLocation (200, 200);
 f.setVisible (true);
 }","public ValidateRevalidateRepaint () {
 center = new JPanel (new GridLayout (1, 0, 10, 10));
 JFrame f = new JFrame ();
 f.setTitle (""VRR"");
 f.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 f.add (center, BorderLayout.CENTER);
 f.add (getRadioPanel (), BorderLayout.EAST);
 f.add (getCheckBoxPanel (), BorderLayout.SOUTH);
 makeChange (4);
 f.pack ();
 f.setLocationRelativeTo (null);
 f.setVisible (true);
 }",1
559,"public static void close (Connection connection, Statement statement, ResultSet rs) {
 if (rs != null) {
 try {
 rs.close ();
 } catch (Exception e) {
 _logger.warning (e.toString ());
 }
 }
 if (statement != null) {
 try {
 statement.close ();
 } catch (Exception e) {
 _logger.warning (e.toString ());
 }
 }
 if (connection != null) {
 try {
 connection.close ();
 } catch (Exception e) {
 _logger.warning (e.toString ());
 }
 }
 }","public static void close (Statement...statements) {
 for (Statement stmt : statements) {
 try {
 if (stmt != null) stmt.close ();
 } catch (SQLException se) {
 }
 }
 }",1
1688,"public static void main (String [] args) {
 int n = 0;
 Scanner s = new Scanner (System.in);
 System.out.print (""Enter an integer number: "");
 n = s.nextInt ();
 if (n <= 0) System.out.print (""Enter numbers greater than 0"");
 else {
 NumberToWord a = new NumberToWord ();
 System.out.print (""After conversion number in words is :"");
 a.pw ((n / 1000000000), "" Hundred"");
 a.pw ((n / 10000000) % 100, "" crore"");
 a.pw (((n / 100000) % 100), "" lakh"");
 a.pw (((n / 1000) % 100), "" thousand"");
 a.pw (((n / 100) % 10), "" hundred"");
 a.pw ((n % 100), "" "");
 }
 }","public static void main (String args []) {
 DataInputStream cin = new DataInputStream (System.in);
 try {
 int i = Integer.parseInt (cin.readLine ());
 } catch (ArithmeticException e) {
 } catch (Exception e) {
 System.exit (0);
 } finally {
 System.out.println (""Won't be executed"");
 System.out.println (""No error"");
 }
 }",0
1953,"public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }","public static void main (String args []) {
 int ci, i, j, k, l = 0;
 String str, str1, result, subString;
 char c1, c2, ch;
 Scanner scan = new Scanner (System.in);
 System.out.print (""Enter a String : "");
 str = scan.nextLine ();
 i = str.length ();
 for (c1 = 'A'; c1 <= 'z'; c1 ++) {
 for (c2 = 'A'; c2 <= 'z'; c2 ++) {
 result = new String (new char [] {c1, c2});
 k = 0;
 for (j = 0; j < i - 1; j ++) {
 subString = str.substring (j, j + 2);
 if (result.equals (subString)) {
 k ++;
 }
 }
 if (k > 0) {
 System.out.println ("""" + result + "": "" + k);
 }
 }
 }
 }",0
1410,"public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String formatedSource = source.subSequence (start, end).toString ();
 String destPrefix = dest.subSequence (0, dstart).toString ();
 String destSuffix = dest.subSequence (dend, dest.length ()).toString ();
 String result = destPrefix + formatedSource + destSuffix;
 result = result.replace ("","", ""."");
 Matcher matcher = mPattern.matcher (result);
 if (matcher.matches ()) {
 return null;
 }
 return """";
 }","public static String merge (String...s) {
 int maxLen = 0;
 for (String str : s) {
 maxLen = Math.max (maxLen, str.length ());
 }
 StringBuilder b = new StringBuilder ();
 for (int i = 0;
 i < maxLen; ++ i) {
 for (String str : s) {
 if (str.length () > i) {
 b.append (str.charAt (i));
 }
 }
 }
 return b.toString ();
 }",0
1122,"private static String [] tokenizer (String subject, String [] delimiters) {
 Arrays.sort (delimiters, new Comparator < String > () {
 @Override
 public int compare (String s1, String s2) {
 return s2.length () - s1.length ();
 }}
 );
 List < String > tokens = new ArrayList < String > ();
 tokens.add (subject);
 for (int i = 0;
 i < delimiters.length; i ++) {
 tokens = splitStrings (tokens, delimiters, i);
 }
 return tokens.toArray (new String [] {});
 }","public static void removeDuplicates (char [] str) {
 if (str == null) return;
 int len = str.length;
 if (len < 2) return;
 int tail = 1;
 for (int i = 1;
 i < len; ++ i) {
 int j;
 for (j = 0; j < tail; ++ j) {
 if (str [i] == str [j]) break;
 }
 if (j == tail) {
 str [tail] = str [i];
 ++ tail;
 }
 }
 str [tail] = 0;
 }",0
273,"public static void listFilesForFolder (final File folder) {
 for (final File fileEntry : folder.listFiles ()) {
 if (fileEntry.isDirectory ()) {
 listFilesForFolder (fileEntry);
 } else {
 if (fileEntry.isFile ()) {
 temp = fileEntry.getName ();
 if ((temp.substring (temp.lastIndexOf ('.') + 1, temp.length ()).toLowerCase ()).equals (""txt"")) System.out.println (""File= "" + folder.getAbsolutePath () + ""\\"" + fileEntry.getName ());
 }
 }
 }
 }","public static void listFilesForFolder (final File folder) {
 for (final File fileEntry : folder.listFiles ()) {
 if (fileEntry.isDirectory ()) {
 listFilesForFolder (fileEntry);
 } else {
 System.out.println (fileEntry.getName ());
 }
 }
 }",1
752,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if (name.isEmpty ()) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || decimalValue.isEmpty ())) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 return name;
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int number;
 if ("""".equals (value)) {
 number = 0;
 } else if (value.length () > 4) {
 number = Integer.valueOf (value.substring (value.length () - 4), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 1000;
 if (number >= 100) {
 buffer.append (unitProcessor.getName (number / 100));
 buffer.append (SEPARATOR);
 buffer.append (SCALE.getName (EXPONENT));
 }
 String tensName = tensProcessor.getName (number % 100);
 if (! """".equals (tensName) && (number >= 100)) {
 buffer.append (SEPARATOR);
 }
 buffer.append (tensName);
 return buffer.toString ();
 }",1
58,"static String encrypt (String data) {
 String encrypted = new String ("""");
 for (char c : data.toCharArray ()) {
 char newC = c + 2;
 if (newC > 'z') newC -= 26;
 encrypted += newC;
 }
 return encrpyted;
 }","static String encrypt (String data) {
 String returned = new String ("""");
 for (char h : data.toCharArray ()) {
 if (h == 'a') returned += "" a', 'c"";
 if (h == 'b') returned += ""d"";
 if (h == 'c') returned += ""e"";
 if (h == 'd') returned += ""f"";
 if (h == 'e') returned += ""g"";
 if (h == 'f') returned += ""h"";
 if (h == 'g') returned += ""i"";
 if (h == 'h') returned += ""j"";
 if (h == 'i') returned += ""k"";
 if (h == 'j') returned += ""l"";
 if (h == 'k') returned += ""m"";
 if (h == 'l') returned += ""n"";
 if (h == 'm') returned += ""o"";
 if (h == 'n') returned += ""p"";
 if (h == 'o') returned += ""q"";
 if (h == 'p') returned += ""r"";
 if (h == 'q') returned += ""s"";
 if (h == 'r') returned += ""t"";
 if (h == 's') returned += ""u"";
 if (h == 't') returned += ""v"";
 if (h == 'u') returned += ""w"";
 if (h == 'v') returned += ""x"";
 if (h == 'w') returned += ""y"";
 if (h == 'x') returned += ""z"";
 if (h == 'y') returned += ""a"";
 if (h == 'z') returned += ""b"";
 }
 return returned;
 }",1
1748,"public static int [] MaxNumber (String [] arr) {
 int [] Number_arr = new int [11];
 int count = 1;
 int j = 0;
 int k = 0;
 for (int i = 0;
 i < arr.length - 1; i ++) {
 if (arr [i].equals (arr [i + 1])) count ++;
 else {
 Number_arr [j] = count;
 j ++;
 count = 1;
 }
 }
 Number_arr [j] = count;
 for (int i = 0;
 i < Number_arr.length; i ++) {
 System.out.print (Number_arr [i] + ""  "");
 }
 return Number_arr;
 }","static private void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 for (File file : src.listFiles ()) {
 File fileDest = new File (dest, file.getName ());
 if (file.isDirectory ()) {
 copyFolder (file, fileDest);
 } else {
 if (fileDest.exists ()) continue;
 try {
 Files.copy (file.toPath (), fileDest.toPath ());
 } catch (IOException e) {
 }
 }
 }
 }",0
1098,"private static void merge (int [] a, int [] b, int [] all) {
 int i = 0, j = 0, k = 0;
 while (i < a.length && j < b.length) {
 if (a [i] < b [j]) {
 all [k] = a [i];
 i ++;
 } else {
 all [k] = b [j];
 j ++;
 }
 k ++;
 }
 while (i < a.length) {
 all [k ++] = a [i ++];
 }
 while (j < b.length) {
 all [k ++] = b [j ++];
 }
 }","public Object next () throws NoSuchElementException {
 formNextPermutation ();
 int i = size - 1;
 while (permutation [i] > permutation [i + 1]) i --;
 if (i == 0) {
 next = false;
 for (int j = 0;
 j < size + 1; j ++) {
 permutation [j] = j;
 }
 return ar;
 }
 int j = size;
 while (permutation [i] > permutation [j]) j --;
 swap (i, j);
 int r = size;
 int s = i + 1;
 while (r > s) {
 swap (r, s);
 r --;
 s ++;
 }
 return ar;
 }",0
560,"static boolean isAnagram (String a, String b) {
 a = a.toLowerCase ();
 b = b.toLowerCase ();
 if (a.length () != b.length ()) {
 return false;
 }
 char [] chars = a.toCharArray ();
 for (char c : chars) {
 int index = b.indexOf (c);
 if (index != - 1) {
 b = b.substring (0, index) + b.substring (index + 1, b.length ());
 } else {
 return false;
 }
 }
 return b.isEmpty ();
 }","public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) {
 return false;
 }
 s1 = s1.toLowerCase ();
 s2 = s2.toLowerCase ();
 char [] c1 = s1.toCharArray ();
 char [] c2 = s2.toCharArray ();
 Arrays.sort (c1);
 Arrays.sort (c2);
 String sc1 = new String (c1);
 String sc2 = new String (c2);
 return sc1.equals (sc2);
 }",1
772,"public static void main (String args []) {
 System.out.println (""Enter the date(dd/mm/yyyy):"");
 Scanner scan = new Scanner (System.in);
 String Date = scan.nextLine ();
 try {
 boolean dateValid = dateValidate (Date);
 if (dateValid == true) {
 SimpleDateFormat df = new SimpleDateFormat (""dd/MM/yy"");
 java.util.Date date = df.parse (Date);
 df.applyPattern (""EEE"");
 String day = df.format (date);
 if (day.compareTo (""Sat"") == 0 || day.compareTo (""Sun"") == 0) {
 System.out.println (day + "": Weekend"");
 } else {
 System.out.println (day + "": Weekday"");
 }
 } else {
 System.out.println (""Invalid Date!!!"");
 }
 } catch (Exception e) {
 System.out.println (""Invalid Date Formats!!!"");
 }
 }","public static void main (String [] args) throws ParseException {
 String month = ""08"";
 String day = ""05"";
 String year = ""2015"";
 String inputDateStr = String.format (""%s/%s/%s"", day, month, year);
 Date inputDate = new SimpleDateFormat (""dd/MM/yyyy"").parse (inputDateStr);
 Calendar calendar = Calendar.getInstance ();
 calendar.setTime (inputDate);
 String dayOfWeek = calendar.getDisplayName (Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.US).toUpperCase ();
 System.out.println (dayOfWeek);
 }",1
1458,"public static void main (String [] args) {
 JFrame main = new JFrame ();
 JPanel p = new JPanel ();
 p.setLayout (new BorderLayout ());
 p.add (new JLabel (""test""), BorderLayout.WEST);
 p.add (new JTextField (""growable""), BorderLayout.CENTER);
 p.add (new JComboBox (), BorderLayout.EAST);
 main.add (p);
 main.pack ();
 main.setVisible (true);
 }","public static void main (String [] args) throws InterruptedException {
 MyThread mt = new MyThread ();
 mt.hello = hello;
 mt.world = world;
 mt.start ();
 for (int i = 0;
 i < 5; i ++) {
 hello.acquire ();
 System.out.println (""Hello"");
 world.release ();
 }
 }",0
368,"public void actionPerformed (ActionEvent e) {
 timer.stop ();
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 pastRemWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 pastRemWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }","public void actionPerformed (ActionEvent e) {
 if (runProcess) {
 for (Window win : Window.getWindows ()) {
 if (win instanceof JDialog) {
 System.out.println (""    Trying to Remove JDialog"");
 win.dispose ();
 }
 }
 System.out.println (""    Remove Cycle Done :-)"");
 runProcess = false;
 new Thread () {
 @Override
 public void run () {
 try {
 Thread.sleep (100);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 Runtime.getRuntime ().gc ();
 }}
 .start ();
 } else {
 pastRemWins ();
 runProcess = true;
 }
 }",1
103,"public static void main (String args []) {
 String [] arr = {""foo:1,2,3"", ""bar:a,b"", ""baz:5,6,7""};
 CartesianProductLHM cp = new CartesianProductLHM (arr);
 List < List < String > > lls = cp.allUniqueCombinations ();
 for (List < String > ls : lls) {
 for (String s : ls) System.out.print (s + ""\t"");
 System.out.println ();
 }
 }","public static void main (String [] args) {
 LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
 data.put (""foo"", new Vector < String > (Arrays.asList (""1"", ""2"", ""3"")));
 data.put (""bar"", new Vector < String > (Arrays.asList (""3"", ""2"")));
 data.put (""baz"", new Vector < String > (Arrays.asList (""5"", ""6"", ""7"")));
 Foo foo = new Foo (data);
 for (String [] combination : foo.allUniqueCombinations ()) {
 System.out.println (Arrays.toString (combination));
 }
 }",1
743,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","private void transform (HSSFRow rowOld, XSSFRow rowNew) {
 XSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 if (rowOld.getRowStyle () != null) {
 Integer hash = rowOld.getRowStyle ().hashCode ();
 if (! this.styleMap.containsKey (hash)) this.transform (hash, rowOld.getRowStyle (), this.workbookNew.createCellStyle ());
 rowNew.setRowStyle (this.styleMap.get (hash));
 }
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform ((HSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",1
1043,"public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }","public static void main (String [] args) {
 int n = 15;
 int [] [] pascal = new int [n + 1] [];
 pascal [1] = new int [1 + 2];
 pascal [1] [1] = 1;
 for (int i = 2;
 i <= n; i ++) {
 pascal [i] = new int [i + 2];
 for (int j = 1;
 j < pascal [i].length - 1; j ++) pascal [i] [j] = pascal [i - 1] [j - 1] + pascal [i - 1] [j];
 }
 for (int i = 1;
 i <= n; i ++) {
 for (int j = 1;
 j < pascal [i].length - 1; j ++) {
 System.out.print (pascal [i] [j] + "" "");
 }
 System.out.println ();
 }
 }",0
1630,"public static String interleave (String you, String me) {
 StringBuilder result = new StringBuilder ();
 for (int i = 0;
 i < Math.max (you.length (), me.length ()); i ++) {
 if (i < you.length ()) {
 result.append (you.charAt (i));
 }
 if (i < me.length ()) {
 result.append (me.charAt (i));
 }
 }
 return result.toString ();
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! highName.isEmpty ()) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! lowName.isEmpty ()) {
 buffer.append (SEPARATOR);
 }
 }
 if (! lowName.isEmpty ()) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }",0
506,"public void run () {
 try {
 String line = null;
 BufferedReader in = new BufferedReader (new InputStreamReader (inStream));
 while ((line = in.readLine ()) != null) {
 println (line);
 }
 } catch (Exception e) {
 e.printStackTrace ();
 }
 System.out.println (""Exit reading process output"");
 }","public void run () {
 try {
 int retValue = pro.waitFor ();
 println (""Command exit with return value "" + retValue);
 outStream.close ();
 outStream = null;
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (IOException e) {
 e.printStackTrace ();
 }
 }",1
370,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","private void transform () {
 String call = ""transform "";
 System.out.println (call + ""Workbook"");
 XSSFSheet sheetNew;
 HSSFSheet sheetOld;
 this.workbookNew.setForceFormulaRecalculation (this.workbookOld.getForceFormulaRecalculation ());
 this.workbookNew.setMissingCellPolicy (this.workbookOld.getMissingCellPolicy ());
 for (int i = 0;
 i < this.workbookOld.getNumberOfSheets (); i ++) {
 sheetOld = this.workbookOld.getSheetAt (i);
 sheetNew = this.workbookNew.getSheet (sheetOld.getSheetName ());
 System.out.println (call + ""Sheet erstellt: "" + sheetOld.getSheetName ());
 sheetNew = this.workbookNew.createSheet (sheetOld.getSheetName ());
 this.transform (sheetOld, sheetNew);
 }
 System.out.println (call + ""Anzahl verwendeter Styles: "" + this.styleMap.size ());
 System.out.println (call + ""abgeschlossen"");
 }",1
1987,"public int solution (int X, int [] A) {
 int size = A.length;
 int [] check = new int [X];
 int cmp = 0;
 int time = - 1;
 for (int x = 0;
 x < size; x ++) {
 int temp = A [x];
 if (temp <= X) {
 if (check [temp - 1] > 0) {
 continue;
 }
 check [temp - 1] ++;
 cmp ++;
 }
 if (cmp == X) {
 time = x;
 break;
 }
 }
 return time;
 }","public void insertNodeAfter (E nVal, E curVal) {
 Node < E > prev = findPrevOf (curVal);
 Node < E > curr = null;
 if (prev == null) {
 curr = head;
 } else {
 curr = prev.getNext ();
 }
 Node < E > newNode = new Node < E > (nVal);
 insert (curr, (curr == null ? curr : curr.getNext ()), newNode);
 }",0
574,"public static String toHexString (byte [] bytes) {
 char [] hexArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
 char [] hexChars = new char [bytes.length * 2];
 int v;
 for (int j = 0;
 j < bytes.length; j ++) {
 v = bytes [j] & 0xFF;
 hexChars [j * 2] = hexArray [v / 16];
 hexChars [j * 2 + 1] = hexArray [v % 16];
 }
 return new String (hexChars);
 }","public static String toHexString (byte bytes []) {
 if (bytes == null) {
 return null;
 }
 StringBuffer sb = new StringBuffer ();
 for (int iter = 0;
 iter < bytes.length; iter ++) {
 byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
 byte low = (byte) (bytes [iter] & 0x0f);
 sb.append (nibble2char (high));
 sb.append (nibble2char (low));
 }
 return sb.toString ();
 }",1
1288,"public static void main (String [] args) throws IOException {
 Process p = Runtime.getRuntime ().exec (XVFB_COMMAND);
 FirefoxBinary firefox = new FirefoxBinary ();
 firefox.setEnvironmentProperty (""DISPLAY"", "":"" + DISPLAY_NUMBER);
 WebDriver driver = new FirefoxDriver (firefox, null);
 driver.get (URL);
 File scrFile = ((TakesScreenshot) driver).getScreenshotAs (OutputType.FILE);
 FileUtils.copyFile (scrFile, new File (RESULT_FILENAME));
 driver.close ();
 p.destroy ();
 }","public void run () {
 try {
 Thread t = new Thread (new Lock ());
 t.start ();
 t.join ();
 } catch (InterruptedException ex) {
 System.out.println (""won't see me"");
 }
 }",0
1659,"public static void main (String [] args) {
 int arr [];
 Scanner scan = new Scanner (System.in);
 for (int i = 0;
 i < 5; i ++) {
 System.out.print (""Enter number "" + (i + 1) + "": "");
 arr [i] = scan.nextInt ();
 }
 for (int i = 0;
 i < 5; i ++) System.out.println (""Number "" + (i + 1) + "": "" + arr [i]);
 }","public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Time (s)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 drawRotate (gg, getWidth (), (getHeight () + width) / 2, 270, string);
 }",0
1663,"public void onRequestPermissionsResult (int requestCode,@NonNull
 String [] permissions,@NonNull
 int [] grantResults) {
 if (requestCode == mRequestCode) {
 if (grantResults.length > 0) {
 for (int grantResult : grantResults) {
 if (grantResult != PackageManager.PERMISSION_GRANTED) {
 mRequestPermissionListener.onFailed ();
 return;
 }
 }
 mRequestPermissionListener.onSuccess ();
 } else {
 mRequestPermissionListener.onFailed ();
 }
 }
 }","public static void main (String [] args) {
 for (int row = 1;
 row <= 7; row += 2) {
 for (int space = 7;
 space >= row; space -= 2) {
 System.out.print (""*"");
 }
 for (int i = 1;
 i <= row; i ++) {
 System.out.print ("" "");
 }
 System.out.print (""\n"");
 }
 for (int row = 5;
 row >= 1; row -= 2) {
 for (int space = 7;
 space >= row; space -= 2) {
 System.out.print (""*"");
 }
 for (int i = 1;
 i <= row; i ++) {
 System.out.print ("" "");
 }
 System.out.print (""\n"");
 }
 }",0
508,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Time (s)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 drawRotate (gg, getWidth (), (getHeight () + width) / 2, 270, string);
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2 = (Graphics2D) g;
 g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 double xScale = ((double) getWidth () - (2 * padding) - labelPadding) / (scores.size () - 1);
 double yScale = ((double) getHeight () - 2 * padding - labelPadding) / (getMaxScore () - getMinScore ());
 List < Point > graphPoints = new ArrayList < > ();
 for (int i = 0;
 i < scores.size (); i ++) {
 int x1 = (int) (i * xScale + padding + labelPadding);
 int y1 = (int) ((getMaxScore () - scores.get (i)) * yScale + padding);
 graphPoints.add (new Point (x1, y1));
 }
 g2.setColor (Color.WHITE);
 g2.fillRect (padding + labelPadding, padding, getWidth () - (2 * padding) - labelPadding, getHeight () - 2 * padding - labelPadding);
 g2.setColor (Color.BLACK);
 for (int i = 0;
 i < numberYDivisions + 1; i ++) {
 int x0 = padding + labelPadding;
 int x1 = pointWidth + padding + labelPadding;
 int y0 = getHeight () - ((i * (getHeight () - padding * 2 - labelPadding)) / numberYDivisions + padding + labelPadding);
 int y1 = y0;
 if (scores.size () > 0) {
 g2.setColor (gridColor);
 g2.drawLine (padding + labelPadding + 1 + pointWidth, y0, getWidth () - padding, y1);
 g2.setColor (Color.BLACK);
 String yLabel = ((int) ((getMinScore () + (getMaxScore () - getMinScore ()) * ((i * 1.0) / numberYDivisions)) * 100)) / 100.0 + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (yLabel);
 g2.drawString (yLabel, x0 - labelWidth - 5, y0 + (metrics.getHeight () / 2) - 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 for (int i = 0;
 i < scores.size (); i ++) {
 if (scores.size () > 1) {
 int x0 = i * (getWidth () - padding * 2 - labelPadding) / (scores.size () - 1) + padding + labelPadding;
 int x1 = x0;
 int y0 = getHeight () - padding - labelPadding;
 int y1 = y0 - pointWidth;
 if ((i % ((int) ((scores.size () / 20.0)) + 1)) == 0) {
 g2.setColor (gridColor);
 g2.drawLine (x0, getHeight () - padding - labelPadding - 1 - pointWidth, x1, padding);
 g2.setColor (Color.BLACK);
 String xLabel = i + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (xLabel);
 g2.drawString (xLabel, x0 - labelWidth / 2, y0 + metrics.getHeight () + 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 }
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, padding + labelPadding, padding);
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, getWidth () - padding, getHeight () - padding - labelPadding);
 Stroke oldStroke = g2.getStroke ();
 g2.setColor (lineColor);
 g2.setStroke (GRAPH_STROKE);
 for (int i = 0;
 i < graphPoints.size () - 1; i ++) {
 int x1 = graphPoints.get (i).x;
 int y1 = graphPoints.get (i).y;
 int x2 = graphPoints.get (i + 1).x;
 int y2 = graphPoints.get (i + 1).y;
 g2.drawLine (x1, y1, x2, y2);
 }
 g2.setStroke (oldStroke);
 g2.setColor (pointColor);
 for (int i = 0;
 i < graphPoints.size (); i ++) {
 int x = graphPoints.get (i).x - pointWidth / 2;
 int y = graphPoints.get (i).y - pointWidth / 2;
 int ovalW = pointWidth;
 int ovalH = pointWidth;
 g2.fillOval (x, y, ovalW, ovalH);
 }
 }",1
758,"public static final int solution (final int X, final int [] A) {
 if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
 throw new RuntimeException (""Array size out of bounds"");
 }
 Set set = new Set (X);
 int ai;
 int counter = X;
 final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
 for (int i = 0;
 i < A.length; i ++) {
 if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
 throw new RuntimeException (""Number out of bounds"");
 } else if (ai <= X && ! set.contains (ai)) {
 counter --;
 if (counter == 0) {
 return i;
 }
 set.put (ai);
 }
 }
 return - 1;
 }","public static int solution (int X, int [] A) {
 int [] counter = new int [X + 1];
 int ans = - 1;
 int x = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (counter [A [i]] == 0) {
 counter [A [i]] = A [i];
 x += 1;
 if (x == X) {
 return i;
 }
 }
 }
 return ans;
 }",1
1534,"public static void main (String [] args) throws Exception {
 XMLInputFactory xif = XMLInputFactory.newFactory ();
 StreamSource xml = new StreamSource (""src/forum14326598/input.xml"");
 XMLStreamReader xsr = xif.createXMLStreamReader (xml);
 xsr = xif.createFilteredReader (xsr, new StreamFilter () {
 private boolean accept = true;
 @Override
 public boolean accept (XMLStreamReader reader) {
 if ((reader.isStartElement () || reader.isEndElement ()) && ""dad"".equals (reader.getLocalName ())) {
 accept = ! accept;
 return false;
 } else {
 return accept;
 }
 }}
 );
 while (xsr.hasNext ()) {
 if (xsr.isStartElement ()) {
 System.out.println (""start: "" + xsr.getLocalName ());
 } else if (xsr.isCharacters ()) {
 if (xsr.getText ().trim ().length () > 0) {
 System.out.println (""chars: "" + xsr.getText ());
 }
 } else if (xsr.isEndElement ()) {
 System.out.println (""end: "" + xsr.getLocalName ());
 }
 xsr.next ();
 }
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",0
1997,"public static void main (String [] args) {
 final Scanner input = new Scanner (System.in);
 String inString;
 while (true) {
 System.out.println (""Enter a binary number: "");
 inString = input.nextLine ();
 if (inString.equals (""-1"")) break;
 System.out.println (Integer.parseInt (inString, 2));
 }
 System.out.println (""All set !"");
 }","private static int pow (int x, int n) {
 if (n == 0) return 1;
 if (n == 1) return x;
 if (n < 0) {
 if (x == 1 || (x == 2 && n == - 1)) return 1;
 else return 0;
 }
 if ((n & 1) == 0) {
 long num = pow (x * x, n / 2);
 if (num > Integer.MAX_VALUE) return Integer.MAX_VALUE;
 return (int) num;
 } else {
 long num = x * pow (x * x, n / 2);
 if (num > Integer.MAX_VALUE) return Integer.MAX_VALUE;
 return (int) num;
 }
 }",0
1418,"public static final int solution (final int X, final int [] A) {
 if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
 throw new RuntimeException (""Array size out of bounds"");
 }
 Set set = new Set (X);
 int ai;
 int counter = X;
 final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
 for (int i = 0;
 i < A.length; i ++) {
 if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
 throw new RuntimeException (""Number out of bounds"");
 } else if (ai <= X && ! set.contains (ai)) {
 counter --;
 if (counter == 0) {
 return i;
 }
 set.put (ai);
 }
 }
 return - 1;
 }","public int [] zeroFront (int [] nums) {
 Stack stack = new Stack ();
 int [] nums2 = new int [nums.length];
 for (int i = 0;
 i < nums.length; i ++) {
 if (nums [i] != 0) {
 stack.push (nums [i]);
 }
 }
 for (int i = 0;
 i < nums.length; i ++) {
 if (nums [i] == 0) {
 stack.push (nums [i]);
 }
 }
 for (int i = 0;
 i < nums.length; i ++) {
 nums2 [i] = (Integer) stack.pop ();
 }
 return nums2;
 }",0
1164,"public void switchPairs () {
 ListNode prev = front;
 if (front != null && front.next != null) {
 ListNode temp = front;
 front = front.next;
 temp.next = front.next;
 front.next = temp;
 prev = temp;
 }
 while (prev != null && prev.next != null && prev.next.next != null) {
 ListNode first_node = prev.next;
 ListNode second_node = first_node.next;
 first_node.next = second_node.next;
 second_node.next = first_node;
 prev.next = second_node;
 prev = first_node;
 }
 }","public int solution (int N) {
 String binary = Integer.toString (N, 2);
 int largestGap = 0;
 for (int i = 1, gap = 0;
 i < binary.length (); i ++) {
 while (i < binary.length () && binary.charAt (i) == '0') {
 i ++;
 gap ++;
 }
 if (gap > largestGap && i < binary.length ()) {
 largestGap = gap;
 }
 gap = 0;
 }
 return largestGap;
 }",0
1601,"public static void main (String [] args) throws Exception {
 AuthMethod auth = new TokenAuthMethod (API_KEY, API_SECRET);
 NexmoClient client = new NexmoClient (auth);
 TextMessage message = new TextMessage (FROM_NUMBER, TO_NUMBER, ""Hello from Nexmo!"");
 SmsSubmissionResult [] responses = client.getSmsClient ().submitMessage (message);
 for (SmsSubmissionResult response : responses) {
 System.out.println (response);
 }
 }","private static void drawTable (PDPage page, PDPageContentStream contentStream) {
 try {
 float y = 650;
 float margin = 130;
 String [] content = {""One"", ""Two"", ""Date"", ""Score"", ""Score2"", ""Score3"", ""Score4"", ""Score5"", ""Score6""};
 final int rows = content.length;
 final int cols = 2;
 final float rowHeight = 22f;
 final float tableWidth = 900.0f;
 final float tableHeight = rowHeight * rows;
 final float cellMargin = 1f;
 float nexty = y;
 for (int i = 0;
 i <= rows; i ++) {
 contentStream.drawLine (margin, nexty, 400, nexty);
 nexty -= rowHeight;
 }
 float colWidthX [] = {200, 70, 0};
 float nextx = margin;
 for (int i = 0;
 i <= cols; i ++) {
 contentStream.drawLine (nextx, y, nextx, y - tableHeight);
 nextx += colWidthX [i];
 }
 float textx = margin + cellMargin;
 float texty = y - 15;
 for (int j = 0;
 j < rows; j ++) {
 contentStream.beginText ();
 contentStream.moveTextPositionByAmount (textx, texty);
 contentStream.drawString (content [j]);
 contentStream.endText ();
 textx += colWidthX [0] + 9;
 contentStream.beginText ();
 contentStream.moveTextPositionByAmount (textx, texty);
 if (j == 0) contentStream.drawString (""1"");
 if (j == 1) contentStream.drawString (""12345"");
 if (j == 2) contentStream.drawString (""05-December-2003"");
 if (j == 3) contentStream.drawString (""15"");
 if (j == 4) contentStream.drawString (""1"");
 if (j == 5) contentStream.drawString (""1"");
 if (j == 6) contentStream.drawString (""1"");
 if (j == 7) contentStream.drawString (""1"");
 if (j == 8) contentStream.drawString (""1"");
 contentStream.endText ();
 textx = margin + cellMargin;
 texty -= rowHeight;
 }
 texty -= rowHeight;
 textx = margin + cellMargin;
 } catch (IOException ioe) {
 final String errormsg = ""Could not drawTable "";
 throw new RuntimeException (errormsg, ioe);
 } catch (Exception ex) {
 final String errormsg = ""Could not drawTable "";
 throw new RuntimeException (errormsg, ex);
 }
 }",0
864,"int pow (int a, int p) {
 int res = 1;
 int i1 = 31 - Integer.numberOfLeadingZeros (p);
 for (int i = i1;
 i >= 0; -- i) {
 res *= res;
 if ((p & (1 << i)) > 0) res *= a;
 }
 return res;
 }","long pow (long a, int b) {
 if (b == 0) return 1;
 if (b == 1) return a;
 if (isEven (b)) return pow (a * a, b / 2);
 else return a * pow (a * a, b / 2);
 }",1
924,"public static void main (String [] args) {
 Integer [] arr = new Integer [1000];
 for (int i = 0;
 i < arr.length; i ++) {
 arr [i] = i;
 }
 Collections.shuffle (Arrays.asList (arr));
 System.out.println (Arrays.toString (arr));
 }","public static void main (String [] args) {
 int [] nums = new int [N];
 for (int i = 0;
 i < nums.length; ++ i) {
 nums [i] = i;
 }
 Random randomGenerator = new Random ();
 int randomIndex;
 int randomValue;
 for (int i = 0;
 i < nums.length; ++ i) {
 randomIndex = randomGenerator.nextInt (nums.length);
 randomValue = nums [randomIndex];
 nums [randomIndex] = nums [i];
 nums [i] = randomValue;
 }
 }",1
547,"public void actionPerformed (ActionEvent arg0) {
 int result = JOptionPane.OK_OPTION;
 if (dirty) {
 result = JOptionPane.showConfirmDialog (gui, ""Erase the current painting?"");
 }
 if (result == JOptionPane.OK_OPTION) {
 clear (canvasImage);
 }
 }","public void actionPerformed (ActionEvent e) {
 int x = (int) (Math.random () * getWidth ());
 int y = (int) (Math.random () * getHeight ());
 int width = (int) (Math.random () * (getWidth () / 4));
 int height = (int) (Math.random () * (getHeight () / 4));
 if (x + width > getWidth ()) {
 x = getWidth () - width;
 }
 if (y + height > getHeight ()) {
 y = getHeight () - height;
 }
 Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
 lstShapes.add (new MyRectangle (x, y, width, height, color));
 repaint ();
 }",1
56,"public boolean equals (Object obj) {
 if (this == obj) return true;
 if (obj == null) return false;
 if (getClass () != obj.getClass ()) return false;
 @SuppressWarnings (""unchecked"")
 final CircularList < T > other = (CircularList < T >) obj;
 if (other.length != this.length) {
 return false;
 }
 Element < T > current = this.first;
 Element < T > otherCurrent = other.first;
 int offset = 0;
 boolean found = false;
 do {
 found = checkSequence (current, otherCurrent);
 if (! found) {
 offset ++;
 otherCurrent = otherCurrent.next;
 }
 } while (! found && offset < length);
 return found;
 }","public boolean equals (Object object) {
 if (this == object) {
 return true;
 }
 if (object == null) {
 return false;
 }
 if (! (object instanceof CircularList < ? >)) {
 return false;
 }
 CircularList < ? > that = (CircularList < ? >) object;
 Element < ? > first0 = first;
 Element < ? > current0 = first0;
 Element < ? > first1 = that.first;
 Element < ? > current1 = first1;
 while (true) {
 if (equalSequence (current0, current0, current1, current1)) {
 return true;
 }
 current1 = current1.next;
 if (current1 == first1) {
 return false;
 }
 }
 }",1
1978,"public void run () {
 System.out.println (i);
 try {
 cb.await ();
 i = i + 3;
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 }","public static final void main (String...aArgs) {
 log (""Generating random integers in the range 1..10."");
 int START = 1;
 int END = 10;
 Random random = new Random ();
 for (int idx = 1;
 idx <= 10; ++ idx) {
 showRandomInteger (START, END, random);
 }
 log (""Done."");
 }",0
1779,"public void inOrder () {
 if (m_root == null) {
 return;
 }
 Stack < BSTNode > myStack = new Stack < BSTNode > ();
 BSTNode current = m_root;
 while (current != null) {
 myStack.push (current);
 current = current.getLeft ();
 }
 while (! myStack.isEmpty ()) {
 current = (BSTNode) myStack.pop ();
 System.out.print (current.getInfo () + "" "");
 if (current.getRight () != null) {
 current = current.getRight ();
 while (current != null) {
 myStack.push (current);
 current = current.getLeft ();
 }
 }
 }
 }","private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, Integer hash, HSSFCellStyle styleOld, XSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (workbookOld, workbookNew, styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (workbookNew, styleOld.getFont (workbookOld)));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }",0
1999,"public static String startOz (String str) {
 if (str.length () >= 2 && str.substring (0, 2).equals (""oz"")) {
 return ""oz"";
 } else if (str.length () >= 2 && str.substring (1, 2).equals (""z"")) {
 return ""z"";
 } else if (str.length () >= 2 && str.substring (0, 1).equals (""o"")) {
 return ""o"";
 }
 return """";
 }","public static void shuffle (int [] array) {
 if (random == null) random = new Random ();
 int count = array.length;
 for (int i = count;
 i > 1; i --) {
 swap (array, i - 1, random.nextInt (i));
 }
 }",0
88,"public static void main (String [] args) {
 int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
 int [] B = new int [A.length];
 int [] C = new int [A.length];
 int t = 4;
 int countb = 0;
 int countc = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= t) {
 B [countb ++] = A [i];
 } else {
 C [countc ++] = A [i];
 }
 }
 System.out.println (Arrays.toString (B));
 System.out.println (Arrays.toString (C));
 }","public static void main (String [] args) {
 int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
 int t = 4;
 int count = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= t) {
 count ++;
 }
 }
 int [] B = new int [count];
 int [] C = new int [A.length - count];
 for (int i = 0, j = 0, k = 0;
 i < A.length; i ++) {
 if (A [i] <= t) {
 B [j] = A [i];
 System.out.println (""B = "" + B [j]);
 j ++;
 } else {
 C [k] = A [i];
 System.out.println (""C = "" + C [k]);
 k ++;
 }
 }
 }",1
787,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int number;
 if ("""".equals (value)) {
 number = 0;
 } else if (value.length () > 4) {
 number = Integer.valueOf (value.substring (value.length () - 4), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 1000;
 if (number >= 100) {
 buffer.append (unitProcessor.getName (number / 100));
 buffer.append (SEPARATOR);
 buffer.append (SCALE.getName (EXPONENT));
 }
 String tensName = tensProcessor.getName (number % 100);
 if (! """".equals (tensName) && (number >= 100)) {
 buffer.append (SEPARATOR);
 }
 buffer.append (tensName);
 return buffer.toString ();
 }",1
1777,"public static void main (String [] args) {
 String string = ""aaabbbbbaccc"";
 int counter;
 String result = """";
 int i = 0;
 while (i < string.length ()) {
 counter = 1;
 for (int j = i + 1;
 j < string.length (); j ++) {
 System.out.println (""string length ="" + string.length ());
 if (string.charAt (i) == string.charAt (j)) {
 counter ++;
 }
 }
 result = result + string.charAt (i) + counter;
 string = string.replaceAll (String.valueOf (string.charAt (i)), """");
 }
 System.out.println (""result is = "" + result);
 }","public synchronized void run () {
 int i = 3;
 while (i < 50) {
 while (s.getState () != 2) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 2) System.out.println (""t3 "" + i);
 i = i + 3;
 s.setState (3);
 s.notifyAll ();
 }
 }
 }",0
516,"public static void main (String [] args) {
 EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 MigLayoutGaps2 ex = new MigLayoutGaps2 ();
 ex.setVisible (true);
 }}
 );
 }","public static void main (String [] args) {
 Runnable r = new Runnable () {
 @Override
 public void run () {
 WhiteSpace ws = new WhiteSpace ();
 Container gui = ws.getGui ();
 JFrame f = new JFrame (""White (OK Red) Space"");
 f.add (gui);
 f.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
 f.setLocationByPlatform (true);
 f.setResizable (false);
 f.pack ();
 f.setVisible (true);
 }}
 ;
 SwingUtilities.invokeLater (r);
 }",1
962,"public boolean equals (Object obj) {
 if (obj == null) {
 return false;
 }
 if (! Person.class.isAssignableFrom (obj.getClass ())) {
 return false;
 }
 final Person other = (Person) obj;
 if ((this.name == null) ? (other.name != null) : ! this.name.equals (other.name)) {
 return false;
 }
 if (this.age != other.age) {
 return false;
 }
 return true;
 }","public boolean equals (Object other) {
 boolean result;
 if ((other == null) || (getClass () != other.getClass ())) {
 result = false;
 } else {
 People otherPeople = (People) other;
 result = name.equals (otherPeople.name) && age == otherPeople.age;
 }
 return result;
 }",1
568,"public static void main (String args []) {
 String s = ""1234"";
 int len = s.length ();
 int num = Integer.parseInt (s);
 int mod;
 int od = 0, even = 0;
 for (int i = 0;
 i < len; i ++) {
 mod = num % 10;
 num = num / 10;
 if (mod % 2 == 0) {
 even = even + mod;
 } else {
 od = od + mod;
 }
 }
 System.out.println (""Sum of even numbers is "" + even);
 System.out.println (""Sum of odd numbers is "" + od);
 }","public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 String number = """";
 int a = 0, total = 0;
 boolean even = false;
 System.out.println (""Enter a number"");
 number = input.nextLine ();
 for (int counter = 0;
 counter < number.length (); counter ++) {
 a = Integer.parseInt (number.substring (counter, counter + 1));
 if (a % 2 != 0 || a == 1) {
 even = false;
 total += a;
 }
 }
 System.out.println (""The sum is "" + total);
 }",1
320,"public void run () {
 final int [] orgSize = new int [1];
 final int [] currentSize = new int [1];
 final Object lock = new Object ();
 if (display.isDisposed () || bar.isDisposed ()) {
 return;
 }
 display.syncExec (new Runnable () {
 public void run () {
 if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
 return;
 }
 synchronized (lock) {
 bar.getShell ().pack (true);
 orgSize [0] = bar.getShell ().getSize ().y;
 currentSize [0] = orgSize [0];
 }
 }}
 );
 while (currentSize [0] == orgSize [0]) {
 if (display.isDisposed () || bar.isDisposed ()) {
 return;
 }
 display.syncExec (new Runnable () {
 public void run () {
 synchronized (lock) {
 if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
 return;
 }
 currentSize [0] = bar.getShell ().getSize ().y;
 if (currentSize [0] != orgSize [0]) {
 return;
 } else {
 bar.getShell ().layout (true);
 bar.getShell ().pack (true);
 }
 }
 }}
 );
 }
 }","public void run () {
 if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
 return;
 }
 synchronized (lock) {
 bar.getShell ().pack (true);
 orgSize [0] = bar.getShell ().getSize ().y;
 currentSize [0] = orgSize [0];
 }
 }",1
414,"private static boolean isBetween (int currentMonth, int currentDay, int monthFrom, int dayFrom, int monthUntil, int dayUntil) {
 int currentYear = 2000;
 LocalDate dateFrom = LocalDate.of (currentYear, monthFrom, dayFrom);
 LocalDate dateUntil = LocalDate.of (currentYear, monthUntil, dayUntil);
 if (dateFrom.isAfter (dateUntil)) {
 dateUntil = dateUntil.plusYears (1);
 }
 LocalDate currentDateThisYear = LocalDate.of (currentYear, currentMonth, currentDay);
 LocalDate currentDateNextYear = currentDateThisYear.plusYears (1);
 if (! (currentDateThisYear.isBefore (dateFrom) || currentDateThisYear.isAfter (dateUntil))) {
 return true;
 } else if (! (currentDateNextYear.isBefore (dateFrom) || currentDateNextYear.isAfter (dateUntil))) {
 return true;
 }
 return false;
 }","public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
 MonthDay current = MonthDay.of (currentMonth, currentDay);
 MonthDay from = MonthDay.of (fromMonth, fromDay);
 MonthDay until = MonthDay.of (untilMonth, untilDay);
 if (from.compareTo (until) <= 0) {
 return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
 } else {
 return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
 }
 }",1
113,"public static void main (String [] args) {
 String str = ""abcdabghplhhnfl"".toLowerCase ();
 Integer [] ar = new Integer [26];
 for (int i = 0;
 i < str.length (); i ++) {
 int j = str.charAt (i) - 'a';
 if (ar [j] == null) {
 ar [j] = 1;
 } else {
 ar [j] += 1;
 }
 }
 for (int i = 0;
 i < ar.length; i ++) {
 if (ar [i] != null && ar [i] > 1) {
 char c = (char) (97 + i);
 System.out.println (""'"" + c + ""' comes "" + ar [i] + "" times."");
 }
 }
 }","public static void main (String [] args) throws IOException {
 String ch;
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Enter the Statement:"");
 ch = br.readLine ();
 int count = 0, len = 0;
 do {
 try {
 char name [] = ch.toCharArray ();
 len = name.length;
 count = 0;
 for (int j = 0;
 j < len; j ++) {
 if ((name [0] == name [j]) && ((name [0] >= 65 && name [0] <= 91) || (name [0] >= 97 && name [0] <= 123))) count ++;
 }
 if (count != 0) System.out.println (name [0] + "" "" + count + "" Times"");
 ch = ch.replace ("""" + name [0], """");
 } catch (Exception ex) {
 }
 } while (len != 1);
 }",1
817,"public static void main (String [] args) {
 String s = ""aaaabbccccdddeee"";
 String s1 = """";
 String s2 = """";
 int count = 0;
 for (int i = 0;
 i < s.length (); i ++) {
 if (s1.indexOf (s.charAt (i)) < 0) {
 s1 = s1 + s.charAt (i);
 }
 }
 for (int i = 0;
 i < s1.length (); i ++) {
 for (int j = 0;
 j < s.length (); j ++) {
 if (s1.charAt (i) == s.charAt (j)) {
 count ++;
 }
 }
 s2 = s2 + s1.charAt (i) + count;
 count = 0;
 }
 System.out.println (s2);
 }","public static void main (String [] args) {
 String output = """";
 Multiset < String > wordsMultiset = HashMultiset.create ();
 String [] words = ""AAABBBBCC"".split ("""");
 wordsMultiset.addAll (Arrays.asList (words));
 for (Entry < String > string : wordsMultiset.entrySet ()) {
 if (! string.getElement ().isEmpty ()) output += string.getCount () + """" + string.getElement ();
 }
 System.out.println (output);
 }",1
711,"public static int loneSum (int a, int b, int c) {
 if (a == b && b == c) {
 a = 0;
 b = 0;
 c = 0;
 }
 if (a == b) {
 a = 0;
 b = 0;
 }
 if (a == c) {
 a = 0;
 c = 0;
 }
 if (b == c) {
 b = 0;
 c = 0;
 }
 return a + b + c;
 }","public int loneSum (int a, int b, int c) {
 int sum = 0;
 boolean ab = a != b;
 boolean ac = a != c;
 boolean bc = b != c;
 if (ab && ac) sum += a;
 if (ab && bc) sum += b;
 if (bc && ac) sum += c;
 return sum;
 }",1
236,"public static final String deriveCurveName (org.bouncycastle.jce.spec.ECParameterSpec ecParameterSpec) throws GeneralSecurityException {
 for (@SuppressWarnings (""rawtypes"")
 Enumeration names = ECNamedCurveTable.getNames ();
 names.hasMoreElements ();) {
 final String name = (String) names.nextElement ();
 final X9ECParameters params = ECNamedCurveTable.getByName (name);
 if (params.getN ().equals (ecParameterSpec.getN ()) && params.getH ().equals (ecParameterSpec.getH ()) && params.getCurve ().equals (ecParameterSpec.getCurve ()) && params.getG ().equals (ecParameterSpec.getG ())) {
 return name;
 }
 }
 throw new GeneralSecurityException (""Could not find name for curve"");
 }","public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
 if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
 final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
 final ECParameterSpec params = pk.getParams ();
 return deriveCurveName (EC5Util.convertSpec (params, false));
 } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
 final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
 return deriveCurveName (pk.getParameters ());
 } else throw new IllegalArgumentException (""Can only be used with instances of ECPrivateKey (either jce or bc implementation)"");
 }",1
72,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Distance (m)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 gg.drawString (string, (getWidth () - width) / 2, 11);
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2 = (Graphics2D) g;
 g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 double xScale = ((double) getWidth () - (2 * padding) - labelPadding) / (scores.size () - 1);
 double yScale = ((double) getHeight () - 2 * padding - labelPadding) / (getMaxScore () - getMinScore ());
 List < Point > graphPoints = new ArrayList < > ();
 for (int i = 0;
 i < scores.size (); i ++) {
 int x1 = (int) (i * xScale + padding + labelPadding);
 int y1 = (int) ((getMaxScore () - scores.get (i)) * yScale + padding);
 graphPoints.add (new Point (x1, y1));
 }
 g2.setColor (Color.WHITE);
 g2.fillRect (padding + labelPadding, padding, getWidth () - (2 * padding) - labelPadding, getHeight () - 2 * padding - labelPadding);
 g2.setColor (Color.BLACK);
 for (int i = 0;
 i < numberYDivisions + 1; i ++) {
 int x0 = padding + labelPadding;
 int x1 = pointWidth + padding + labelPadding;
 int y0 = getHeight () - ((i * (getHeight () - padding * 2 - labelPadding)) / numberYDivisions + padding + labelPadding);
 int y1 = y0;
 if (scores.size () > 0) {
 g2.setColor (gridColor);
 g2.drawLine (padding + labelPadding + 1 + pointWidth, y0, getWidth () - padding, y1);
 g2.setColor (Color.BLACK);
 String yLabel = ((int) ((getMinScore () + (getMaxScore () - getMinScore ()) * ((i * 1.0) / numberYDivisions)) * 100)) / 100.0 + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (yLabel);
 g2.drawString (yLabel, x0 - labelWidth - 5, y0 + (metrics.getHeight () / 2) - 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 for (int i = 0;
 i < scores.size (); i ++) {
 if (scores.size () > 1) {
 int x0 = i * (getWidth () - padding * 2 - labelPadding) / (scores.size () - 1) + padding + labelPadding;
 int x1 = x0;
 int y0 = getHeight () - padding - labelPadding;
 int y1 = y0 - pointWidth;
 if ((i % ((int) ((scores.size () / 20.0)) + 1)) == 0) {
 g2.setColor (gridColor);
 g2.drawLine (x0, getHeight () - padding - labelPadding - 1 - pointWidth, x1, padding);
 g2.setColor (Color.BLACK);
 String xLabel = i + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (xLabel);
 g2.drawString (xLabel, x0 - labelWidth / 2, y0 + metrics.getHeight () + 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 }
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, padding + labelPadding, padding);
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, getWidth () - padding, getHeight () - padding - labelPadding);
 Stroke oldStroke = g2.getStroke ();
 g2.setColor (lineColor);
 g2.setStroke (GRAPH_STROKE);
 for (int i = 0;
 i < graphPoints.size () - 1; i ++) {
 int x1 = graphPoints.get (i).x;
 int y1 = graphPoints.get (i).y;
 int x2 = graphPoints.get (i + 1).x;
 int y2 = graphPoints.get (i + 1).y;
 g2.drawLine (x1, y1, x2, y2);
 }
 g2.setStroke (oldStroke);
 g2.setColor (pointColor);
 for (int i = 0;
 i < graphPoints.size (); i ++) {
 int x = graphPoints.get (i).x - pointWidth / 2;
 int y = graphPoints.get (i).y - pointWidth / 2;
 int ovalW = pointWidth;
 int ovalH = pointWidth;
 g2.fillOval (x, y, ovalW, ovalH);
 }
 }",1
1156,"public int [] solution (String S, int [] P, int [] Q) {
 final char [] characterInput = S.toCharArray ();
 final int [] integerInput = new int [characterInput.length];
 for (int counter = 0;
 counter < characterInput.length; counter ++) {
 integerInput [counter] = characterMapping.get (characterInput [counter]);
 }
 int [] result = new int [P.length];
 for (int index = 0;
 index < P.length; index ++) {
 if (P [index] == Q [index]) {
 result [index] = integerInput [P [index]];
 break;
 }
 final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
 final int minimumValue = minimum (subArray);
 result [index] = minimumValue;
 }
 return result;
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",0
1626,"public static void main (String [] args) throws InterruptedException {
 final AtomicInteger outputCount = new AtomicInteger (0);
 ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
 Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
 for (int i = 0;
 i < THREADS; i ++) {
 tasks.add (new Callable < Object > () {
 private SecureRandom rand = new SecureRandom ();
 private String task () {
 return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
 }@Override
 public Object call () {
 for (int i;
 (i = outputCount.get ()) < TASKS;) {
 String output = task ();
 if (output != null) {
 if ((i = outputCount.incrementAndGet ()) < TASKS) {
 System.out.println (output + "": "" + i);
 }
 }
 }
 return null;
 }}
 );
 }
 threadPool.invokeAll (tasks);
 threadPool.shutdownNow ();
 System.out.println (""done"");
 }","protected void layoutPlotChildren () {
 super.layoutPlotChildren ();
 for (Series < String, Number > series : getData ()) {
 for (Data < String, Number > data : series.getData ()) {
 StackPane bar = (StackPane) data.getNode ();
 final Text dataText = new Text (data.getYValue () + """");
 bar.getChildren ().add (dataText);
 }
 }
 }",0
1982,"public ViewHolder onCreateViewHolder (ViewGroup parent, int viewType) {
 Log.d (TAG, ""><![CDATA[>onCreateViewHolder(parent="" + parent + "", viewType="" + viewType + "")"");
 ViewHolder result;
 switch (viewType) {
 case ID_VIEW_HOLDER_ACTUAL :
 {
 View itemView = LayoutInflater.from (parent.getContext ()).inflate (R.layout.card_layout_actual, parent, false);
 result = new ViewHolderActual (itemView, new ViewHolderActual.IViewHolderClick () {
 @Override
 public void onCardClick (View view, int position, ViewHolder viewHolder) {
 Log.d (TAG, ""><![CDATA[<onCardClick(view="" + view + "", position="" + position + "", viewHolder="" + viewHolder + "")"");
 Intent intent = new Intent (view.getContext (), OrderDetailActivity.class);
 intent.putExtra (OrderDetailActivity.ARG_ORDER_ID, viewHolder.getOrderId ());
 view.getContext ().startActivity (intent);
 }@Override
 public void onButtonClick (Button button, int position, ViewHolder viewHolder) {
 Log.d (TAG, ""><![CDATA[<onButtonClick(button="" + button + "", position="" + position + "", viewHolder="" + viewHolder + "")"");
 Intent intent = new Intent (button.getContext (), OrderMapActivity.class);
 intent.putExtra (OrderMapActivity.ARG_ORDER_ID, viewHolder.getOrderId ());
 button.getContext ().startActivity (intent);
 }}
 );
 break;
 } case ID_VIEW_HOLDER :
 default :
 {
 View itemView = LayoutInflater.from (parent.getContext ()).inflate (R.layout.card_layout, parent, false);
 result = new ViewHolder (itemView, new ViewHolder.IViewHolderClick () {
 @Override
 public void onCardClick (View view, int position, ViewHolder viewHolder) {
 Log.d (TAG, ""><![CDATA[<onCardClick(view="" + view + "", position="" + position + "", viewHolder="" + viewHolder + "")"");
 Intent intent = new Intent (view.getContext (), OrderDetailActivity.class);
 intent.putExtra (OrderDetailActivity.ARG_ORDER_ID, viewHolder.getOrderId ());
 view.getContext ().startActivity (intent);
 }}
 );
 break;
 }}
 Log.d (TAG, ""<<onCreateViewHolder(parent="" + parent + "", viewType="" + viewType + "")= "" + result);
 return result;
 }","private void init () {
 textField = new JTextField ();
 okButton = new JButton (""OK"");
 okButton.addActionListener (this);
 setLayout (new GridLayout (2, 1, 5, 5));
 add (textField);
 add (okButton);
 pack ();
 }",0
951,"public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 int size = A.length;
 int [] check = new int [X];
 int cmp = 0;
 int time = - 1;
 for (int x = 0;
 x < size; x ++) {
 int temp = A [x];
 if (temp <= X) {
 if (check [temp - 1] > 0) {
 continue;
 }
 check [temp - 1] ++;
 cmp ++;
 }
 if (cmp == X) {
 time = x;
 break;
 }
 }
 return time;
 }",1
1703,"static String removeDuplicates (String s) {
 StringBuilder noDupes = new StringBuilder ();
 for (int i = 0;
 i < s.length (); i ++) {
 String si = s.substring (i, i + 1);
 if (noDupes.indexOf (si) == - 1) {
 noDupes.append (si);
 }
 }
 return noDupes.toString ();
 }","public static boolean isBalanced (String str) {
 boolean result = false;
 if (str.length () < 2) return false;
 Stack < Character > stack = new Stack < > ();
 for (int i = 0;
 i < str.length (); i ++) {
 char ch = str.charAt (i);
 if (! parenthesesMapRight.containsKey (ch) && ! parenthesesMapLeft.containsKey (ch)) {
 continue;
 }
 if (parenthesesMapLeft.containsKey (ch)) {
 stack.push (ch);
 } else {
 if (! stack.isEmpty () && stack.pop () == parenthesesMapRight.get (ch).charValue ()) {
 result = true;
 } else {
 return false;
 }
 }
 }
 if (! stack.isEmpty ()) return result = false;
 return result;
 }",0
940,"public void start (Stage primaryStage) {
 try {
 StackPane root = new StackPane ();
 Text text2 = new Text (""I will be aligned TOPLEFT"");
 Text text = new Text ("" Level 2 \n\n"" + ""Press ENTER to start a new game"");
 text.setTextAlignment (TextAlignment.CENTER);
 root.getChildren ().addAll (text2, text);
 StackPane.setAlignment (text2, Pos.TOP_LEFT);
 StackPane.setAlignment (text, Pos.CENTER);
 Scene scene = new Scene (root, 400, 400);
 primaryStage.setScene (scene);
 primaryStage.show ();
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public void start (Stage primaryStage) {
 Text waitingForKey = new Text (""Level 2 \n\n"" + ""Press ENTER to start a new game"");
 waitingForKey.setTextAlignment (TextAlignment.CENTER);
 waitingForKey.setFont (new Font (18));
 waitingForKey.setFill (Color.ALICEBLUE);
 StackPane root = new StackPane ();
 root.getChildren ().add (waitingForKey);
 Scene scene = new Scene (root, 320, 240, Color.BLACK);
 primaryStage.setTitle (""Test"");
 primaryStage.setScene (scene);
 primaryStage.show ();
 }",1
1011,"public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }","public void start (Stage primaryStage) {
 final TextArea textArea = new TextArea ();
 textArea.setPrefSize (200, 40);
 textArea.setWrapText (true);
 textHolder.textProperty ().bind (textArea.textProperty ());
 textHolder.layoutBoundsProperty ().addListener (new ChangeListener < Bounds > () {
 @Override
 public void changed (ObservableValue < ? extends Bounds > observable, Bounds oldValue, Bounds newValue) {
 if (oldHeight != newValue.getHeight ()) {
 System.out.println (""newValue = "" + newValue.getHeight ());
 oldHeight = newValue.getHeight ();
 textArea.setPrefHeight (textHolder.getLayoutBounds ().getHeight () + 20);
 }
 }}
 );
 Group root = new Group (textArea);
 Scene scene = new Scene (root, 300, 250);
 primaryStage.setScene (scene);
 primaryStage.show ();
 }",0
569,"public static int [] sort (int [] numbers, int digit) {
 if (numbers.length == 0 || digit <= 0) return numbers;
 int [] [] space = new int [10] [0];
 int [] len = new int [10];
 int i, j;
 for (j = 0; j < numbers.length; j ++) {
 i = (numbers [j] / digit) % 10;
 len [i] ++;
 space [i] = putInBucket (space [i], numbers [j]);
 }
 for (i = 0; i < 10; i ++) {
 space [i] = sort (space [i], digit / 10);
 }
 int k = 0;
 for (i = 0; i < 10; i ++) {
 for (j = 0; j < len [i]; j ++) {
 numbers [k] = space [i] [j];
 k ++;
 }
 }
 return numbers;
 }","public static int [] sort (int [] numbers, int digit) {
 if (numbers.length == 0 || digit <= 0) return numbers;
 int [] [] space = new int [10] [1];
 int [] len = new int [10];
 int i, j = 0;
 for (j = 0; j < numbers.length; j ++) {
 i = (numbers [j] / digit) % 10;
 len [i] ++;
 space [i] = putInBucket (space [i], numbers [j]);
 }
 for (i = 0; i < 10; i ++) {
 int [] bucket = new int [len [i]];
 for (int k = 0;
 k < len [i]; k ++) bucket [k] = space [i] [k];
 space [i] = sort (bucket, digit / 10);
 }
 int k = 0;
 for (i = 0; i < 10; i ++) {
 for (j = 0; j < len [i]; j ++) {
 numbers [k] = space [i] [j];
 k ++;
 }
 }
 return numbers;
 }",1
1884,"protected void exportDone (JComponent c, Transferable data, int action) {
 if ((action == MOVE) && (indices != null)) {
 DefaultListModel model = (DefaultListModel) source.getModel ();
 if (addCount > 0) {
 for (int i = 0;
 i < indices.length; i ++) {
 if (indices [i] > addIndex) {
 indices [i] += addCount;
 }
 }
 }
 for (int i = indices.length - 1;
 i >= 0; i --) {
 model.remove (indices [i]);
 }
 }
 indices = null;
 addIndex = - 1;
 addCount = 0;
 }","public static byte [] readBytes (InputStream inputStream) throws IOException {
 byte [] b = new byte [1024];
 ByteArrayOutputStream os = new ByteArrayOutputStream ();
 int c;
 while ((c = inputStream.read (b)) != - 1) {
 os.write (b, 0, c);
 }
 return os.toByteArray ();
 }",0
1634,"public static void main (String [] args) {
 List < Integer > numberList = new ArrayList < > ();
 List < String > strList = new ArrayList < > ();
 for (int i = 0;
 i < args.length; i ++) {
 if (Pattern.matches (""-?\\d+"", args [i])) {
 numberList.add (Integer.parseInt (args [i]));
 } else {
 strList.add (args [i]);
 }
 }
 String [] colors = strList.toArray (new String [0]);
 int [] number = ArrayUtils.toPrimitive (numberList.toArray (new Integer [numberList.size ()]));
 }","public static void main (String [] args) {
 String s = ""aaaabbccccdddeee"";
 String s1 = """";
 String s2 = """";
 int count = 0;
 for (int i = 0;
 i < s.length (); i ++) {
 if (s1.indexOf (s.charAt (i)) < 0) {
 s1 = s1 + s.charAt (i);
 }
 }
 for (int i = 0;
 i < s1.length (); i ++) {
 for (int j = 0;
 j < s.length (); j ++) {
 if (s1.charAt (i) == s.charAt (j)) {
 count ++;
 }
 }
 s2 = s2 + s1.charAt (i) + count;
 count = 0;
 }
 System.out.println (s2);
 }",0
468,"public static final int solution (final int X, final int [] A) {
 if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
 throw new RuntimeException (""Array size out of bounds"");
 }
 Set set = new Set (X);
 int ai;
 int counter = X;
 final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
 for (int i = 0;
 i < A.length; i ++) {
 if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
 throw new RuntimeException (""Number out of bounds"");
 } else if (ai <= X && ! set.contains (ai)) {
 counter --;
 if (counter == 0) {
 return i;
 }
 set.put (ai);
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }",1
775,"public static void main (String [] args) {
 System.out.println (""Enter name"");
 Scanner kb = new Scanner (System.in);
 String text = kb.next ();
 if (null == text || text.isEmpty ()) {
 System.out.println (""Text empty"");
 } else if (text.charAt (0) == (text.toUpperCase ().charAt (0))) {
 System.out.println (""First letter in word "" + text + "" is upper case"");
 }
 }","public static void main (String [] args) {
 String str1 = """";
 String str2 = null;
 String str3 = ""Starts with upper case"";
 String str4 = ""starts with lower case"";
 System.out.println (startWithUpperCase (str1));
 System.out.println (startWithUpperCase (str2));
 System.out.println (startWithUpperCase (str3));
 System.out.println (startWithUpperCase (str4));
 }",1
1769,"public static boolean isBalanced (String brackets) {
 Map < Character, Character > braces = new HashMap < > ();
 braces.put ('(', ')');
 braces.put ('[', ']');
 braces.put ('{', '}');
 if (brackets.length () % 2 != 0) {
 return false;
 }
 Stack < Character > halfBraces = new Stack ();
 for (char ch : brackets.toCharArray ()) {
 if (braces.containsKey (ch)) {
 halfBraces.push (braces.get (ch));
 } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
 return false;
 }
 }
 return halfBraces.isEmpty ();
 }","public static void main (String [] args) {
 Scanner in = new Scanner (System.in);
 int n = in.nextInt ();
 int a [] [] = new int [n] [n];
 for (int a_i = 0;
 a_i < n; a_i ++) {
 for (int a_j = 0;
 a_j < n; a_j ++) {
 a [a_i] [a_j] = in.nextInt ();
 }
 }
 int l_sum = 0;
 for (int i = 0;
 i < n; i ++) {
 l_sum += a [i] [i];
 }
 int r_sum = 0;
 for (int j = 0;
 j < n; j ++) {
 r_sum += a [j] [n - 1 - j];
 }
 int sum = l_sum + r_sum;
 System.out.println (sum);
 }",0
1776,"public static void main (String [] args) {
 String s = ""aaaabbccccdddeee"";
 String s1 = """";
 String s2 = """";
 int count = 0;
 for (int i = 0;
 i < s.length (); i ++) {
 if (s1.indexOf (s.charAt (i)) < 0) {
 s1 = s1 + s.charAt (i);
 }
 }
 for (int i = 0;
 i < s1.length (); i ++) {
 for (int j = 0;
 j < s.length (); j ++) {
 if (s1.charAt (i) == s.charAt (j)) {
 count ++;
 }
 }
 s2 = s2 + s1.charAt (i) + count;
 count = 0;
 }
 System.out.println (s2);
 }","public void run () {
 int i = 1;
 while (true) {
 System.out.println (i);
 try {
 Thread.sleep (1000);
 cb.await ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 i = i + 3;
 }
 }",0
1843,"public void run () {
 int i = 1;
 while (i < 50) {
 while (s.getState () != 3) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 3) System.out.println (""t1 "" + i);
 s.setState (1);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }","public int solution (int X, int [] A) {
 Set < Integer > leaves = new HashSet < > ();
 for (int i = 0;
 i < A.length; i ++) {
 leaves.add (A [i]);
 if (leaves.contains (X) && leaves.size () == X) return i;
 }
 return - 1;
 }",0
1083,"private static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int [] seen = new int [256];
 Arrays.fill (seen, 0);
 s1 = s1.toLowerCase ();
 s2 = s2.toLowerCase ();
 for (int i = 0;
 i < s1.length (); i ++) {
 seen [s1.charAt (i)] = seen [s1.charAt (i)] + 1;
 }
 for (int i = 0;
 i < s2.length (); i ++) {
 if (seen [s2.charAt (i)] == 0) return false;
 seen [s2.charAt (i)] = seen [s2.charAt (i)] - 1;
 }
 for (int i = 0;
 i < 256; i ++) {
 if (seen [i] != 0) return false;
 }
 return true;
 }","public void run () {
 synchronized (list) {
 for (int i = 0;
 i < 10; i ++) {
 while (list.isEmpty ()) {
 System.out.println (""Consumer is waiting"");
 try {
 list.wait ();
 } catch (InterruptedException ex) {
 ex.printStackTrace ();
 }
 }
 int k = list.remove (0);
 System.out.println (""consume="" + k);
 list.notifyAll ();
 try {
 Thread.sleep (500);
 } catch (InterruptedException ex) {
 ex.printStackTrace ();
 }
 }
 }
 }",0
258,"public static String replace (String old, String newWord, String input) {
 int i = input.indexOf (old);
 if (i < 0) {
 return input;
 }
 String partBefore = input.substring (0, i);
 String partAfter = input.substring (i + old.length ());
 return partBefore + newWord + replace (old, newWord, partAfter);
 }","public static String replace (String oldStr, String newStr, String input) {
 StringBuilder sb = new StringBuilder ();
 int i;
 int prev = 0;
 while ((i = input.indexOf (oldStr, prev)) >= 0) {
 sb.append (input.substring (prev, i)).append (newStr);
 prev = i + oldStr.length ();
 }
 sb.append (input.substring (prev));
 return sb.toString ();
 }",1
1140,"private static String capitalize (String str) {
 if (TextUtils.isEmpty (str)) {
 return str;
 }
 char [] arr = str.toCharArray ();
 boolean capitalizeNext = true;
 String phrase = """";
 for (char c : arr) {
 if (capitalizeNext && Character.isLetter (c)) {
 phrase += Character.toUpperCase (c);
 capitalizeNext = false;
 continue;
 } else if (Character.isWhitespace (c)) {
 capitalizeNext = true;
 }
 phrase += c;
 }
 return phrase;
 }","public static int solution (int X, int [] A) {
 int [] counter = new int [X + 1];
 int ans = - 1;
 int x = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (counter [A [i]] == 0) {
 counter [A [i]] = A [i];
 x += 1;
 if (x == X) {
 return i;
 }
 }
 }
 return ans;
 }",0
305,"int solution (int N) {
 int tempGap = 0, gap = 0;
 String binaryString = Integer.toBinaryString (N);
 int i = 0;
 while (i < binaryString.length ()) {
 if (binaryString.charAt (i) == '1') {
 ++ i;
 tempGap = 0;
 while (i < binaryString.length () && binaryString.charAt (i) != '1') {
 ++ i;
 tempGap ++;
 }
 if (i >= binaryString.length ()) {
 tempGap = 0;
 }
 } else {
 ++ i;
 }
 if (tempGap > gap) {
 gap = tempGap;
 }
 }
 return gap;
 }","public int solution (int N) {
 String binary = Integer.toString (N, 2);
 int largestGap = 0;
 for (int i = 1, gap = 0;
 i < binary.length (); i ++) {
 while (i < binary.length () && binary.charAt (i) == '0') {
 i ++;
 gap ++;
 }
 if (gap > largestGap && i < binary.length ()) {
 largestGap = gap;
 }
 gap = 0;
 }
 return largestGap;
 }",1
1469,"public static void main (String [] args) {
 Random ran = new Random ();
 int min, max;
 Scanner sc = new Scanner (System.in);
 System.out.println (""Enter min range:"");
 min = sc.nextInt ();
 System.out.println (""Enter max range:"");
 max = sc.nextInt ();
 int num = ran.nextInt (min);
 int num1 = ran.nextInt (max);
 System.out.println (""Random Number between given range is "" + num1);
 }","public static void main (String [] args) {
 ArrayList < Point > positions = new ArrayList < Point > ();
 positions.add (new Point (1, 0));
 positions.add (new Point (1, 1));
 positions.add (new Point (1, 2));
 positions.add (new Point (2, 2));
 positions.add (new Point (3, 1));
 positions.add (new Point (4, 1));
 positions.add (new Point (5, 1));
 positions.add (new Point (5, 2));
 ArrayList < Point > turns = new ArrayList < Point > ();
 for (int i = 0;
 i < positions.size (); i ++) {
 turns.add (null);
 }
 int counter = 0;
 if (positions.size () > 2) {
 Point base = positions.get (0);
 Point next = positions.get (1);
 int x = (next.x - base.x);
 double slope = 1.0 * (next.y - base.y) / (next.x - base.x);
 for (int i = 2;
 i < positions.size (); i ++) {
 Point newpoint = positions.get (i);
 double newslope = 1.0 * (newpoint.y - next.y) / (newpoint.x - next.x);
 if (newslope != slope) {
 counter ++;
 turns.set (i - 1, positions.get (i - 1));
 slope = newslope;
 }
 next = newpoint;
 }
 }
 System.out.println (""Collinear points:"");
 for (int i = 0;
 i < positions.size (); i ++) {
 System.out.print (""("" + positions.get (i).x + "", "" + positions.get (i).y + "") "");
 if (turns.get (i) != null) {
 System.out.println ();
 System.out.print (""("" + positions.get (i).x + "", "" + positions.get (i).y + "") "");
 }
 }
 System.out.println ();
 System.out.println ();
 if (counter > 0) {
 System.out.println (""Turns at these points: "");
 for (Point p : turns) {
 if (p != null) System.out.print (""("" + p.x + "", "" + p.y + "") "");
 }
 } else {
 System.out.println (""There are no turns!"");
 }
 }",0
1024,"public static void main (String [] args) {
 String set = new java.util.BitSet () {
 {
 set (1, 100 + 1);
 }
 }
 .toString ();
 System.out.append (set, 1, set.length () - 1);
 }","public void mouseDragged (MouseEvent me) {
 super.mouseDragged (me);
 if (me.getX () < startX) {
 x -= 2;
 } else if (me.getX () > startX) {
 x += 2;
 }
 if (me.getY () < startY) {
 y -= 2;
 } else if (me.getY () > startY) {
 y += 2;
 }
 repaint ();
 }",0
1753,"private XSSFFont transform (HSSFFont fontOld) {
 XSSFFont fontNew = this.workbookNew.createFont ();
 fontNew.setBoldweight (fontOld.getBoldweight ());
 fontNew.setCharSet (fontOld.getCharSet ());
 fontNew.setColor (fontOld.getColor ());
 fontNew.setFontName (fontOld.getFontName ());
 fontNew.setFontHeight (fontOld.getFontHeight ());
 fontNew.setItalic (fontOld.getItalic ());
 fontNew.setStrikeout (fontOld.getStrikeout ());
 fontNew.setTypeOffset (fontOld.getTypeOffset ());
 fontNew.setUnderline (fontOld.getUnderline ());
 return fontNew;
 }","public static final void printArray (int [] arr) {
 System.out.print (""["");
 for (int i = 0;
 i < arr.length; i ++) {
 if (i == arr.length - 1) System.out.print (arr [i]);
 else System.out.print (arr [i] + "", "");
 }
 System.out.println (""]"");
 }",0
1423,"public static int singleNumber (int [] nums) {
 int answer = 0;
 ArrayList al = new ArrayList ();
 for (int i = 0;
 i < nums.length; i ++) {
 al.add (nums [i]);
 }
 for (int i = 0;
 i < nums.length; i ++) {
 int test = nums [i];
 if (al.indexOf (test) == al.lastIndexOf (test)) {
 answer = nums [i];
 }
 }
 return answer;
 }","public int loneSum (int a, int b, int c) {
 int sum = 0;
 boolean ab = a != b;
 boolean ac = a != c;
 boolean bc = b != c;
 if (ab && ac) sum += a;
 if (ab && bc) sum += b;
 if (bc && ac) sum += c;
 return sum;
 }",0
1946,"public void onCreate (Bundle savedInstanceState) {
 super.onCreate (savedInstanceState);
 setContentView (R.layout.main);
 mTextView = (TextView) findViewById (R.id.empty);
 mCountDownTimer = new CountDownTimer (mInitialTime, 1000) {
 StringBuilder time = new StringBuilder ();
 @Override
 public void onFinish () {
 mTextView.setText (DateUtils.formatElapsedTime (0));
 }@Override
 public void onTick (long millisUntilFinished) {
 time.setLength (0);
 if (millisUntilFinished > DateUtils.DAY_IN_MILLIS) {
 long count = millisUntilFinished / DateUtils.DAY_IN_MILLIS;
 if (count > 1) time.append (count).append ("" days "");
 else time.append (count).append ("" day "");
 millisUntilFinished %= DateUtils.DAY_IN_MILLIS;
 }
 time.append (DateUtils.formatElapsedTime (Math.round (millisUntilFinished / 1000d)));
 mTextView.setText (time.toString ());
 }}
 .start ();
 }","public View getView (int position, View convertView, ViewGroup parent) {
 View rowView = convertView;
 if (rowView == null) {
 LayoutInflater inflater = context.getLayoutInflater ();
 rowView = inflater.inflate (R.layout.test_row, null);
 final TestViewHolder viewHolder = new TestViewHolder ();
 viewHolder.tvCounter = (TextView) rowView.findViewById (R.id.tvCounter);
 rowView.setTag (viewHolder);
 }
 TestViewHolder holder = (TestViewHolder) rowView.getTag ();
 final TextView tv = holder.tvCounter;
 CountDownTimer cdt = counters.get (holder.tvCounter);
 if (cdt != null) {
 cdt.cancel ();
 cdt = null;
 }
 Date date = values.get (position);
 long currentDate = Calendar.getInstance ().getTime ().getTime ();
 long limitDate = date.getTime ();
 long difference = limitDate - currentDate;
 cdt = new CountDownTimer (difference, 1000) {
 @Override
 public void onTick (long millisUntilFinished) {
 int days = 0;
 int hours = 0;
 int minutes = 0;
 int seconds = 0;
 String sDate = """";
 if (millisUntilFinished > DateUtils.DAY_IN_MILLIS) {
 days = (int) (millisUntilFinished / DateUtils.DAY_IN_MILLIS);
 sDate += days + ""d"";
 }
 millisUntilFinished -= (days * DateUtils.DAY_IN_MILLIS);
 if (millisUntilFinished > DateUtils.HOUR_IN_MILLIS) {
 hours = (int) (millisUntilFinished / DateUtils.HOUR_IN_MILLIS);
 }
 millisUntilFinished -= (hours * DateUtils.HOUR_IN_MILLIS);
 if (millisUntilFinished > DateUtils.MINUTE_IN_MILLIS) {
 minutes = (int) (millisUntilFinished / DateUtils.MINUTE_IN_MILLIS);
 }
 millisUntilFinished -= (minutes * DateUtils.MINUTE_IN_MILLIS);
 if (millisUntilFinished > DateUtils.SECOND_IN_MILLIS) {
 seconds = (int) (millisUntilFinished / DateUtils.SECOND_IN_MILLIS);
 }
 sDate += "" "" + String.format (""%02d"", hours) + "":"" + String.format (""%02d"", minutes) + "":"" + String.format (""%02d"", seconds);
 tv.setText (sDate.trim ());
 }@Override
 public void onFinish () {
 tv.setText (""Finished"");
 }}
 ;
 counters.put (tv, cdt);
 cdt.start ();
 return rowView;
 }",0
418,"public static String numLetters (String str) {
 StringBuilder s = new StringBuilder (s);
 String end = new String ();
 int counter = 0;
 char c, d;
 for (int i = 0;
 i < s.length (); i ++) {
 c = s.charAt (i);
 for (int j = 0;
 j < s.length (); j ++) {
 d = s.charAt (j);
 if (c == d) {
 s.deleteCharAt (j);
 if (i >= j) i --;
 j --;
 counter ++;
 }
 }
 end = end + counter + c;
 counter = 0;
 }
 return end;
 }","public static String numLetters (String s) {
 int [] count = new int [26];
 for (int i = 0;
 i < s.length (); i ++) {
 char c = s.charAt (i);
 count [(int) (c - 'a')] ++;
 }
 String ans = """";
 for (int i = 0;
 i < 26; i ++) {
 if (count [i] != 0) {
 ans += String.valueOf (count [i]) + (char) (i + 'a');
 }
 }
 return ans;
 }",1
1373,"@Override
 public void tick (float delta) {
 Entity removeEntity = null;
 for (Entity e : entities) {
 e.tick (delta);
 if (e.checkStrength ()) {
 removeEntity = e;
 break;
 }
 }
 if (removeEntity != null) {
 entities.remove (removeEntity);
 }
 player.tick (delta);
 }","public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Close Dialogs"");
 for (Window window : Window.getWindows ()) {
 if (window instanceof JDialog) {
 JDialog dialog = (JDialog) window;
 System.out.println (""\tClosing "" + dialog.getTitle ());
 dialog.dispose ();
 }
 }
 Runtime.getRuntime ().gc ();
 }",0
759,"public static void main (String [] args) throws Exception {
 Experius a = new Experius ();
 int count = 10000000;
 int v = 0;
 long tm = System.currentTimeMillis ();
 for (int i = 0;
 i < count; ++ i) {
 v = a.something (i + v);
 ++ v;
 }
 tm = System.currentTimeMillis () - tm;
 System.out.println (""Time: "" + tm);
 tm = System.currentTimeMillis ();
 Method method = Experius.class.getMethod (""something"", Integer.TYPE);
 for (int i = 0;
 i < count; ++ i) {
 Object o = method.invoke (a, i + v);
 ++ v;
 }
 tm = System.currentTimeMillis () - tm;
 System.out.println (""Time: "" + tm);
 }","public static void main (String [] args) throws NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
 Object obj = new Object ();
 Class < Object > objClass = Object.class;
 String s;
 long start = System.nanoTime ();
 s = obj.toString ();
 long directInvokeEnd = System.nanoTime ();
 System.out.println (s);
 long methodLookupStart = System.nanoTime ();
 java.lang.reflect.Method method = objClass.getMethod (""toString"");
 long methodLookupEnd = System.nanoTime ();
 s = (String) (method.invoke (obj));
 long reflectInvokeEnd = System.nanoTime ();
 System.out.println (s);
 System.out.println (directInvokeEnd - start);
 System.out.println (methodLookupEnd - methodLookupStart);
 System.out.println (reflectInvokeEnd - methodLookupEnd);
 }",1
1172,"public void run () {
 int i = 1;
 while (true) {
 System.out.println (i);
 try {
 Thread.sleep (1000);
 cb.await ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 i = i + 3;
 }
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int number;
 if (value.isEmpty ()) {
 number = 0;
 } else if (value.length () > 4) {
 number = Integer.valueOf (value.substring (value.length () - 4), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 1000;
 if (number >= 100) {
 buffer.append (unitProcessor.getName (number / 100));
 buffer.append (SEPARATOR);
 buffer.append (SCALE.getName (EXPONENT));
 }
 String tensName = tensProcessor.getName (number % 100);
 if (! tensName.isEmpty () && (number >= 100)) {
 buffer.append (SEPARATOR);
 }
 buffer.append (tensName);
 return buffer.toString ();
 }",0
146,"private static void sort (int [] arr) {
 int index = 0;
 int n = arr.length;
 while (index < n) {
 if (index == 0) index ++;
 if (compare (arr [index], arr [index - 1])) index ++;
 else {
 int temp = arr [index];
 arr [index] = arr [index - 1];
 arr [index - 1] = temp;
 index --;
 }
 }
 }","static int [] sort (int arr []) {
 for (int i = 0;
 i < arr.length; i ++) {
 for (int j = i;
 j < arr.length; j ++) {
 if (arr [j] < arr [i]) {
 int temp = arr [i];
 arr [i] = arr [j];
 arr [j] = temp;
 }
 }
 }
 return arr;
 }",1
1055,"public static void main (String [] args) {
 final int max = 100;
 new java.util.concurrent.Semaphore (max) {
 void go () {
 acquireUninterruptibly ();
 System.err.println (max - availablePermits ());
 go ();
 }}
 .go ();
 }","public void onRequestPermissionsResult (int requestCode,@NonNull
 String [] permissions,@NonNull
 int [] grantResults) {
 if (requestCode == mRequestCode) {
 if (grantResults.length > 0) {
 for (int grantResult : grantResults) {
 if (grantResult != PackageManager.PERMISSION_GRANTED) {
 mRequestPermissionListener.onFailed ();
 return;
 }
 }
 mRequestPermissionListener.onSuccess ();
 } else {
 mRequestPermissionListener.onFailed ();
 }
 }
 }",0
681,"public void type (char character) {
 switch (character) {
 case 'a' :
 doType (VK_A);
 break;
 case 'b' :
 doType (VK_B);
 break;
 case 'c' :
 doType (VK_C);
 break;
 case 'd' :
 doType (VK_D);
 break;
 case 'e' :
 doType (VK_E);
 break;
 case 'f' :
 doType (VK_F);
 break;
 case 'g' :
 doType (VK_G);
 break;
 case 'h' :
 doType (VK_H);
 break;
 case 'i' :
 doType (VK_I);
 break;
 case 'j' :
 doType (VK_J);
 break;
 case 'k' :
 doType (VK_K);
 break;
 case 'l' :
 doType (VK_L);
 break;
 case 'm' :
 doType (VK_M);
 break;
 case 'n' :
 doType (VK_N);
 break;
 case 'o' :
 doType (VK_O);
 break;
 case 'p' :
 doType (VK_P);
 break;
 case 'q' :
 doType (VK_Q);
 break;
 case 'r' :
 doType (VK_R);
 break;
 case 's' :
 doType (VK_S);
 break;
 case 't' :
 doType (VK_T);
 break;
 case 'u' :
 doType (VK_U);
 break;
 case 'v' :
 doType (VK_V);
 break;
 case 'w' :
 doType (VK_W);
 break;
 case 'x' :
 doType (VK_X);
 break;
 case 'y' :
 doType (VK_Y);
 break;
 case 'z' :
 doType (VK_Z);
 break;
 case 'A' :
 doType (VK_SHIFT, VK_A);
 break;
 case 'B' :
 doType (VK_SHIFT, VK_B);
 break;
 case 'C' :
 doType (VK_SHIFT, VK_C);
 break;
 case 'D' :
 doType (VK_SHIFT, VK_D);
 break;
 case 'E' :
 doType (VK_SHIFT, VK_E);
 break;
 case 'F' :
 doType (VK_SHIFT, VK_F);
 break;
 case 'G' :
 doType (VK_SHIFT, VK_G);
 break;
 case 'H' :
 doType (VK_SHIFT, VK_H);
 break;
 case 'I' :
 doType (VK_SHIFT, VK_I);
 break;
 case 'J' :
 doType (VK_SHIFT, VK_J);
 break;
 case 'K' :
 doType (VK_SHIFT, VK_K);
 break;
 case 'L' :
 doType (VK_SHIFT, VK_L);
 break;
 case 'M' :
 doType (VK_SHIFT, VK_M);
 break;
 case 'N' :
 doType (VK_SHIFT, VK_N);
 break;
 case 'O' :
 doType (VK_SHIFT, VK_O);
 break;
 case 'P' :
 doType (VK_SHIFT, VK_P);
 break;
 case 'Q' :
 doType (VK_SHIFT, VK_Q);
 break;
 case 'R' :
 doType (VK_SHIFT, VK_R);
 break;
 case 'S' :
 doType (VK_SHIFT, VK_S);
 break;
 case 'T' :
 doType (VK_SHIFT, VK_T);
 break;
 case 'U' :
 doType (VK_SHIFT, VK_U);
 break;
 case 'V' :
 doType (VK_SHIFT, VK_V);
 break;
 case 'W' :
 doType (VK_SHIFT, VK_W);
 break;
 case 'X' :
 doType (VK_SHIFT, VK_X);
 break;
 case 'Y' :
 doType (VK_SHIFT, VK_Y);
 break;
 case 'Z' :
 doType (VK_SHIFT, VK_Z);
 break;
 case '`' :
 doType (VK_BACK_QUOTE);
 break;
 case '0' :
 doType (VK_0);
 break;
 case '1' :
 doType (VK_1);
 break;
 case '2' :
 doType (VK_2);
 break;
 case '3' :
 doType (VK_3);
 break;
 case '4' :
 doType (VK_4);
 break;
 case '5' :
 doType (VK_5);
 break;
 case '6' :
 doType (VK_6);
 break;
 case '7' :
 doType (VK_7);
 break;
 case '8' :
 doType (VK_8);
 break;
 case '9' :
 doType (VK_9);
 break;
 case '-' :
 doType (VK_MINUS);
 break;
 case '=' :
 doType (VK_EQUALS);
 break;
 case '~' :
 doType (VK_SHIFT, VK_BACK_QUOTE);
 break;
 case '!' :
 doType (VK_EXCLAMATION_MARK);
 break;
 case '@' :
 doType (VK_AT);
 break;
 case '#' :
 doType (VK_NUMBER_SIGN);
 break;
 case '$' :
 doType (VK_DOLLAR);
 break;
 case '%' :
 doType (VK_SHIFT, VK_5);
 break;
 case '^' :
 doType (VK_CIRCUMFLEX);
 break;
 case '&' :
 doType (VK_AMPERSAND);
 break;
 case '*' :
 doType (VK_ASTERISK);
 break;
 case '(' :
 doType (VK_LEFT_PARENTHESIS);
 break;
 case ')' :
 doType (VK_RIGHT_PARENTHESIS);
 break;
 case '_' :
 doType (VK_UNDERSCORE);
 break;
 case '+' :
 doType (VK_PLUS);
 break;
 case '\t' :
 doType (VK_TAB);
 break;
 case '\n' :
 doType (VK_ENTER);
 break;
 case '[' :
 doType (VK_OPEN_BRACKET);
 break;
 case ']' :
 doType (VK_CLOSE_BRACKET);
 break;
 case '\\' :
 doType (VK_BACK_SLASH);
 break;
 case '{' :
 doType (VK_SHIFT, VK_OPEN_BRACKET);
 break;
 case '}' :
 doType (VK_SHIFT, VK_CLOSE_BRACKET);
 break;
 case '|' :
 doType (VK_SHIFT, VK_BACK_SLASH);
 break;
 case ';' :
 doType (VK_SEMICOLON);
 break;
 case ':' :
 doType (VK_COLON);
 break;
 case '\'' :
 doType (VK_QUOTE);
 break;
 case '""' :
 doType (VK_QUOTEDBL);
 break;
 case ',' :
 doType (VK_COMMA);
 break;
 case '<' :
 doType (VK_SHIFT, VK_COMMA);
 break;
 case '.' :
 doType (VK_PERIOD);
 break;
 case '>' :
 doType (VK_SHIFT, VK_PERIOD);
 break;
 case '/' :
 doType (VK_SLASH);
 break;
 case '?' :
 doType (VK_SHIFT, VK_SLASH);
 break;
 case ' ' :
 doType (VK_SPACE);
 break;
 default :
 throw new IllegalArgumentException (""Cannot type character "" + character);
 }
 }","private void type (char character) {
 handleSpecialCharacter (character);
 if (Character.isLowerCase (character)) {
 typeCharacter (Character.toUpperCase (character));
 }
 if (Character.isUpperCase (character)) {
 typeShiftCharacter (character);
 }
 if (Character.isDigit (character)) {
 typeCharacter (character);
 }
 }",1
1353,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if ("""".equals (name)) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || """".equals (decimalValue))) {
 String zeroDecimalValue = """";
 for (int i = 0;
 i < decimalValue.length (); i ++) {
 zeroDecimalValue = zeroDecimalValue + ""0"";
 }
 if (decimalValue.equals (zeroDecimalValue)) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (""zero"").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 } else {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 }
 return name;
 }","public void actionPerformed (ActionEvent e) {
 switch (direction) {
 case UP :
 draw.incrementY (false);
 break;
 case DOWN :
 draw.incrementY (true);
 break;
 case LEFT :
 draw.incrementX (false);
 break;
 case RIGHT :
 draw.incrementX (true);
 break;
 default :
 break;
 }
 }",0
525,"public static void main (String [] args) {
 FileReader fr = null;
 BufferedReader br = null;
 String [] stringArray;
 int counLine = 0;
 int arrayLength;
 String s = """";
 String stringLine = """";
 try {
 fr = new FileReader (""F:/Line.txt"");
 br = new BufferedReader (fr);
 while ((s = br.readLine ()) != null) {
 stringLine = stringLine + s;
 stringLine = stringLine + "" "";
 counLine ++;
 }
 System.out.println (stringLine);
 stringArray = stringLine.split ("" "");
 arrayLength = stringArray.length;
 System.out.println (""The number of Words is "" + arrayLength);
 for (int i = 0;
 i < arrayLength; i ++) {
 int c = 1;
 for (int j = i + 1;
 j < arrayLength; j ++) {
 if (stringArray [i].equalsIgnoreCase (stringArray [j])) {
 c ++;
 for (int j2 = j;
 j2 < arrayLength; j2 ++) {
 stringArray [j2] = stringArray [j2 + 1];
 arrayLength = arrayLength - 1;
 }
 }
 }
 System.out.println (""The "" + stringArray [i] + "" present "" + c + "" times ."");
 }
 System.out.println (""The number of Line is "" + counLine);
 System.out.println ();
 fr.close ();
 br.close ();
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public static void main (String [] args) {
 int count = 0;
 String str = ""hi this is is is line"";
 String [] s1 = str.split ("" "");
 for (int i = 0;
 i <= s1.length - 1; i ++) {
 if (s1 [i].equals (""is"")) {
 count ++;
 }
 }
 System.out.println (count);
 }",1
1690,"public void actionPerformed (ActionEvent ae) {
 startButton.setEnabled (false);
 count = 0;
 final ArrayList < String > chars = new ArrayList < > ();
 final ArrayList < Integer > charsTiming = new ArrayList < > ();
 for (String s : individualWordsToHighlight) {
 for (int i = 0;
 i < s.length (); i ++) {
 chars.add (String.valueOf (s.charAt (i)));
 System.out.println (String.valueOf (s.charAt (i)));
 }
 }
 for (int x = 0;
 x < timingsArray.length; x ++) {
 for (int i = 0;
 i < individualWordsToHighlight [x].length (); i ++) {
 charsTiming.add (timingsArray [x] / individualWordsToHighlight [x].length ());
 System.out.println (timingsArray [x] / individualWordsToHighlight [x].length ());
 }
 }
 new Timer (1, new AbstractAction () {
 @Override
 public void actionPerformed (ActionEvent ae) {
 if (count < charsTiming.size ()) {
 highlightNextWord ();
 ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
 ((Timer) ae.getSource ()).restart ();
 } else {
 reset ();
 ((Timer) ae.getSource ()).stop ();
 }
 count ++;
 }}
 ).start ();
 }","int solution (int N) {
 int tempGap = 0, gap = 0;
 String binaryString = Integer.toBinaryString (N);
 int i = 0;
 while (i < binaryString.length ()) {
 if (binaryString.charAt (i) == '1') {
 ++ i;
 tempGap = 0;
 while (i < binaryString.length () && binaryString.charAt (i) != '1') {
 ++ i;
 tempGap ++;
 }
 if (i >= binaryString.length ()) {
 tempGap = 0;
 }
 } else {
 ++ i;
 }
 if (tempGap > gap) {
 gap = tempGap;
 }
 }
 return gap;
 }",0
407,"public static void main (String [] args) {
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int mArray [] = new int [5];
 int j = 0;
 for (int i = 0;
 i < array.length; i ++) {
 if (array [i] > lower (mArray)) {
 mArray [lowerPos (mArray)] = array [i];
 }
 }
 System.out.println (Arrays.toString (mArray));
 }","public static void main (String args []) {
 int i;
 int largestSize = 4;
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34};
 int large [] = Arrays.copyOf (array, largestSize);
 int smallest = large [0];
 int smallestIndex = 0;
 for (int j = 1;
 j < large.length; ++ j) {
 if (smallest > large [j]) {
 smallest = large [j];
 smallestIndex = j;
 }
 }
 for (i = large.length; i < array.length; i ++) {
 if (smallest < array [i]) {
 large [smallestIndex] = array [i];
 smallest = large [0];
 smallestIndex = 0;
 for (int j = 1;
 j < large.length; ++ j) {
 if (smallest > large [j]) {
 smallest = large [j];
 smallestIndex = j;
 }
 }
 }
 }
 for (int j = 0;
 j < large.length; j ++) {
 System.out.println (""Largest 5 : "" + large [j]);
 }
 System.out.println ();
 System.out.println (""Largest is: "" + getHighest (large));
 }",1
338,"public static boolean deleteRecursive (File path) throws FileNotFoundException {
 if (! path.exists ()) throw new FileNotFoundException (path.getAbsolutePath ());
 boolean ret = true;
 if (path.isDirectory ()) {
 for (File f : path.listFiles ()) {
 ret = ret && deleteRecursive (f);
 }
 }
 return ret && path.delete ();
 }","public static void deleteRecursive (File path) {
 path.listFiles (new FileFilter () {
 @Override
 public boolean accept (File pathname) {
 if (pathname.isDirectory ()) {
 pathname.listFiles (this);
 pathname.delete ();
 } else {
 pathname.delete ();
 }
 return false;
 }}
 );
 path.delete ();
 }",1
1802,"public static String [] tokenizer (String text, String [] delims) {
 for (String delim : delims) {
 int i = text.indexOf (delim);
 if (i >= 0) {
 String [] tail = tokenizer (text.substring (i + delim.length ()), delims);
 String [] list = new String [tail.length + 2];
 list [0] = text.substring (0, i);
 list [1] = delim;
 System.arraycopy (tail, 0, list, 2, tail.length);
 return list;
 }
 }
 return new String [] {text};
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",0
277,"public int sum () {
 sum = 0;
 final IntPredicate positive = v -> v > 0;
 final Index positiveIndex = new Index (positive);
 final Index negativeIndex = new Index (positive.negate ());
 while (positiveIndex.index < array.length || negativeIndex.index < array.length) {
 sum += sum < 0 ? sum (positiveIndex, negativeIndex) : sum (negativeIndex, positiveIndex);
 }
 return sum;
 }","private int sum (@NotNull
 Index mainIndex,@NotNull
 Index secondaryIndex) {
 int localSum = 0;
 while (mainIndex.index < array.length && secondaryIndex.sign.test (array [mainIndex.index])) {
 mainIndex.index ++;
 }
 if (mainIndex.index < array.length) {
 localSum += array [mainIndex.index ++];
 } else {
 for (; secondaryIndex.index < array.length; secondaryIndex.index ++) {
 if (secondaryIndex.sign.test (array [secondaryIndex.index])) {
 localSum += array [secondaryIndex.index];
 }
 }
 }
 return localSum;
 }",1
1303,"public static void main (String...a) {
 System.out.print (""Enter the String"");
 Scanner sc = new Scanner (System.in);
 String st = sc.nextLine ();
 int [] ar = new int [256];
 for (int i = 0;
 i < st.length (); i ++) {
 ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
 }
 for (int i = 0;
 i < 256; i ++) {
 char ch = (char) i;
 if (ar [i] > 0) {
 if (ar [i] == 1) {
 System.out.print (ch);
 } else {
 System.out.print (ch + """" + ar [i]);
 }
 }
 }
 }","static boolean unsignedMultiplyOverflows (final long a, final long b) {
 if (a == 0 || b == 0) {
 return false;
 }
 final long aHalf = a>>> 1;
 final long bHalf = b>>> 1;
 final byte aLastBit = (byte) (a & 1);
 final byte bLastBit = (byte) (b & 1);
 if (aLastBit == 0) {
 return Long.MAX_VALUE / b < aHalf;
 } else if (bLastBit == 0) {
 return Long.MAX_VALUE / a < bHalf;
 } else {
 return (Long.MAX_VALUE - bHalf) / b < aHalf;
 }
 }",0
679,"public void onActivityResult (int requestCode, int resultCode, Intent data) {
 super.onActivityResult (requestCode, resultCode, data);
 if (requestCode == CAMERA_RESULT) {
 if (resultCode == Activity.RESULT_OK) {
 String galleryImatePath = SD_CARD_TEMP_DIR;
 File f = new File (galleryImatePath);
 try {
 Bitmap cameraBitmap = null;
 BitmapFactory.Options bmOptions = new BitmapFactory.Options ();
 bmOptions.inJustDecodeBounds = false;
 bmOptions.inPurgeable = true;
 bmOptions.inBitmap = cameraBitmap;
 bmOptions.inMutable = true;
 cameraBitmap = BitmapFactory.decodeFile (galleryImatePath, bmOptions);
 ByteArrayOutputStream bos = new ByteArrayOutputStream ();
 cameraBitmap.compress (Bitmap.CompressFormat.JPEG, 50, bos);
 ExifInterface exif = new ExifInterface (galleryImatePath);
 float rotation = exif.getAttributeInt (ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
 System.out.println (rotation);
 float rotationInDegrees = exifToDegrees (rotation);
 System.out.println (rotationInDegrees);
 Matrix matrix = new Matrix ();
 matrix.postRotate (rotationInDegrees);
 final Bitmap rotatedBitmap = Bitmap.createBitmap (cameraBitmap, 0, 0, cameraBitmap.getWidth (), cameraBitmap.getHeight (), matrix, true);
 FileOutputStream fos = new FileOutputStream (galleryImatePath);
 rotatedBitmap.compress (Bitmap.CompressFormat.JPEG, 50, fos);
 fos.write (bos.toByteArray ());
 cameraBitmap.recycle ();
 System.gc ();
 fos.flush ();
 fos.close ();
 Capdialog = new Dialog (AddToDo.this, android.R.style.Theme_NoTitleBar_Fullscreen);
 Capdialog.setContentView (R.layout.captiondialog);
 Capdialog.setCancelable (false);
 TextView cancel = (TextView) Capdialog.findViewById (R.id.cancel);
 TextView done = (TextView) Capdialog.findViewById (R.id.done);
 Capdialog.getWindow ().setSoftInputMode (WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
 ImageView img = (ImageView) Capdialog.findViewById (R.id.image);
 img.setImageBitmap (rotatedBitmap);
 } catch (Exception e) {
 }
 }
 }
 }","protected void onActivityResult (int requestCode, int resultCode, Intent data) {
 super.onActivityResult (requestCode, resultCode, data);
 if (requestCode == 0) {
 try {
 Bitmap cameraBitmap;
 cameraBitmap = BitmapFactory.decodeFile (myFilesDir + ""/temp.jpg"");
 Bitmap.createBitmap (cameraBitmap);
 ivPhoto.setImageBitmap (cameraBitmap);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }
 }",1
939,"public int [] solution (String S, int [] P, int [] Q) {
 final char [] characterInput = S.toCharArray ();
 final int [] integerInput = new int [characterInput.length];
 for (int counter = 0;
 counter < characterInput.length; counter ++) {
 integerInput [counter] = characterMapping.get (characterInput [counter]);
 }
 int [] result = new int [P.length];
 for (int index = 0;
 index < P.length; index ++) {
 if (P [index] == Q [index]) {
 result [index] = integerInput [P [index]];
 break;
 }
 final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
 final int minimumValue = minimum (subArray);
 result [index] = minimumValue;
 }
 return result;
 }","public int [] solution (String S, int [] P, int [] Q) {
 int [] answer = new int [P.length];
 char [] chars = S.toCharArray ();
 int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
 for (int iii = 0;
 iii < chars.length; iii ++) {
 if (iii > 0) {
 for (int zzz = 0;
 zzz < 4; zzz ++) {
 cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
 }
 }
 switch (chars [iii]) {
 case 'A' :
 cumulativeAnswers [0] [iii + 1] ++;
 break;
 case 'C' :
 cumulativeAnswers [1] [iii + 1] ++;
 break;
 case 'G' :
 cumulativeAnswers [2] [iii + 1] ++;
 break;
 case 'T' :
 cumulativeAnswers [3] [iii + 1] ++;
 break;
 }
 }
 for (int iii = 0;
 iii < P.length; iii ++) {
 for (int zzz = 0;
 zzz < 4; zzz ++) {
 if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
 answer [iii] = zzz + 1;
 break;
 }
 }
 }
 return answer;
 }",1
1209,"public int sum13 (int [] nums) {
 int sum = 0;
 for (int i = 0;
 i < nums.length; i ++) {
 if (nums [i] != 13) {
 sum += nums [i];
 } else {
 i ++;
 }
 }
 return sum;
 }","public static void shuffle (Object [] a) {
 int n = a.length;
 for (int i = 0;
 i < n; i ++) {
 int r = i + (int) (Math.random () * (n - i));
 Object swap = a [r];
 a [r] = a [i];
 a [i] = swap;
 }
 }",0
1052,"public void actionPerformed (ActionEvent e) {
 JPanel panel = new JPanel ();
 panel.add (new JLabel (""Hello""));
 panel.setBorder (new MatteBorder (0, 0, 1, 0, Color.GRAY));
 GridBagConstraints gbc = new GridBagConstraints ();
 gbc.gridwidth = GridBagConstraints.REMAINDER;
 gbc.weightx = 1;
 gbc.fill = GridBagConstraints.HORIZONTAL;
 mainList.add (panel, gbc, 0);
 validate ();
 repaint ();
 }","public static void main (String args []) {
 inp = new Scanner (System.in);
 String str = inp.nextLine ();
 List < Character > arrlist = new ArrayList < Character > ();
 for (int i = 0;
 i < str.length (); i ++) {
 arrlist.add (str.charAt (i));
 }
 for (int i = 0;
 i < str.length (); i ++) {
 int freq = Collections.frequency (arrlist, str.charAt (i));
 System.out.println (""Frequency of "" + str.charAt (i) + ""  is:   "" + freq);
 }
 }",0
706,"private static void createAndShowGUI () {
 final JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setLayout (new FlowLayout ());
 JButton readerStopButton_ = new JButton ();
 readerStopButton_.setFocusPainted (false);
 readerStopButton_.setBackground (UIManager.getDefaults ().getColor (""Button.light""));
 readerStopButton_.setFont (new Font (""Geneva"", 0, 12));
 readerStopButton_.setText (""<html><center>READER<br>STOP</center></html>\n"");
 readerStopButton_.setHorizontalTextPosition (SwingConstants.CENTER);
 frame.add (readerStopButton_);
 frame.pack ();
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }","private static void createAndShowGUI () {
 final JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setLayout (new FlowLayout ());
 JPanel operationButtons_ = new JPanel ();
 JButton readerStopButton_ = new JButton ();
 readerStopButton_.setBackground (javax.swing.UIManager.getDefaults ().getColor (""Button.light""));
 readerStopButton_.setFont (new java.awt.Font (""Geneva"", 0, 12));
 readerStopButton_.setText (""<html><center>READER<br>STOP</center></html>\n"");
 readerStopButton_.setToolTipText (""<html><b>Stop</b> button is currently inactive.  "");
 readerStopButton_.setMargin (new Insets (0, - 30, 0, - 30));
 readerStopButton_.setPreferredSize (new Dimension (66, 40));
 operationButtons_.add (readerStopButton_);
 readerStopButton_ = new JButton ();
 readerStopButton_.setBackground (javax.swing.UIManager.getDefaults ().getColor (""Button.light""));
 readerStopButton_.setFont (new java.awt.Font (""Geneva"", 0, 12));
 readerStopButton_.setText (""<html><center>READER<br>STOP</center></html>\n"");
 readerStopButton_.setToolTipText (""<html><b>Stop</b> button is currently inactive.  "");
 System.out.println (readerStopButton_.getPreferredSize ());
 readerStopButton_.setPreferredSize (new Dimension (66, 40));
 operationButtons_.add (readerStopButton_);
 operationButtons_.add (new JButton (""yCoder.com""));
 frame.add (operationButtons_);
 frame.pack ();
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }",1
529,"public void type (char c) {
 keyPress (VK_ALT);
 keyPress (VK_NUMPAD0);
 keyRelease (VK_NUMPAD0);
 String altCode = Integer.toString (c);
 for (int i = 0;
 i < altCode.length (); i ++) {
 c = (char) (altCode.charAt (i) + '0');
 keyPress (c);
 keyRelease (c);
 }
 keyRelease (VK_ALT);
 }","public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }",1
1859,"public String startOz (String str) {
 int len = str.length ();
 if (len < 1) return new String ("""");
 if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String (""oz"");
 if (str.charAt (0) == 'o') return new String (""o"");
 if (str.charAt (1) == 'z') return new String (""z"");
 return new String ("""");
 }","public void deleteRecursive (File path) {
 File [] c = path.listFiles ();
 System.out.println (""Cleaning out folder:"" + path.toString ());
 for (File file : c) {
 if (file.isDirectory ()) {
 System.out.println (""Deleting file:"" + file.toString ());
 deleteRecursive (file);
 file.delete ();
 } else {
 file.delete ();
 }
 }
 path.delete ();
 }",0
1722,"private void deleteRecursive (File f) throws Exception {
 try {
 if (f.isDirectory ()) {
 for (File c : f.listFiles ()) {
 deleteRecursive (c);
 }
 }
 if (! f.delete ()) {
 throw new Exception (""Delete command returned false for file: "" + f);
 }
 } catch (Exception e) {
 throw new Exception (""Failed to delete the folder: "" + f, e);
 }
 }","public void sort (int [] input, Speed speed) {
 SortStrategy strategy = null;
 switch (speed) {
 case SLOW :
 strategy = new SlowBubbleSortStrategy ();
 break;
 case MEDIUM :
 strategy = new MediumInsertationSortStrategy ();
 break;
 case FAST :
 strategy = new FastQuickSortStrategy ();
 break;
 default :
 strategy = new MediumInsertationSortStrategy ();
 }
 strategy.sort (input);
 }",0
1950,"public static String center (String text, int len) {
 if (len <= text.length ()) return text.substring (0, len);
 int before = (len - text.length ()) / 2;
 if (before == 0) return String.format (""%-"" + len + ""s"", text);
 int rest = len - before;
 return String.format (""%"" + before + ""s%-"" + rest + ""s"", """", text);
 }","public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }",0
854,"public static boolean isPermutation (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int checker = 0;
 for (int i = 0;
 i < s1.length (); i ++) {
 checker ^= s1.charAt (i) ^ s2.charAt (i);
 }
 return checker == 0;
 }","public static boolean isPermutation (String str1, String str2) {
 char [] x = str1.toCharArray ();
 char [] y = str2.toCharArray ();
 Arrays.sort (x);
 Arrays.sort (y);
 if (Arrays.equals (x, y)) return true;
 return false;
 }",1
1692,"public void run () {
 System.out.println (i);
 try {
 cb.await ();
 i = i + 3;
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 }","int isPerfectSquare (int n) {
 int h = n & 0xF;
 if (h > 9) return 0;
 if (h != 2 && h != 3 && h != 5 && h != 6 && h != 7 && h != 8) {
 int t = (int) floor (sqrt ((double) n) + 0.5);
 return t * t == n;
 }
 return 0;
 }",0
401,"public static String [] tokenizer (String text, String [] delims) {
 for (String delim : delims) {
 int i = text.indexOf (delim);
 if (i >= 0) {
 String [] tail = tokenizer (text.substring (i + delim.length ()), delims);
 String [] list = new String [tail.length + 2];
 list [0] = text.substring (0, i);
 list [1] = delim;
 System.arraycopy (tail, 0, list, 2, tail.length);
 return list;
 }
 }
 return new String [] {text};
 }","public Object [] tokenizer (String value, String [] delimeters) {
 List < String > list = new ArrayList < String > ();
 for (String s : delimeters) {
 if (value.contains (s)) {
 String [] strArr = value.split (""\\"" + s);
 for (String str : strArr) {
 list.add (str);
 if (! list.contains (s)) {
 list.add (s);
 }
 }
 }
 }
 Object [] newValues = list.toArray ();
 return newValues;
 }",1
1416,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","public static void main (String [] args) {
 String string = ""check duplicate charcters in string"";
 string = string.toLowerCase ();
 char [] charAr = string.toCharArray ();
 Arrays.sort (charAr);
 for (int i = 1;
 i < charAr.length;) {
 int count = recursiveMethod (charAr, i, 1);
 if (count > 1) {
 System.out.println (""'"" + charAr [i] + ""' comes "" + count + "" times"");
 i = i + count;
 } else i ++;
 }
 }",0
1848,"public int [] solution (String S, int [] P, int [] Q) {
 int [] answer = new int [P.length];
 char [] chars = S.toCharArray ();
 int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
 for (int iii = 0;
 iii < chars.length; iii ++) {
 if (iii > 0) {
 for (int zzz = 0;
 zzz < 4; zzz ++) {
 cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
 }
 }
 switch (chars [iii]) {
 case 'A' :
 cumulativeAnswers [0] [iii + 1] ++;
 break;
 case 'C' :
 cumulativeAnswers [1] [iii + 1] ++;
 break;
 case 'G' :
 cumulativeAnswers [2] [iii + 1] ++;
 break;
 case 'T' :
 cumulativeAnswers [3] [iii + 1] ++;
 break;
 }
 }
 for (int iii = 0;
 iii < P.length; iii ++) {
 for (int zzz = 0;
 zzz < 4; zzz ++) {
 if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
 answer [iii] = zzz + 1;
 break;
 }
 }
 }
 return answer;
 }","public static void main (String [] args) {
 Integer [] arr = new Integer [1000];
 for (int i = 0;
 i < arr.length; i ++) {
 arr [i] = i;
 }
 Collections.shuffle (Arrays.asList (arr));
 System.out.println (Arrays.toString (arr));
 }",0
669,"public boolean onOptionsItemSelected (MenuItem item) {
 switch (item.getItemId ()) {
 case android.R.id.home :
 NavUtils.navigateUpFromSameTask (this);
 return true;
 default :
 return super.onOptionsItemSelected (item);
 }
 }","@Override
 public boolean onOptionsItemSelected (MenuItem item) {
 switch (item.getItemId ()) {
 case android.R.id.home :
 if (getParentActivityIntent () == null) {
 Log.i (TAG, ""You have forgotten to specify the parentActivityName in the AndroidManifest!"");
 onBackPressed ();
 } else {
 NavUtils.navigateUpFromSameTask (this);
 }
 return true;
 default :
 return super.onOptionsItemSelected (item);
 }
 }",1
249,"public void actionPerformed (ActionEvent e) {
 JFrame owner = (JFrame) SwingUtilities.getWindowAncestor ((Component) e.getSource ());
 final JDialog dialog = new JDialog (owner, ""Dialog"", ModalityType.APPLICATION_MODAL);
 dialog.getContentPane ().add (panel);
 dialog.pack ();
 dialog.setLocation (0, 0);
 int delay = 20;
 new Timer (delay, new ActionListener () {
 int x = 0;
 int y = 0;
 Dimension scrn = Toolkit.getDefaultToolkit ().getScreenSize ();
 @Override
 public void actionPerformed (ActionEvent e) {
 int maxX = scrn.width - dialog.getWidth ();
 int maxY = scrn.height - dialog.getHeight ();
 if (x < maxX && y < maxY) {
 x ++;
 y ++;
 dialog.setLocation (x, y);
 } else {
 ((Timer) e.getSource ()).stop ();
 }
 }}
 ).start ();
 dialog.setVisible (true);
 }","public void actionPerformed (ActionEvent e) {
 int maxX = scrn.width - dialog.getWidth ();
 int maxY = scrn.height - dialog.getHeight ();
 if (x < maxX && y < maxY) {
 x ++;
 y ++;
 dialog.setLocation (x, y);
 } else {
 ((Timer) e.getSource ()).stop ();
 }
 }",1
959,"public boolean importData (TransferHandler.TransferSupport info) {
 if (! canImport (info)) {
 return false;
 }
 TransferHandler.DropLocation tdl = info.getDropLocation ();
 if (! (tdl instanceof JTable.DropLocation)) {
 return false;
 }
 JTable.DropLocation dl = (JTable.DropLocation) tdl;
 JTable target = (JTable) info.getComponent ();
 DefaultTableModel model = (DefaultTableModel) target.getModel ();
 int index = dl.getRow ();
 int max = model.getRowCount ();
 if (index < 0 || index > max) {
 index = max;
 }
 addIndex = index;
 target.setCursor (Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
 try {
 Object [] values = (Object []) info.getTransferable ().getTransferData (localObjectFlavor);
 addCount = values.length;
 for (int i = 0;
 i < values.length; i ++) {
 int idx = index ++;
 model.insertRow (idx, (Vector) values [i]);
 target.getSelectionModel ().addSelectionInterval (idx, idx);
 }
 return true;
 } catch (UnsupportedFlavorException | IOException ex) {
 ex.printStackTrace ();
 }
 return false;
 }","public boolean importData (JComponent c, Transferable t) {
 if (canImport (c, t.getTransferDataFlavors ())) {
 try {
 String str = (String) t.getTransferData (DataFlavor.stringFlavor);
 importString (c, str);
 return true;
 } catch (UnsupportedFlavorException ufe) {
 } catch (IOException ioe) {
 }
 }
 return false;
 }",1
608,"public static void main (String [] args) {
 double numIterations = 10;
 long exceptionPlusCatchTime = 0, excepTime = 0, strTime = 0, throwTime = 0;
 for (int i = 0;
 i < numIterations; i ++) {
 exceptionPlusCatchTime += exceptionPlusCatchBlock ();
 excepTime += createException ();
 throwTime += catchBlock ();
 strTime += createString ();
 }
 System.out.println (""new Exception + throw/catch = "" + exceptionPlusCatchTime / numIterations);
 System.out.println (""new Exception only          = "" + excepTime / numIterations);
 System.out.println (""throw/catch only            = "" + throwTime / numIterations);
 System.out.println (""new String (benchmark)      = "" + strTime / numIterations);
 }","public static void main (String [] args) {
 long throwCatchTime = 0, newExceptionTime = 0, newObjectTime = 0, noStackExceptionTime = 0;
 for (int i = 0;
 i < 30; i ++) {
 throwCatchTime += throwCatchLoop ();
 newExceptionTime += newExceptionLoop ();
 newObjectTime += newObjectLoop ();
 noStackExceptionTime += newNoStackExceptionLoop ();
 }
 System.out.println (""throwCatchTime = "" + throwCatchTime / 30);
 System.out.println (""newExceptionTime = "" + newExceptionTime / 30);
 System.out.println (""newStringTime = "" + newObjectTime / 30);
 System.out.println (""noStackExceptionTime = "" + noStackExceptionTime / 30);
 }",1
433,"public void actionPerformed (ActionEvent e) {
 ImageIcon saveIcon = new ImageIcon (""save-icon.png"");
 int askSave = JOptionPane.showConfirmDialog (null, ""Save current image?"", """", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, saveIcon);
 if (askSave == JOptionPane.YES_OPTION) {
 saveImage ();
 System.exit (0);
 } else {
 System.exit (0);
 }
 }","public void actionPerformed (ActionEvent e) {
 ImageIcon widthIcon = new ImageIcon (""LR-arrows.png"");
 String scaleWidth = (String) JOptionPane.showInputDialog (null, ""What should the new width be?"", """", JOptionPane.QUESTION_MESSAGE, widthIcon, null, null);
 ImageIcon heightIcon = new ImageIcon (""UD-arrows.png"");
 String scaleHeight = (String) JOptionPane.showInputDialog (null, ""What should the new height be?"", """", JOptionPane.QUESTION_MESSAGE, widthIcon, null, null);
 double x = Double.parseDouble (scaleWidth);
 double y = Double.parseDouble (scaleHeight);
 int newWidth = (int) x;
 int newHeight = (int) y;
 frame.setSize (newWidth, newHeight);
 scale (newWidth, newHeight);
 }",1
952,"public void copyFolder (File src, File dest) throws IOException {
 try (Stream < Path > stream = Files.walk (src.toPath ())) {
 stream.forEachOrdered (sourcePath -> {
 try {
 Files.copy (sourcePath, src.toPath ().resolve (dest.toPath ().relativize (sourcePath)));
 } catch (Exception e) {
 e.printStackTrace ();
 }
 });
 }
 }","static void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 String strAbsPathSrc = src.getAbsolutePath ();
 String strAbsPathDest = dest.getAbsolutePath ();
 try {
 Files.walkFileTree (src.toPath (), new SimpleFileVisitor < Path > () {
 @Override
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
 if (dstFile.exists ()) return FileVisitResult.CONTINUE;
 if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
 Files.copy (file, dstFile.toPath ());
 return FileVisitResult.CONTINUE;
 }}
 );
 } catch (IOException e) {
 return;
 }
 return;
 }",1
851,"public static boolean isBalanced (String expression) {
 if ((expression.length () % 2) == 1) return false;
 else {
 Stack < Character > s = new Stack < > ();
 for (char bracket : expression.toCharArray ()) switch (bracket) {
 case '{' :
 s.push ('}');
 break;
 case '(' :
 s.push (')');
 break;
 case '[' :
 s.push (']');
 break;
 default :
 if (s.isEmpty () || bracket != s.peek ()) {
 return false;
 }
 s.pop ();
 }
 return s.isEmpty ();
 }
 }","public static boolean isBalanced (String str) {
 boolean result = false;
 if (str.length () < 2) return false;
 Stack < Character > stack = new Stack < > ();
 for (int i = 0;
 i < str.length (); i ++) {
 char ch = str.charAt (i);
 if (! parenthesesMapRight.containsKey (ch) && ! parenthesesMapLeft.containsKey (ch)) {
 continue;
 }
 if (parenthesesMapLeft.containsKey (ch)) {
 stack.push (ch);
 } else {
 if (! stack.isEmpty () && stack.pop () == parenthesesMapRight.get (ch).charValue ()) {
 result = true;
 } else {
 return false;
 }
 }
 }
 if (! stack.isEmpty ()) return result = false;
 return result;
 }",1
1656,"public static void main (String [] args) throws Exception {
 AuthMethod auth = new TokenAuthMethod (API_KEY, API_SECRET);
 NexmoClient client = new NexmoClient (auth);
 TextMessage message = new TextMessage (FROM_NUMBER, TO_NUMBER, ""Hello from Nexmo!"");
 SmsSubmissionResult [] responses = client.getSmsClient ().submitMessage (message);
 for (SmsSubmissionResult response : responses) {
 System.out.println (response);
 }
 }","public void put (K key, V val) {
 while (currentSize >= maxSize) {
 freeSpace ();
 }
 if (map.containsKey (key)) {
 get (key);
 return;
 }
 ListNode < K > ln = queue.add (key);
 ValueHolder < K, V > rv = new ValueHolder < K, V > (val, ln);
 map.put (key, rv);
 currentSize ++;
 }",0
567,"public static void printTable (String [] countries, int [] populations) {
 if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
 return;
 }
 int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
 int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.printf (""%-"" + longestCountry + ""s | %"" + longestPop + ""d%n"", countries [i], populations [i]);
 }
 }","public static void printTable (String [] countries, int [] populations) {
 if (countries.length != 0) {
 int longestNameInput = countries [0].length ();
 int longestPopInput = String.valueOf (populations [0]).length ();
 for (int i = 0;
 i < countries.length; i ++) {
 int countLength = countries [i].length ();
 int popLength = String.valueOf (populations [i]).length ();
 if (countLength > longestNameInput) longestNameInput = countLength;
 if (popLength > longestPopInput) longestPopInput = popLength;
 }
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.print (countries [i]);
 for (int j = 0;
 j < (longestNameInput - countries [i].length ()); j ++) System.out.print ("" "");
 System.out.print ("" | "");
 for (int k = 0;
 k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print ("" "");
 System.out.println (populations [i]);
 }
 }
 }",1
355,"public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) {
 return false;
 }
 s1 = s1.toLowerCase ();
 s2 = s2.toLowerCase ();
 char [] c1 = s1.toCharArray ();
 char [] c2 = s2.toCharArray ();
 Arrays.sort (c1);
 Arrays.sort (c2);
 String sc1 = new String (c1);
 String sc2 = new String (c2);
 return sc1.equals (sc2);
 }","static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int n = s1.length ();
 int [] charMap = new int [256];
 for (int i = 0;
 i < n; i ++) {
 char c1 = s1.charAt (i);
 charMap [c1] ++;
 char c2 = s2.charAt (i);
 charMap [c2] --;
 }
 for (int i = 0;
 i < charMap.length; i ++) {
 if (charMap [i] != 0) return false;
 }
 return true;
 }",1
1526,"public static boolean contains (String a, String b) {
 int diff = a.length () - b.length ();
 while (a.length () > 0) {
 b = b.replace (a.substring (0, 1), """");
 a = a.replace (a.substring (0, 1), """");
 if (diff != a.length () - b.length ()) return false;
 }
 return true;
 }","protected void onCreate (Bundle savedInstanceState) {
 super.onCreate (savedInstanceState);
 setContentView (R.layout.buttons);
 initializeLookup ();
 mEditText = (EditText) findViewById (R.id.edit_text);
 mButton00 = (Button) findViewById (R.id.button_0_0);
 mButton10 = (Button) findViewById (R.id.button_1_0);
 mButton01 = (Button) findViewById (R.id.button_0_1);
 mButton11 = (Button) findViewById (R.id.button_1_1);
 mButton02 = (Button) findViewById (R.id.button_0_2);
 mButton12 = (Button) findViewById (R.id.button_1_2);
 mButton00.setOnClickListener (this);
 mButton10.setOnClickListener (this);
 mButton01.setOnClickListener (this);
 mButton11.setOnClickListener (this);
 mButton02.setOnClickListener (this);
 mButton12.setOnClickListener (this);
 mHandleInputRunnable = new Runnable () {
 @Override
 public void run () {
 handleAlarmTrigger ();
 }}
 ;
 }",0
1918,"public int getLastFriday (int month, int year) {
 Calendar cal = Calendar.getInstance ();
 cal.set (year, month, 1, 0, 0, 0);
 cal.set (Calendar.MILLISECOND, 0);
 int friday = - 1;
 while (cal.get (Calendar.MONTH) == month) {
 if (cal.get (Calendar.DAY_OF_WEEK) == Calendar.FRIDAY) {
 friday = cal.get (Calendar.DAY_OF_MONTH);
 cal.add (Calendar.DAY_OF_MONTH, 7);
 } else {
 cal.add (Calendar.DAY_OF_MONTH, 1);
 }
 }
 return friday;
 }","public boolean importData (TransferHandler.TransferSupport info) {
 if (! canImport (info)) {
 return false;
 }
 TransferHandler.DropLocation tdl = info.getDropLocation ();
 if (! (tdl instanceof JTable.DropLocation)) {
 return false;
 }
 JTable.DropLocation dl = (JTable.DropLocation) tdl;
 JTable target = (JTable) info.getComponent ();
 DefaultTableModel model = (DefaultTableModel) target.getModel ();
 int index = dl.getRow ();
 int max = model.getRowCount ();
 if (index < 0 || index > max) {
 index = max;
 }
 addIndex = index;
 target.setCursor (Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
 try {
 Object [] values = (Object []) info.getTransferable ().getTransferData (localObjectFlavor);
 addCount = values.length;
 for (int i = 0;
 i < values.length; i ++) {
 int idx = index ++;
 model.insertRow (idx, (Vector) values [i]);
 target.getSelectionModel ().addSelectionInterval (idx, idx);
 }
 return true;
 } catch (UnsupportedFlavorException | IOException ex) {
 ex.printStackTrace ();
 }
 return false;
 }",0
1326,"public void run () {
 countCalled ++;
 if (countCalled < maxCalled) {
 if (countCalled % 3 == 0) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 System.out.println (""Push a new event to EDT"");
 frame1.getContentPane ().setBackground (Color.red);
 isThereReallyEDT ();
 }}
 );
 } else {
 if (this.getExecutionTime () < ALLOWED_TARDINESS) {
 countRun ++;
 isThereReallyEDT ();
 }
 }
 } else {
 System.out.println (""Terminating this madness"");
 System.exit (0);
 }
 }","public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }",0
1163,"public void propertyChange (PropertyChangeEvent pce) {
 if (MVC_Model.PROGRESS.equals (pce.getPropertyName ())) {
 view.setProgress ((Integer) pce.getNewValue ());
 }
 if (MVC_Model.PROGRESS1.equals (pce.getPropertyName ())) {
 view.setProgressLabel ((String) pce.getNewValue ());
 }
 if (MVC_Model.PROGRESS2.equals (pce.getPropertyName ())) {
 view.setIconLabel ((Icon) pce.getNewValue ());
 }
 }","public static void main (String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Enter String"");
 String s = br.readLine ();
 System.out.print (""Enter Integer:"");
 try {
 int i = Integer.parseInt (br.readLine ());
 } catch (NumberFormatException nfe) {
 System.err.println (""Invalid Format!"");
 }
 }",0
1447,"public static void main (String [] args) throws ParseException {
 String st1 = ""2015-07-24T09:39:14.000Z"";
 String st2 = ""2015-07-24T09:45:44.000Z"";
 String time1 = st1.substring (st1.indexOf (""T"") + 1, st1.indexOf ("".0""));
 String time2 = st2.substring (st2.indexOf (""T"") + 1, st2.indexOf ("".0""));
 Date dateTime1 = new java.text.SimpleDateFormat (""HH:mm"").parse (time1);
 Date dateTime2 = new java.text.SimpleDateFormat (""HH:mm"").parse (time2);
 System.out.println (dateTime1.after (dateTime2));
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String lsStart = """";
 String lsInsert = """";
 String lsEnd = """";
 String lsText = """";
 Log.d (""debug"", moPattern.toString ());
 Log.d (""debug"", ""source: "" + source + "", start: "" + start + "", end:"" + end + "", dest: "" + dest + "", dstart: "" + dstart + "", dend: "" + dend);
 lsText = dest.toString ();
 if (lsText.length () > 0) {
 lsStart = lsText.substring (0, dstart);
 Log.d (""debug"", ""lsStart : "" + lsStart);
 if (source != """") {
 lsInsert = source.toString ();
 Log.d (""debug"", ""lsInsert: "" + lsInsert);
 }
 lsEnd = lsText.substring (dend);
 Log.d (""debug"", ""lsEnd   : "" + lsEnd);
 lsText = lsStart + lsInsert + lsEnd;
 Log.d (""debug"", ""lsText  : "" + lsText);
 }
 Matcher loMatcher = moPattern.matcher (lsText);
 Log.d (""debug"", ""loMatcher.matches(): "" + loMatcher.matches () + "", lsText: "" + lsText);
 if (! loMatcher.matches ()) {
 return """";
 }
 return null;
 }",0
1430,"public void run () {
 synchronized (obj1) {
 latch.countDown ();
 try {
 latch.await ();
 } catch (InterruptedException e) {
 throw new RuntimeException ();
 }
 synchronized (obj2) {
 System.out.println (""Thread finished"");
 }
 }
 }","public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
 Log.d (TAG, ""Permission callback called-------"");
 switch (requestCode) {
 case REQUEST_ID_MULTIPLE_PERMISSIONS :
 {
 Map < String, Integer > perms = new HashMap < > ();
 perms.put (Manifest.permission.SEND_SMS, PackageManager.PERMISSION_GRANTED);
 perms.put (Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);
 if (grantResults.length > 0) {
 for (int i = 0;
 i < permissions.length; i ++) perms.put (permissions [i], grantResults [i]);
 if (perms.get (Manifest.permission.SEND_SMS) == PackageManager.PERMISSION_GRANTED && perms.get (Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
 Log.d (TAG, ""sms & location services permission granted"");
 } else {
 Log.d (TAG, ""Some permissions are not granted ask again "");
 if (ActivityCompat.shouldShowRequestPermissionRationale (this, Manifest.permission.SEND_SMS) || ActivityCompat.shouldShowRequestPermissionRationale (this, Manifest.permission.ACCESS_FINE_LOCATION)) {
 showDialogOK (""SMS and Location Services Permission required for this app"", new DialogInterface.OnClickListener () {
 @Override
 public void onClick (DialogInterface dialog, int which) {
 switch (which) {
 case DialogInterface.BUTTON_POSITIVE :
 checkAndRequestPermissions ();
 break;
 case DialogInterface.BUTTON_NEGATIVE :
 break;
 }
 }}
 );
 } else {
 Toast.makeText (this, ""Go to settings and enable permissions"", Toast.LENGTH_LONG).show ();
 }
 }
 }
 }}
 }",0
250,"public void run () {
 final CardLayout cards = new CardLayout ();
 final JPanel gui = new JPanel (cards);
 gui.setBorder (new EmptyBorder (100, 300, 100, 300));
 gui.setBackground (Color.WHITE);
 gui.add (new JLabel (icon1), ""label "" + 1);
 gui.add (new JLabel (icon2), ""label "" + 2);
 gui.add (new JLabel (icon3), ""label "" + 3);
 gui.add (new JLabel (icon4), ""label "" + 4);
 gui.add (new JLabel (icon3), ""label "" + 5);
 gui.add (new JLabel (icon2), ""label "" + 6);
 ActionListener animate = new ActionListener () {
 long lastTime = - 1;
 int frameCount = 0;
 String timeString;
 DecimalFormat format = new DecimalFormat (""0.00"");
 @Override
 public void actionPerformed (ActionEvent e) {
 long time = System.nanoTime ();
 if (lastTime < 0) {
 lastTime = time;
 timeString = ""00.00"";
 } else if (time - lastTime > 1000) {
 long duration = time - lastTime;
 double fps = 1000000000d * (double) frameCount / (double) duration;
 timeString = format.format (fps);
 frameCount = 0;
 lastTime = time;
 System.out.println (timeString);
 }
 frameCount ++;
 cards.next (gui);
 }}
 ;
 Timer timer = new Timer (5, animate);
 timer.start ();
 JOptionPane.showMessageDialog (null, gui);
 timer.stop ();
 }","public void run () {
 try {
 UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
 } catch (Exception ex) {
 }
 final JPanel panel = new JPanel ();
 panel.setBackground (Color.RED);
 final JFrame frame = new JFrame (""Test"");
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.add (panel);
 JButton change = new JButton (""Switch"");
 change.addActionListener (new ActionListener () {
 @Override
 public void actionPerformed (ActionEvent e) {
 long start = System.currentTimeMillis ();
 frame.remove (panel);
 long end = System.currentTimeMillis ();
 JPanel newPanel = new JPanel ();
 newPanel.setBackground (Color.BLUE);
 frame.add (newPanel);
 frame.validate ();
 }}
 );
 frame.add (change, BorderLayout.SOUTH);
 frame.setSize (100, 100);
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }",1
1830,"public static String myTrim (String input, String list) {
 StringBuilder result = new StringBuilder ();
 char c;
 for (int i = 0;
 i < input.length (); i ++) {
 c = input.charAt (i);
 if (list.indexOf (c) < 0) result.append (c);
 }
 return result.toString ();
 }","public static void main (String [] args) {
 char [] num1 = ""127"".toCharArray ();
 char [] num2 = ""32"".toCharArray ();
 int [] intermediate = new int [num1.length];
 for (int i = 0;
 i < num1.length; i ++) {
 for (int j = 0;
 j < num2.length; j ++) {
 int d1 = num1 [num1.length - i - 1] - '0';
 int d2 = num2 [num2.length - j - 1] - '0';
 intermediate [i] += d1 * d2 * (int) Math.pow (10, j);
 System.out.printf (""  %d X %d = %d\n"", d1, d2, intermediate [i]);
 }
 intermediate [i] *= (int) Math.pow (10, i);
 System.out.println ("" intermediate : "" + intermediate [i]);
 }
 int sum = 0;
 for (int i : intermediate) {
 sum += i;
 }
 System.out.println (""Sum is = "" + sum);
 }",0
1965,"public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }","static String transpose (String s, int rows, int columns) {
 int n = s.length ();
 if (rows * columns != n) throw new IllegalArgumentException ();
 StringBuilder sb = new StringBuilder ();
 for (int i = 0;
 i < n - 1; i ++) sb.append (s.charAt (i * columns % (n - 1)));
 sb.append (s.charAt (n - 1));
 return sb.toString ();
 }",0
867,"public static void main (String [] args) {
 BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Please enter user name : "");
 String username = null;
 try {
 username = reader.readLine ();
 } catch (IOException e) {
 e.printStackTrace ();
 }
 System.out.println (""You entered : "" + username);
 Scanner in = new Scanner (System.in);
 System.out.print (""Please enter user name : "");
 username = in.nextLine ();
 System.out.println (""You entered : "" + username);
 Console console = System.console ();
 username = console.readLine (""Please enter user name : "");
 System.out.println (""You entered : "" + username);
 }","public static void main (final String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.println (""Enter some text, or '"" + EXIT_COMMAND + ""' to quit"");
 while (true) {
 System.out.print (""><![CDATA[ "");
 String input = br.readLine ();
 System.out.println (input);
 if (input.length () == EXIT_COMMAND.length () && input.toLowerCase ().equals (EXIT_COMMAND)) {
 System.out.println (""Exiting."");
 return;
 }
 System.out.println (""...response goes here..."");
 }
 }",1
994,"private String readFileAsString (String filePath) throws IOException {
 StringBuffer fileData = new StringBuffer ();
 BufferedReader reader = new BufferedReader (new FileReader (filePath));
 char [] buf = new char [1024];
 int numRead = 0;
 while ((numRead = reader.read (buf)) != - 1) {
 String readData = String.valueOf (buf, 0, numRead);
 fileData.append (readData);
 }
 reader.close ();
 return fileData.toString ();
 }","public static String readFileAsString (String fileName, String charsetName) throws java.io.IOException {
 java.io.InputStream is = new java.io.FileInputStream (fileName);
 try {
 final int bufsize = 4096;
 int available = is.available ();
 byte [] data = new byte [available < bufsize ? bufsize : available];
 int used = 0;
 while (true) {
 if (data.length - used < bufsize) {
 byte [] newData = new byte [data.length << 1];
 System.arraycopy (data, 0, newData, 0, used);
 data = newData;
 }
 int got = is.read (data, used, data.length - used);
 if (got <= 0) break;
 used += got;
 }
 return charsetName != null ? new String (data, 0, used, charsetName) : new String (data, 0, used);
 } finally {
 is.close ();
 }
 }",1
1365,"public void start (Stage primaryStage) {
 final HTMLEditor htmlEditor = new HTMLEditor ();
 primaryStage.setScene (new Scene (htmlEditor));
 primaryStage.show ();
 for (Node toolBar = htmlEditor.lookup ("".tool-bar"");
 toolBar != null; toolBar = htmlEditor.lookup ("".tool-bar"")) {
 ((Pane) toolBar.getParent ()).getChildren ().remove (toolBar);
 }
 }","public static void main (String [] argv) {
 int counter = 0;
 for (int year = 1901, last_year = 2000;
 year <= last_year; year ++) {
 for (int month = 1, last_month = 12;
 month <= last_month; month ++) {
 Date d = new GregorianCalendar (year, month - 1, 1).getTime ();
 if (d.getDay () == 0) {
 counter ++;
 System.out.println (String.valueOf (counter) + "" "" + d);
 }
 }
 }
 System.out.println (""Total sunday in XX century: "" + counter);
 }",0
1178,"public static void main (String [] args) {
 String input = ""(A,Name1,200), (A,Name1,200), (R,Name1,200), (A,Name2,900), (A,Name2,500)"";
 Pattern p = Pattern.compile (""\\(([A,R]?),(\\w+?),(\\d+?)\\)"");
 Matcher m = p.matcher (input);
 ArrayList < Score > scores = new ArrayList < Score > ();
 ArrayList < Score > topScores = new ArrayList < Score > ();
 while (m.find ()) {
 String action = m.group (1);
 String name = m.group (2);
 double scoreVal = Double.valueOf (m.group (3));
 Score score = new Score (name, scoreVal);
 scores.add (score);
 if (""A"".equalsIgnoreCase (action)) {
 topScores.add (score);
 } else {
 for (Score topScore : topScores) {
 if (topScore.equals (score)) {
 topScores.remove (score);
 }
 }
 }
 }
 for (Score finalScore : topScores) {
 System.out.println (finalScore);
 }
 }","static int search (int [] A, int K) {
 int l = - 1;
 int u = A.length;
 int m;
 while (l + 1 < u) {
 m = l + (u - l) / 2;
 if (A [m] < K) {
 l = m;
 } else {
 u = m;
 }
 }
 if ((u == A.length) || (A [u] != K)) return - 1;
 return u;
 }",0
1952,"public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }","public static void main (String [] args) {
 Scanner scan = new Scanner (System.in);
 System.out.print (""Enter a String : "");
 String str = scan.nextLine ();
 ArrayList < String > repetition = new ArrayList < String > ();
 ArrayList < String > digrams = new ArrayList < String > ();
 String digram;
 for (int i = 0;
 i < str.length () - 1; i ++) {
 digram = str.substring (i, i + 2);
 if (repetition.contains (digram) || digram.contains ("" "") || digram.length () < 2) continue;
 int occurances = (str.length () - str.replace (digram, """").length ()) / 2;
 occurances += (str.replaceFirst ("".*?("" + digram.charAt (0) + ""+).*"", ""$1"").length () - 1) / 2;
 digrams.add (digram + "":"" + occurances);
 repetition.add (digram);
 }
 Collections.sort (digrams, (s1, s2) -> s1.substring (3, 4).compareTo (s2.substring (3, 4)));
 System.out.println (digrams);
 }",0
1865,"public static void main (String [] args) throws InterruptedException {
 MyThread mt = new MyThread ();
 mt.hello = hello;
 mt.world = world;
 mt.start ();
 for (int i = 0;
 i < 5; i ++) {
 hello.acquire ();
 System.out.println (""Hello"");
 world.release ();
 }
 }","public static void main (String [] args) {
 EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 createAndShowGUI ();
 }}
 );
 }",0
792,"public Thread newThread (Runnable runnable) {
 Runnable proxyRunnable = (Runnable) Proxy.newProxyInstance (runnable.getClass ().getClassLoader (), runnable.getClass ().getInterfaces (), new RunnableProxy (runnable));
 Thread thread = new Thread (threadGroup, proxyRunnable, namePrefix + threadNumber.getAndIncrement (), 0);
 thread.setPriority (Thread.NORM_PRIORITY);
 thread.setUncaughtExceptionHandler (new Thread.UncaughtExceptionHandler () {
 public void uncaughtException (Thread thread, Throwable cause) {
 logger.fine (cause.getMessage ());
 }}
 );
 logger.fine (thread.toString () + "" created."");
 return thread;
 }","public Thread newThread (Runnable runnable) {
 Runnable wrapper = new Runnable () {
 @Override
 public void run () {
 System.out.println (""Starting thread ..."");
 try {
 runnable.run ();
 System.out.println (""Thread done"");
 } catch (Throwable t) {
 System.out.println (""Thread exited abnormally"");
 }
 }}
 ;
 Thread thread = new Thread (threadGroup, wrapper, namePrefix + threadNumber.getAndIncrement (), 0);
 }",1
1890,"public void run () {
 System.out.println (i);
 try {
 cb.await ();
 i = i + 3;
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",0
1607,"public static void main (String...args) throws Exception {
 List < char [] > myArray = new ArrayList < char [] > ();
 myArray.add (""string1"".toCharArray ());
 myArray.add (""string2"".toCharArray ());
 myArray.add (""string3"".toCharArray ());
 char [] [] charArray2D = myArray.toArray (new char [0] [0]);
 System.out.println (charArray2D.length);
 StringBuilder s = new StringBuilder ();
 for (char [] c : myArray) {
 s.append (String.copyValueOf (c));
 }
 char [] charArray1D = s.toString ().toCharArray ();
 System.out.println (charArray1D.length);
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 boolean tensFound = false;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number >= 20) {
 buffer.append (TOKENS [(number / 10) - 2]);
 number %= 10;
 tensFound = true;
 } else {
 number %= 20;
 }
 if (number != 0) {
 if (tensFound) {
 buffer.append (UNION_SEPARATOR);
 }
 buffer.append (unitProcessor.getName (number));
 }
 return buffer.toString ();
 }",0
1255,"public static void main (String [] args) {
 byte [] dataToCompress = ""This is the test data."".getBytes (StandardCharsets.ISO_8859_1);
 try {
 ByteArrayOutputStream byteStream = new ByteArrayOutputStream (dataToCompress.length);
 try {
 GZIPOutputStream zipStream = new GZIPOutputStream (byteStream);
 try {
 zipStream.write (dataToCompress);
 } finally {
 zipStream.close ();
 }
 } finally {
 byteStream.close ();
 }
 byte [] compressedData = byteStream.toByteArray ();
 FileOutputStream fileStream = new FileOutputStream (""C:/Users/UserName/Desktop/zip_file.gz"");
 try {
 fileStream.write (compressedData);
 } finally {
 try {
 fileStream.close ();
 } catch (Exception e) {
 }
 }
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public void type (String text) {
 char c;
 for (int ii = 0;
 ii < text.length (); ii ++) {
 c = text.charAt (ii);
 if (c <= 31 || c == 129) {
 pressControlKey (c);
 } else {
 typeAsciiCode (c);
 }
 }
 }",0
1791,"public static final void main (String...aArgs) {
 log (""Generating 10 random integers in range 1..10."");
 int START = 1;
 int END = 10;
 Random randomGenerator = new Random ();
 for (int idx = 1;
 idx <= 10; ++ idx) {
 showRandomInteger (START, END, randomGenerator);
 }
 log (""Done"");
 }","public Speedo manage (int speed) {
 if (speed < getLowRange ()) {
 onLowTransition ();
 return getLowState ();
 } else if (speed > getHighRange ()) {
 onHighTransition ();
 return getHighState ();
 } else {
 return this;
 }
 }",0
1355,"int findCombinationsCount (int amount, int coins [], int checkFromIndex) {
 if (amount == 0) return 1;
 else if (amount < 0 || coins.length == checkFromIndex) return 0;
 else {
 int withFirstCoin = findCombinationsCount (amount - coins [checkFromIndex], coins, checkFromIndex);
 int withoutFirstCoin = findCombinationsCount (amount, coins, checkFromIndex + 1);
 return withFirstCoin + withoutFirstCoin;
 }
 }","public ServletInputStream getInputStream () throws IOException {
 final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream (body.getBytes ());
 ServletInputStream inputStream = new ServletInputStream () {
 public int read () throws IOException {
 return byteArrayInputStream.read ();
 }}
 ;
 return inputStream;
 }",0
1683,"public static void main (String [] args) {
 BinaryTreeWithoutRecursion < Integer > ls = new BinaryTreeWithoutRecursion < > ();
 ls.insert (1);
 ls.insert (2);
 ls.insert (3);
 ls.insert (4);
 ls.insert (5);
 ls.insert (6);
 ls.insert (7);
 ls.inOrderPrint ();
 }","protected void cleanup (JComponent c, boolean remove) {
 JTable source = (JTable) c;
 if (remove && rows != null) {
 DefaultTableModel model = (DefaultTableModel) source.getModel ();
 for (int i = rows.length - 1;
 i >= 0; i --) {
 model.removeRow (rows [i]);
 }
 }
 rows = null;
 addCount = 0;
 addIndex = - 1;
 }",0
1123,"public static String [] tokenizer (String text, String [] delims) {
 for (String delim : delims) {
 int i = text.indexOf (delim);
 if (i >= 0) {
 String [] tail = tokenizer (text.substring (i + delim.length ()), delims);
 String [] list = new String [tail.length + 2];
 list [0] = text.substring (0, i);
 list [1] = delim;
 System.arraycopy (tail, 0, list, 2, tail.length);
 return list;
 }
 }
 return new String [] {text};
 }","static String removeDuplicates (String s) {
 StringBuilder noDupes = new StringBuilder ();
 for (int i = 0;
 i < s.length (); i ++) {
 String si = s.substring (i, i + 1);
 if (noDupes.indexOf (si) == - 1) {
 noDupes.append (si);
 }
 }
 return noDupes.toString ();
 }",0
605,"public int maxBlock (String str) {
 Pattern pattern = Pattern.compile (""(.)(\\1)*"");
 Matcher matcher = pattern.matcher (str);
 int max = 0;
 while (matcher.find ()) {
 max = Math.max (max, matcher.group ().length ());
 }
 return max;
 }","public static int maxBlock (String str) {
 int maxCounter = 1;
 int counter = 1;
 if (str.length () == 0) {
 return 0;
 }
 for (int i = 1;
 i < str.length (); i ++) {
 if (str.charAt (i - 1) == str.charAt (i)) {
 counter ++;
 } else {
 if (counter > maxCounter) {
 maxCounter = counter;
 }
 counter = 1;
 }
 }
 return Math.max (maxCounter, counter);
 }",1
125,"public static void main (String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Enter String"");
 String s = br.readLine ();
 System.out.print (""Enter Integer:"");
 try {
 int i = Integer.parseInt (br.readLine ());
 } catch (NumberFormatException nfe) {
 System.err.println (""Invalid Format!"");
 }
 }","public static void main (final String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.println (""Enter some text, or '"" + EXIT_COMMAND + ""' to quit"");
 while (true) {
 System.out.print (""><![CDATA[ "");
 String input = br.readLine ();
 System.out.println (input);
 if (input.length () == EXIT_COMMAND.length () && input.toLowerCase ().equals (EXIT_COMMAND)) {
 System.out.println (""Exiting."");
 return;
 }
 System.out.println (""...response goes here..."");
 }
 }",1
112,"public void filter (String [] words, BufferedReader reader) throws IOException {
 String text;
 while ((text = reader.readLine ()) != null) {
 for (int i = 0;
 i < words.length; i ++) {
 if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
 System.out.println (text);
 break;
 }
 }
 }
 }","public void filter (String [] words, String text) {
 for (int i = 0;
 i < words.length; i ++) {
 if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
 System.out.println (text);
 break;
 }
 }
 }",1
1161,"public static BufferedImage scale (BufferedImage sbi, int imageType, int dWidth, int dHeight, double fWidth, double fHeight) {
 BufferedImage dbi = null;
 if (sbi != null) {
 dbi = new BufferedImage (dWidth, dHeight, imageType);
 Graphics2D g = dbi.createGraphics ();
 AffineTransform at = AffineTransform.getScaleInstance (fWidth, fHeight);
 g.drawRenderedImage (sbi, at);
 }
 return dbi;
 }","public int readNumber () {
 int x = - 1;
 while (x < 0) {
 System.out.println (""Please enter a positive number."");
 try {
 x = keyboard.nextInt ();
 } catch (java.util.InputMismatchException e) {
 }
 }
 return x;
 }",0
1972,"public void move (Container container) {
 if (leftRight) {
 x += deltaX;
 if (x >= (Ball.this.getWidth () - canvasWidth / 2)) {
 leftRight = false;
 updateDelta ();
 }
 } else {
 x += - deltaX;
 if (x <= 0) {
 leftRight = true;
 updateDelta ();
 }
 }
 if (upDown) {
 y += deltaY;
 upDown = ! (y >= (Ball.this.getHeight () - canvasHeight / 2));
 if (y >= (Ball.this.getHeight () - canvasHeight / 2)) {
 upDown = false;
 updateDelta ();
 }
 } else {
 y += - deltaY;
 if (y <= 0) {
 upDown = true;
 updateDelta ();
 }
 }
 }","public static void main (String [] args) throws IOException, UnsupportedAudioFileException, LineUnavailableException {
 File in = new File (""C:\\Users\\Sandra\\Desktop\\music\\rags.wav"");
 AudioInputStream audioInputStream = AudioSystem.getAudioInputStream (in);
 Clip play = AudioSystem.getClip ();
 play.open (audioInputStream);
 FloatControl volume = (FloatControl) play.getControl (FloatControl.Type.MASTER_GAIN);
 volume.setValue (1.0f);
 play.start ();
 play.drain ();
 play.close ();
 }",0
1522,"public static void main (String [] args) throws Exception {
 Console console = System.console ();
 if (console == null) {
 System.out.println (""Unable to fetch console"");
 return;
 }
 String line = console.readLine ();
 console.printf (""I saw this line: %s"", line);
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! """".equals (highName)) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! """".equals (lowName)) {
 buffer.append (SEPARATOR);
 }
 }
 if (! """".equals (lowName)) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }",0
1131,"public static String shuffle (String text) {
 char [] characters = text.toCharArray ();
 for (int i = 0;
 i < characters.length; i ++) {
 int randomIndex = (int) (Math.random () * characters.length);
 char temp = characters [i];
 characters [i] = characters [randomIndex];
 characters [randomIndex] = temp;
 }
 return new String (characters);
 }","public static void main (String [] args) {
 int large [] = new int [10];
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int k = 0;
 for (int i = 0;
 i < array.length; i ++) {
 large [k ++] = getMax (0, array);
 }
 System.out.println (""Largest 5 is: "" + Arrays.toString (Arrays.copyOf (large, 5)));
 }",0
1615,"public static void main (String [] args) {
 final double length;
 final double width;
 final char typeOfFrame;
 final char choiceOfColor;
 System.out.println (""Please enter the length of your picure in inches:"");
 length = console.nextDouble ();
 System.out.println (""Please enter the width of your picure in inches: "");
 width = console.nextDouble ();
 System.out.println (""Please enter the type of frame: R or r (Regular), F or f (Fancy). "");
 typeOfFrame = console.next ().charAt (0);
 System.out.println (""Would you like to add color?: Y for (Yes), N for (No): "");
 choiceOfColor = console.next ().charAt (0);
 if (! (isFrameType (typeOfFrame))) {
 } else {
 final double area;
 final double perimeter;
 final double priceOfFrame;
 final double priceOfCardboard;
 final double priceOfGlass;
 area = (length * width);
 perimeter = (2 * length) + (2 * width);
 priceOfFrame = (perimeter * REGULAR_FRAME);
 priceOfCardboard = (area * CARDBOARD);
 priceOfGlass = (area * GLASS);
 if (isValidChoice (choiceOfColor)) {
 final double priceOfColor;
 final double finalPrice;
 final char choiceOfCrowns;
 final double grandTotalPrice;
 if (choiceOfColor == 'N') {
 finalPrice = (priceOfFrame + priceOfCardboard + priceOfGlass);
 } else {
 priceOfColor = (area * COLOR);
 finalPrice = (priceOfFrame + priceOfColor + priceOfCardboard + priceOfGlass);
 }
 System.out.println (""Would you like to add crowns? Enter Y (Yes), or N (No): "");
 choiceOfCrowns = console.next ().charAt (0);
 if (isValidChoice (choiceOfCrowns)) {
 if (choiceOfCrowns == 'Y') {
 final double crownFinalPrice;
 final int numberOfCrowns;
 System.out.println (""How many crowns would you like? "");
 numberOfCrowns = console.nextInt ();
 crownFinalPrice = (numberOfCrowns * CROWNS);
 grandTotalPrice = (crownFinalPrice + finalPrice);
 } else {
 grandTotalPrice = finalPrice;
 }
 System.out.printf (""Your total comes to: $%.2f%n"", grandTotalPrice);
 }
 }
 }
 }","public void unzip () {
 try {
 FileInputStream fin = new FileInputStream (_zipFile);
 ZipInputStream zin = new ZipInputStream (fin);
 ZipEntry ze = null;
 while ((ze = zin.getNextEntry ()) != null) {
 Log.v (""Decompress"", ""Unzipping "" + ze.getName ());
 if (ze.isDirectory ()) {
 _dirChecker (ze.getName ());
 } else {
 FileOutputStream fout = new FileOutputStream (_location + ze.getName ());
 BufferedOutputStream bufout = new BufferedOutputStream (fout);
 byte [] buffer = new byte [1024];
 int read = 0;
 while ((read = zin.read (buffer)) != - 1) {
 bufout.write (buffer, 0, read);
 }
 bufout.close ();
 zin.closeEntry ();
 fout.close ();
 }
 }
 zin.close ();
 Log.d (""Unzip"", ""Unzipping complete. path :  "" + _location);
 } catch (Exception e) {
 Log.e (""Decompress"", ""unzip"", e);
 Log.d (""Unzip"", ""Unzipping failed"");
 }
 }",0
1127,"public void actionPerformed (ActionEvent ae) {
 startButton.setEnabled (false);
 count = 0;
 final ArrayList < String > chars = new ArrayList < > ();
 final ArrayList < Integer > charsTiming = new ArrayList < > ();
 for (String s : individualWordsToHighlight) {
 for (int i = 0;
 i < s.length (); i ++) {
 chars.add (String.valueOf (s.charAt (i)));
 System.out.println (String.valueOf (s.charAt (i)));
 }
 }
 for (int x = 0;
 x < timingsArray.length; x ++) {
 for (int i = 0;
 i < individualWordsToHighlight [x].length (); i ++) {
 charsTiming.add (timingsArray [x] / individualWordsToHighlight [x].length ());
 System.out.println (timingsArray [x] / individualWordsToHighlight [x].length ());
 }
 }
 new Timer (1, new AbstractAction () {
 @Override
 public void actionPerformed (ActionEvent ae) {
 if (count < charsTiming.size ()) {
 highlightNextWord ();
 ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
 ((Timer) ae.getSource ()).restart ();
 } else {
 reset ();
 ((Timer) ae.getSource ()).stop ();
 }
 count ++;
 }}
 ).start ();
 }","public static String merge (String...strings) {
 int maxLength = 0;
 StringBuilder sb = new StringBuilder ();
 for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
 for (int i = 0;
 i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
 return sb.toString ();
 }",0
363,"public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }","public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }",1
1049,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if ("""".equals (name)) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || """".equals (decimalValue))) {
 String zeroDecimalValue = """";
 for (int i = 0;
 i < decimalValue.length (); i ++) {
 zeroDecimalValue = zeroDecimalValue + ""0"";
 }
 if (decimalValue.equals (zeroDecimalValue)) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (""zero"").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 } else {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 }
 return name;
 }","public static void main (String [] args) {
 Map < String, Integer > unSortedMap = new LinkedHashMap < String, Integer > ();
 unSortedMap.put (""A"", 2);
 unSortedMap.put (""V"", 1);
 unSortedMap.put (""G"", 5);
 System.out.println (""Unsorted Map :\n"");
 for (Map.Entry < String, Integer > entry : unSortedMap.entrySet ()) {
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 System.out.println (""\n"");
 System.out.println (""Sorting Map Based on Keys :\n"");
 Map < String, Integer > keySortedMap = new TreeMap < String, Integer > (unSortedMap);
 for (Map.Entry < String, Integer > entry : keySortedMap.entrySet ()) {
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 System.out.println (""\n"");
 System.out.println (""Sorting Map Based on Values :\n"");
 List < Entry < String, Integer > > entryList = new ArrayList < Entry < String, Integer > > (unSortedMap.entrySet ());
 Collections.sort (entryList, new Comparator < Entry < String, Integer > > () {
 @Override
 public int compare (Entry < String, Integer > obj1, Entry < String, Integer > obj2) {
 return obj1.getValue ().compareTo (obj2.getValue ());
 }}
 );
 unSortedMap.clear ();
 for (Entry < String, Integer > entry : entryList) {
 unSortedMap.put (entry.getKey (), entry.getValue ());
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 }",0
1842,"public void run () {
 int i = 1;
 while (true) {
 System.out.println (i);
 try {
 Thread.sleep (1000);
 cb.await ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 i = i + 3;
 }
 }","public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }",0
1637,"public void actionPerformed (ActionEvent e) {
 pressed = ! pressed;
 if (pressed) {
 for (JMenuItem item : items) {
 item.setText (item.getText () + "" changed"");
 item.setMaximumSize (new Dimension (70, 50));
 item.setPreferredSize (new Dimension (70, 50));
 item.setMinimumSize (new Dimension (70, 50));
 itemPanel.invalidate ();
 }
 } else {
 for (JMenuItem item : items) {
 item.setText (item.getText ().substring (0, item.getText ().length () - 8));
 item.setMaximumSize (new Dimension (130, 50));
 item.setPreferredSize (new Dimension (130, 50));
 item.setMinimumSize (new Dimension (130, 50));
 itemPanel.invalidate ();
 }
 }
 }","public void actionPerformed (ActionEvent arg0) {
 if (! dirty) {
 JFileChooser ch = getFileChooser ();
 int result = ch.showOpenDialog (gui);
 if (result == JFileChooser.APPROVE_OPTION) {
 try {
 BufferedImage bi = ImageIO.read (ch.getSelectedFile ());
 setImage (bi);
 } catch (IOException e) {
 showError (e);
 e.printStackTrace ();
 }
 }
 } else {
 JOptionPane.showMessageDialog (gui, ""TODO - prompt save image.."");
 }
 }",0
550,"public void run () {
 int i = 1;
 while (i < 50) {
 while (s.getState () != 3) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 3) System.out.println (""t1 "" + i);
 s.setState (1);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }","public void run () {
 try {
 for (int i = 0;
 i < 2; i ++) {
 System.out.println (""toe"");
 }
 } catch (Exception e) {
 e.getStackTrace ();
 }
 }",1
1969,"private BSTNode mirroeView (BSTNode node) {
 if (node == null || (node.left == null && node.rigth == null)) return node;
 BSTNode temp = node.left;
 node.left = node.rigth;
 node.rigth = temp;
 mirroeView (node.left);
 mirroeView (node.rigth);
 return node;
 }","public void run () {
 synchronized (lock) {
 if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
 return;
 }
 currentSize [0] = bar.getShell ().getSize ().y;
 if (currentSize [0] != orgSize [0]) {
 return;
 } else {
 bar.getShell ().layout (true);
 bar.getShell ().pack (true);
 }
 }
 }",0
1247,"public static void main (String [] args) {
 String pass = ""admin"";
 int maxTry = 3;
 boolean success = false;
 Scanner input = new Scanner (System.in);
 System.out.print (""Insert the admin pass: "");
 String test = input.nextLine ();
 while (maxTry > 0) {
 maxTry --;
 if (! pass.equals (test)) {
 System.out.print (""You have "" + maxTry + "" try(es): "");
 test = input.nextLine ();
 } else {
 success = true;
 break;
 }
 }
 if (success) {
 System.out.println (""Access granted"");
 } else {
 System.out.println (""Access denied"");
 }
 }","public static void main (String [] args) {
 String [] name1 = {""amy"", ""jose"", ""jeremy"", ""alice"", ""patrick""};
 String [] name2 = {""alan"", ""may"", ""jeremy"", ""helen"", ""alexi""};
 String [] name3 = {""adel"", ""aron"", ""amy"", ""james"", ""yam""};
 Comparator < String > comparator = new Comparator < String > () {
 @Override
 public int compare (String o1, String o2) {
 System.out.println (""Compare("" + o1 + "","" + o2 + "")"");
 char [] a1 = o1.toCharArray ();
 Arrays.sort (a1);
 char [] a2 = o2.toCharArray ();
 Arrays.sort (a2);
 return new String (a1).compareTo (new String (a2));
 }}
 ;
 Set < String > set = new TreeSet < String > (comparator);
 for (String name : name1) {
 set.add (name);
 }
 for (String name : name2) {
 set.add (name);
 }
 for (String name : name3) {
 set.add (name);
 }
 String [] result = set.toArray (new String [set.size ()]);
 System.out.println (Arrays.asList (result));
 TreeMap < String, Integer > map = new TreeMap < String, Integer > (comparator);
 addAll (name1, map);
 addAll (name2, map);
 addAll (name3, map);
 System.out.println (map);
 }",0
129,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if (name.isEmpty ()) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || decimalValue.isEmpty ())) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 return name;
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }",1
688,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, Integer hash, XSSFCellStyle styleOld, HSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (workbookOld, workbookNew, styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (workbookNew, (XSSFFont) styleOld.getFont ()));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }",1
1780,"static void throwException (final String exClassName) throws CheckedException, UncheckedException {
 Class < ? > clazz;
 try {
 clazz = Class.forName (exClassName);
 } catch (ClassNotFoundException cnfe) {
 throw new InternalError (exClassName, cnfe);
 }
 if (CheckedException.class.isAssignableFrom (clazz)) {
 throw newException (clazz.asSubclass (CheckedException.class));
 } else if (UncheckedException.class.isAssignableFrom (clazz)) {
 throw newException (clazz.asSubclass (UncheckedException.class));
 } else {
 throw new InternalError (exClassName + "" is not a valid exception"");
 }
 }","public static void main (String [] args) {
 EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 display ();
 }}
 );
 }",0
231,"public int solution (int [] A) {
 final Set perm = new HashSet ();
 final int size = A.length;
 for (int number : A) {
 if (number > size) return 0;
 perm.add (number);
 }
 if (perm.size () == A.length) return 1;
 else return 0;
 }","public int solution (int [] A) {
 int [] mark = new int [A.length + 1];
 int counter = 0;
 for (int i = 0;
 i < A.length; ++ i) {
 int value = A [i];
 if (value >= mark.length) {
 return NOT_PERMUTATION;
 }
 if (mark [value] == 0) {
 mark [value] = 1;
 ++ counter;
 } else {
 return NOT_PERMUTATION;
 }
 }
 return counter == A.length ? PERMUTATION : NOT_PERMUTATION;
 }",1
1960,"public static void printTable (String [] countries, int [] populations) {
 if (countries.length != 0) {
 int longestNameInput = countries [0].length ();
 int longestPopInput = String.valueOf (populations [0]).length ();
 for (int i = 0;
 i < countries.length; i ++) {
 int countLength = countries [i].length ();
 int popLength = String.valueOf (populations [i]).length ();
 if (countLength > longestNameInput) longestNameInput = countLength;
 if (popLength > longestPopInput) longestPopInput = popLength;
 }
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.print (countries [i]);
 for (int j = 0;
 j < (longestNameInput - countries [i].length ()); j ++) System.out.print ("" "");
 System.out.print ("" | "");
 for (int k = 0;
 k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print ("" "");
 System.out.println (populations [i]);
 }
 }
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",0
680,"void draw (Graphics2D g, int width, int height) {
 g.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 g.setColor (Color.WHITE);
 g.fillRect (0, 0, width, height);
 for (Arrow arrow : arrows) {
 g.setColor (Color.ORANGE);
 g.fillRect (350, 20, 20, 280);
 g.setStroke (new BasicStroke (20.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));
 g.translate (0, 60);
 arrow.draw (g);
 g.setStroke (new BasicStroke (20.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER));
 g.translate (0, 100);
 arrow.draw (g);
 g.setStroke (new BasicStroke (20.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND));
 g.translate (0, 100);
 arrow.draw (g);
 g.translate (400, - 260);
 }
 }","public void draw (Graphics2D g) {
 float arrowRatio = 0.5f;
 float arrowLength = 80.0f;
 BasicStroke stroke = (BasicStroke) g.getStroke ();
 float endX = 350.0f;
 float veeX;
 switch (stroke.getLineJoin ()) {
 case BasicStroke.JOIN_BEVEL :
 veeX = endX - stroke.getLineWidth () * 0.25f;
 break;
 default :
 case BasicStroke.JOIN_MITER :
 veeX = endX - stroke.getLineWidth () * 0.5f / arrowRatio;
 break;
 case BasicStroke.JOIN_ROUND :
 veeX = endX - stroke.getLineWidth () * 0.5f;
 break;
 }
 Path2D.Float path = new Path2D.Float ();
 path.moveTo (veeX - arrowLength, - arrowRatio * arrowLength);
 path.lineTo (veeX, 0.0f);
 path.lineTo (veeX - arrowLength, arrowRatio * arrowLength);
 g.setColor (Color.BLUE);
 g.draw (path);
 g.setColor (Color.YELLOW);
 g.draw (new Line2D.Float (50.0f, 0.0f, veeX, 0.0f));
 g.setColor (Color.RED);
 g.draw (new Line2D.Float (50.0f, 0.0f, veeX - stroke.getLineWidth () * 0.25f, 0.0f));
 }",1
482,"public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }",1
689,"public V put (K key, V value) {
 readWriteLock.writeLock ().lock ();
 V old;
 try {
 old = super.put (key, value);
 } finally {
 readWriteLock.writeLock ().unlock ();
 }
 return old;
 }","public void put (Key key, Value val) {
 if (map.containsKey (key)) {
 put (key, val);
 return;
 }
 while (currentSize >= maxSize) {
 freeSpace ();
 }
 synchronized (this) {
 queue.add (key);
 map.put (key, val);
 currentSize ++;
 }
 }",1
757,"public void run () {
 try {
 UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
 } catch (ClassNotFoundException ex) {
 } catch (InstantiationException ex) {
 } catch (IllegalAccessException ex) {
 } catch (UnsupportedLookAndFeelException ex) {
 }
 Game game = new Game ();
 JFrame frame = new JFrame (""Test"");
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setLayout (new BorderLayout ());
 frame.add (game);
 frame.pack ();
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }","public void run () {
 while (true) {
 game.move ();
 try {
 long startedAt = System.currentTimeMillis ();
 SwingUtilities.invokeAndWait (new Runnable () {
 @Override
 public void run () {
 game.repaint ();
 }}
 );
 long completedAt = System.currentTimeMillis ();
 long sleepFor = 30 - (completedAt - startedAt);
 if (sleepFor < 0) {
 sleepFor = 30;
 }
 Thread.sleep (sleepFor);
 } catch (Exception exp) {
 exp.printStackTrace ();
 }
 }
 }",1
1118,"public static void main (String [] args) {
 Vector v1 = new Vector ();
 v1.add (new PrintOneToHundered ());
 Vector v2 = new Vector ();
 v2.addAll (v1);
 v2.addAll (v1);
 Vector v4 = new Vector ();
 v4.addAll (v2);
 v4.addAll (v2);
 Vector v8 = new Vector ();
 v8.addAll (v4);
 v8.addAll (v4);
 Vector v16 = new Vector ();
 v16.addAll (v8);
 v16.addAll (v8);
 Vector v32 = new Vector ();
 v32.addAll (v16);
 v32.addAll (v16);
 Vector v64 = new Vector ();
 v64.addAll (v32);
 v64.addAll (v32);
 Vector v100 = new Vector ();
 v100.addAll (v64);
 v100.addAll (v32);
 v100.addAll (v4);
 System.out.println (v100);
 }","public static void close (Connection connection, Statement statement, ResultSet rs) {
 if (rs != null) {
 try {
 rs.close ();
 } catch (Exception e) {
 _logger.warning (e.toString ());
 }
 }
 if (statement != null) {
 try {
 statement.close ();
 } catch (Exception e) {
 _logger.warning (e.toString ());
 }
 }
 if (connection != null) {
 try {
 connection.close ();
 } catch (Exception e) {
 _logger.warning (e.toString ());
 }
 }
 }",0
1783,"public K remove () {
 if (head == null) return null;
 K val = head.value;
 if (head.next == null) {
 head = null;
 tail = null;
 } else {
 head = head.next;
 head.prev = null;
 }
 return val;
 }","public static void main (String [] args) {
 try {
 Tic tic = new Tic ();
 Tac tac = new Tac ();
 Toe toe = new Toe ();
 Thread t1 = new Thread (tic);
 Thread t2 = new Thread (tac);
 Thread t3 = new Thread (toe);
 t1.start ();
 t1.join ();
 if (! t1.isAlive ()) {
 t2.start ();
 }
 t2.join ();
 if (! t2.isAlive ()) {
 t3.start ();
 }
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }",0
610,"boolean hasLoop (Node first) {
 if (first == null) return false;
 Node turtle = first;
 Node hare = first;
 while (hare.next != null && hare.next.next != null) {
 turtle = turtle.next;
 hare = hare.next.next;
 if (turtle == hare) return true;
 }
 return false;
 }","public static boolean hasLoop (Node root) {
 if (root == null) return false;
 Node slow = root, fast = root;
 int taken = 0, limit = 2;
 while (fast.next != null) {
 fast = fast.next;
 taken ++;
 if (slow == fast) return true;
 if (taken == limit) {
 taken = 0;
 limit <<= 1;
 slow = fast;
 }
 }
 return false;
 }",1
1317,"public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column) {
 file = value.toString ();
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 fileChooser.setSelectedFile (new File (file));
 if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
 file = fileChooser.getSelectedFile ().getAbsolutePath ();
 }
 fireEditingStopped ();
 }}
 );
 button.setText (file);
 return button;
 }","private void findPrevLine () throws IOException {
 if (lastChar == - 1) {
 in.seek (lastPosInFile);
 lastChar = in.readByte ();
 }
 currentLineEnd = currentLineStart;
 if (currentLineEnd == 0) {
 currentLineEnd = - 1;
 currentLineStart = - 1;
 currentPos = - 1;
 return;
 }
 long filePointer = currentLineStart - 1;
 while (true) {
 filePointer --;
 if (filePointer < 0) {
 break;
 }
 in.seek (filePointer);
 int readByte = in.readByte ();
 if (readByte == 0xA && filePointer != lastPosInFile) {
 break;
 }
 }
 currentLineStart = filePointer + 1;
 currentPos = currentLineStart;
 }",0
316,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","private void transform (Integer hash, HSSFCellStyle styleOld, XSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (styleOld.getFont (this.workbookOld)));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }",1
1794,"private static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int [] seen = new int [256];
 Arrays.fill (seen, 0);
 s1 = s1.toLowerCase ();
 s2 = s2.toLowerCase ();
 for (int i = 0;
 i < s1.length (); i ++) {
 seen [s1.charAt (i)] = seen [s1.charAt (i)] + 1;
 }
 for (int i = 0;
 i < s2.length (); i ++) {
 if (seen [s2.charAt (i)] == 0) return false;
 seen [s2.charAt (i)] = seen [s2.charAt (i)] - 1;
 }
 for (int i = 0;
 i < 256; i ++) {
 if (seen [i] != 0) return false;
 }
 return true;
 }","public static boolean isExpectedPassword (char [] password, byte [] salt, byte [] expectedHash) {
 byte [] pwdHash = hash (password, salt);
 Arrays.fill (password, Character.MIN_VALUE);
 if (pwdHash.length != expectedHash.length) return false;
 for (int i = 0;
 i < pwdHash.length; i ++) {
 if (pwdHash [i] != expectedHash [i]) return false;
 }
 return true;
 }",0
1839,"public static void main (String [] args) {
 int number = 2345;
 number = Math.min (3999, Math.max (1, number));
 String asRomanNumerals = """";
 String [] RN = {""I"", ""V"", ""X"", ""L"", ""C"", ""D"", ""M""};
 int i = 0;
 while (number > 0) {
 switch (number % 10) {
 case 1 :
 asRomanNumerals = RN [i] + asRomanNumerals;
 break;
 case 2 :
 asRomanNumerals = RN [i] + RN [i] + asRomanNumerals;
 break;
 case 3 :
 asRomanNumerals = RN [i] + RN [i] + RN [i] + asRomanNumerals;
 break;
 case 4 :
 asRomanNumerals = RN [i] + RN [i + 1] + asRomanNumerals;
 break;
 case 5 :
 asRomanNumerals = RN [i + 1] + asRomanNumerals;
 break;
 case 6 :
 asRomanNumerals = RN [i + 1] + RN [i] + asRomanNumerals;
 break;
 case 7 :
 asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + asRomanNumerals;
 break;
 case 8 :
 asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + RN [i] + asRomanNumerals;
 break;
 case 9 :
 asRomanNumerals = RN [i] + RN [i + 2] + asRomanNumerals;
 break;
 }
 number = (int) number / 10;
 i += 2;
 }
 System.out.println (asRomanNumerals);
 }","public static void main (String...args) {
 Runnable r1 = new Runnable () {
 int n;
 public void run () {
 System.out.println (++ n);
 }}
 ;
 fourTimes (fiveTimes (fiveTimes (r1))).run ();
 }",0
1116,"static String encrypt (String data) {
 String encrypted = new String ("""");
 for (char c : data.toCharArray ()) {
 char newC = c + 2;
 if (newC > 'z') newC -= 26;
 encrypted += newC;
 }
 return encrpyted;
 }","public static long factorial (int n) {
 try {
 System.out.println (""factorial("" + n + "")"");
 if (n == 1) {
 System.out.println (""return 1"");
 return 1;
 }
 return n * factorial (n - 1);
 } finally {
 System.out.println (""return "" + n);
 }
 }",0
677,"public ServletInputStream getInputStream () throws IOException {
 final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream (body);
 return new ServletInputStream () {
 @Override
 public int read () throws IOException {
 return byteArrayInputStream.read ();
 }@Override
 public boolean isFinished () {
 return false;
 }@Override
 public boolean isReady () {
 return false;
 }@Override
 public void setReadListener (ReadListener arg0) {
 }}
 ;
 }","public ServletInputStream getInputStream () throws IOException {
 final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream (body.getBytes ());
 ServletInputStream inputStream = new ServletInputStream () {
 public int read () throws IOException {
 return byteArrayInputStream.read ();
 }}
 ;
 return inputStream;
 }",1
1272,"public static void main (String [] args) throws InterruptedException {
 while (makeMore) {
 new Leakee (0).check ();
 }
 while (true) {
 Thread.sleep (1000);
 System.out.println (""memory="" + Runtime.getRuntime ().freeMemory () + "" / "" + Runtime.getRuntime ().totalMemory ());
 }
 }","public String inputStreamToString (InputStream in) throws IOException {
 ReadableByteChannel channel = Channels.newChannel (in);
 ByteBuffer byteBuffer = ByteBuffer.allocate (1024 * 16);
 ByteArrayOutputStream bout = new ByteArrayOutputStream ();
 WritableByteChannel outChannel = Channels.newChannel (bout);
 while (channel.read (byteBuffer) > 0 || byteBuffer.position () > 0) {
 byteBuffer.flip ();
 outChannel.write (byteBuffer);
 byteBuffer.compact ();
 }
 channel.close ();
 outChannel.close ();
 return bout.toString (UTF_8);
 }",0
878,"public static void main (String [] args) {
 System.out.println (""Enter Number to convert into words"");
 Scanner sc = new Scanner (System.in);
 long num = sc.nextInt ();
 int rem = 0;
 int i = 0;
 while (num > 0) {
 if (i == 0) {
 rem = (int) (num % 1000);
 printText (rem);
 num = num / 1000;
 i ++;
 } else if (num > 0) {
 rem = (int) (num % 100);
 if (rem > 0) text = denom.values () [i - 1] + "" "" + text;
 printText (rem);
 num = num / 100;
 i ++;
 }
 }
 if (i > 0) System.out.println (text);
 else System.out.println (""Zero"");
 }","public static void main (String...args) {
 processor = new DefaultProcessor ();
 long [] values = new long [] {0, 4, 10, 12, 100, 108, 299, 1000, 1003, 2040, 45213, 100000, 100005, 100010, 202020, 202022, 999999, 1000000, 1000001, 10000000, 10000007, 99999999, Long.MAX_VALUE, Long.MIN_VALUE};
 String [] strValues = new String [] {""0"", ""1.30"", ""0001.00"", ""3.141592""};
 for (long val : values) {
 System.out.println (val + "" = "" + processor.getName (val));
 }
 for (String strVal : strValues) {
 System.out.println (strVal + "" = "" + processor.getName (strVal));
 }
 StringBuilder bigNumber = new StringBuilder ();
 for (int d = 0;
 d < 66; d ++) {
 bigNumber.append ((char) ((Math.random () * 10) + '0'));
 }
 bigNumber.append (""."");
 for (int d = 0;
 d < 26; d ++) {
 bigNumber.append ((char) ((Math.random () * 10) + '0'));
 }
 System.out.println (bigNumber.toString () + "" = "" + processor.getName (bigNumber.toString ()));
 }",1
1388,"public static void main (String [] args) {
 int x = 123456789;
 System.out.println (""x = "" + x);
 int hi = x, n = 0;
 while (hi > 9) {
 hi /= 10;
 ++ n;
 }
 for (int i = 0;
 i < n; i ++) hi *= 10;
 x -= hi;
 System.out.println (""x with high digit removed = "" + x);
 }","public ControlsB (Box b, Graph g) {
 graph = g;
 b = Box.createVerticalBox ();
 Box boxUpper = new Box (BoxLayout.X_AXIS);
 boxUpper.add (new JLabel (""Please enter range:  ""));
 b.add (boxUpper);
 Box boxX = new Box (BoxLayout.X_AXIS);
 boxX.add (new JLabel ("" x-axis ""));
 boxX.add (new JLabel (""from""));
 final JTextField f1 = new JTextField (""-5"");
 f1.setMaximumSize (new Dimension (100, 30));
 boxX.add (f1);
 boxX.add (new JLabel ("" to ""));
 JTextField f2 = new JTextField (""5"");
 f2.setMaximumSize (new Dimension (100, 30));
 boxX.add (f2);
 b.add (boxX);
 Box boxY = new Box (BoxLayout.X_AXIS);
 boxY.add (new JLabel (""y-axis ""));
 boxY.add (new JLabel (""from""));
 final JTextField f3 = new JTextField (""5"");
 f3.setMaximumSize (new Dimension (100, 30));
 boxY.add (f3);
 boxY.add (new JLabel (""to""));
 JTextField f4 = new JTextField (""-5"");
 f4.setMaximumSize (new Dimension (100, 30));
 boxY.add (f4);
 b.add (boxY);
 Box buttonBox = new Box (BoxLayout.X_AXIS);
 buttonBox.add (new JButton (""Plot""));
 refineButton = new JButton (""Refine"");
 buttonBox.add (refineButton);
 refineButton.addActionListener (new ActionListener () {
 public void actionPerformed (ActionEvent ae) {
 int x = Integer.parseInt (f1.getText ());
 int y = Integer.parseInt (f3.getText ());
 graph.setValues (x, y);
 }}
 );
 b.add (buttonBox);
 add (b);
 }",0
1551,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Distance (m)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 gg.drawString (string, (getWidth () - width) / 2, 11);
 }","public static void main (String [] args) {
 String str1 = """";
 String str2 = null;
 String str3 = ""Starts with upper case"";
 String str4 = ""starts with lower case"";
 System.out.println (startWithUpperCase (str1));
 System.out.println (startWithUpperCase (str2));
 System.out.println (startWithUpperCase (str3));
 System.out.println (startWithUpperCase (str4));
 }",0
442,"protected void exportDone (JComponent c, Transferable data, int action) {
 if ((action == MOVE) && (indices != null)) {
 DefaultListModel model = (DefaultListModel) source.getModel ();
 if (addCount > 0) {
 for (int i = 0;
 i < indices.length; i ++) {
 if (indices [i] > addIndex) {
 indices [i] += addCount;
 }
 }
 }
 for (int i = indices.length - 1;
 i >= 0; i --) {
 model.remove (indices [i]);
 }
 }
 indices = null;
 addIndex = - 1;
 addCount = 0;
 }","protected void exportDone (JComponent c, Transferable data, int action) {
 if ((action == MOVE) && (indices != null)) {
 DefaultListModel model = (DefaultListModel) source.getModel ();
 for (int i = indices.length - 1;
 i >= 0; i --) model.remove (indices [i]);
 }
 if (addCount > 0) {
 for (int i = 0;
 i < indices.length; i ++) {
 if (indices [i] > addIndex) {
 indices [i] += addCount;
 }
 }
 }
 indices = null;
 addIndex = - 1;
 addCount = 0;
 }",1
354,"public static void main (String [] args) throws ParseException {
 String month = ""08"";
 String day = ""05"";
 String year = ""2015"";
 String inputDateStr = String.format (""%s/%s/%s"", day, month, year);
 Date inputDate = new SimpleDateFormat (""dd/MM/yyyy"").parse (inputDateStr);
 Calendar calendar = Calendar.getInstance ();
 calendar.setTime (inputDate);
 String dayOfWeek = calendar.getDisplayName (Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.US).toUpperCase ();
 System.out.println (dayOfWeek);
 }","public static void main (String [] args) throws ParseException, ParseException {
 anchorDaysMap.put (Integer.valueOf (0), new ArrayList < Integer > () {
 {
 add (Integer.valueOf (1700));
 add (Integer.valueOf (2100));
 add (Integer.valueOf (2500));
 }
 }
 );
 anchorDaysMap.put (Integer.valueOf (2), new ArrayList < Integer > () {
 {
 add (Integer.valueOf (1600));
 add (Integer.valueOf (2000));
 add (Integer.valueOf (2400));
 }
 }
 );
 anchorDaysMap.put (Integer.valueOf (3), new ArrayList < Integer > () {
 {
 add (Integer.valueOf (1500));
 add (Integer.valueOf (1900));
 add (Integer.valueOf (2300));
 }
 }
 );
 anchorDaysMap.put (Integer.valueOf (5), new ArrayList < Integer > () {
 {
 add (Integer.valueOf (1800));
 add (Integer.valueOf (2200));
 add (Integer.valueOf (2600));
 }
 }
 );
 doomsdayDate.put (Integer.valueOf (1), Integer.valueOf (3));
 doomsdayDate.put (Integer.valueOf (2), Integer.valueOf (14));
 doomsdayDate.put (Integer.valueOf (3), Integer.valueOf (14));
 doomsdayDate.put (Integer.valueOf (4), Integer.valueOf (4));
 doomsdayDate.put (Integer.valueOf (5), Integer.valueOf (9));
 doomsdayDate.put (Integer.valueOf (6), Integer.valueOf (6));
 doomsdayDate.put (Integer.valueOf (7), Integer.valueOf (4));
 doomsdayDate.put (Integer.valueOf (8), Integer.valueOf (8));
 doomsdayDate.put (Integer.valueOf (9), Integer.valueOf (5));
 doomsdayDate.put (Integer.valueOf (10), Integer.valueOf (10));
 doomsdayDate.put (Integer.valueOf (11), Integer.valueOf (7));
 doomsdayDate.put (Integer.valueOf (12), Integer.valueOf (12));
 long time = System.currentTimeMillis ();
 for (int i = 0;
 i < 100000; i ++) {
 int year = 1583 + new Random ().nextInt (500);
 int month = 1 + new Random ().nextInt (12);
 int day = 1 + new Random ().nextInt (7);
 int twoDigitsYear = (year % 100);
 int century = year - twoDigitsYear;
 int adForCentury = getADCentury (century);
 int dd = ((int) twoDigitsYear / 12) + twoDigitsYear % 12 + (int) ((twoDigitsYear % 12) / 4);
 int referenceDay = doomsdayDate.get (month);
 int gap = (day - referenceDay) % 7;
 int result = (gap + adForCentury + dd) % 7;
 if (result < 0) {
 result *= - 1;
 }
 String dayDate = weekdays [(result + 1) % 8];
 }
 System.out.println (""time (ms) : "" + (System.currentTimeMillis () - time));
 time = System.currentTimeMillis ();
 for (int i = 0;
 i < 100000; i ++) {
 Calendar c = Calendar.getInstance ();
 c.setTime (new SimpleDateFormat (""dd/MM/yyyy"").parse (""12/04/1861""));
 int result2 = c.get (Calendar.DAY_OF_WEEK);
 }
 System.out.println (""time (ms) : "" + (System.currentTimeMillis () - time));
 }",1
558,"public static long factorial (int n) {
 try {
 System.out.println (""factorial("" + n + "")"");
 if (n == 1) {
 System.out.println (""return 1"");
 return 1;
 }
 return n * factorial (n - 1);
 } finally {
 System.out.println (""return "" + n);
 }
 }","private static long factorial (int n, int depth) {
 String spaces = repeat (' ', depth);
 System.out.print (spaces);
 System.out.println (""factorial("" + n + "")"");
 if (n <= 1) {
 System.out.println (spaces + "" return 1"");
 return 1;
 }
 long fac = factorial (n - 1, depth + 1);
 System.out.print (spaces);
 System.out.printf (""return %d * %d = %d%n"", n, fac, n * fac);
 return n * fac;
 }",1
1738,"public static void main (String args []) {
 FileReader fr = null;
 FileWriter fw = null;
 try {
 fr = new FileReader (""1.txt"");
 fw = new FileWriter (""2.txt"");
 int c = fr.read ();
 while (c != - 1) {
 fw.write (c);
 c = fr.read ();
 }
 } catch (IOException e) {
 e.printStackTrace ();
 } finally {
 close (fr);
 close (fw);
 }
 }","static private void addFolderToZip (String path, String srcFolder, ZipOutputStream zip) throws Exception {
 File folder = new File (srcFolder);
 for (String fileName : folder.list ()) {
 if (path.equals ("""")) {
 addFileToZip (folder.getName (), srcFolder + ""/"" + fileName, zip);
 } else {
 addFileToZip (path + ""/"" + folder.getName (), srcFolder + ""/"" + fileName, zip);
 }
 }
 }",0
745,"public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setSize (new Dimension (300, 300));
 frame.add (new Panel ());
 frame.setVisible (true);
 }}
 );
 }","public static void main (String [] args) {
 javax.swing.SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 ValidateRevalidateRepaint rVR = new ValidateRevalidateRepaint ();
 }}
 );
 }",1
1341,"public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Create Dialog"");
 JDialog dialog = new JDialog ();
 dialog.getContentPane ().setLayout (null);
 for (int i = 0;
 i < 200; i ++) {
 dialog.add (new JTextField (""some text""));
 }
 dialog.setTitle (""Dialog "" + count ++);
 dialog.setLocation (count * 25, count * 25);
 dialog.setVisible (true);
 System.out.println (""\tCreated "" + dialog.getTitle ());
 }","public final void contextDestroyed (ServletContextEvent sce) {
 ClassLoader cl = Thread.currentThread ().getContextClassLoader ();
 Enumeration < Driver > drivers = DriverManager.getDrivers ();
 while (drivers.hasMoreElements ()) {
 Driver driver = drivers.nextElement ();
 if (driver.getClass ().getClassLoader () == cl) {
 try {
 log.info (""Deregistering JDBC driver {}"", driver);
 DriverManager.deregisterDriver (driver);
 } catch (SQLException ex) {
 log.error (""Error deregistering JDBC driver {}"", driver, ex);
 }
 } else {
 log.trace (""Not deregistering JDBC driver {} as it does not belong to this webapp's ClassLoader"", driver);
 }
 }
 }",0
1581,"public static boolean hasLoop (Node root) {
 if (root == null) return false;
 Node slow = root, fast = root;
 int taken = 0, limit = 2;
 while (fast.next != null) {
 fast = fast.next;
 taken ++;
 if (slow == fast) return true;
 if (taken == limit) {
 taken = 0;
 limit <<= 1;
 slow = fast;
 }
 }
 return false;
 }","public static String translateToEnglish (String phrase) {
 if (phrase == null) {
 return null;
 }
 String finished = phrase.replace ('4', 'a').replace ('1', 'l').replace ('2', 'z').replace ('5', 's').replace ('8', 'b').replace ('0', 'o').replace ('7', 't').replace (""|_|"", ""u"").replace (""3"", ""e"");
 finished = finished.replace ("" e "", "" 3 "");
 if (finished.startsWith (""e "")) {
 finished = ""3 "" + finished.substring (2);
 }
 if (finished.endsWith ("" e"")) {
 finished = finished.substring (0, finished.length () - 2) + "" 3"";
 }
 return finished;
 }",0
447,"public static void main (String [] args) {
 int number;
 Scanner in = new Scanner (System.in);
 System.out.println (""Enter a positive integer"");
 number = in.nextInt ();
 if (number < 0) {
 System.out.println (""Error: Not a positive integer"");
 } else {
 System.out.print (""Convert to binary is:"");
 printBinaryform (number);
 }
 }","public static void main (String h []) {
 Scanner sc = new Scanner (System.in);
 int decimal = sc.nextInt ();
 String binary = """";
 if (decimal <= 0) {
 System.out.println (""Please Enter more than 0"");
 } else {
 while (decimal > 0) {
 binary = (decimal % 2) + binary;
 decimal = decimal / 2;
 }
 System.out.println (""binary is:"" + binary);
 }
 }",1
1621,"public static int [] removeDuplicates (int [] arr) {
 boolean [] set = new boolean [1001];
 int totalItems = 0;
 for (int i = 0;
 i < arr.length; ++ i) {
 if (! set [arr [i]]) {
 set [arr [i]] = true;
 totalItems ++;
 }
 }
 int [] ret = new int [totalItems];
 int c = 0;
 for (int i = 0;
 i < set.length; ++ i) {
 if (set [i]) {
 ret [c ++] = i;
 }
 }
 return ret;
 }","public View getView (final int position, View convertview, ViewGroup parent) {
 View v = convertview;
 LayoutInflater vi = (LayoutInflater) getSystemService (Context.LAYOUT_INFLATER_SERVICE);
 v = vi.inflate (R.layout.row_layout, null);
 final x obj = items.get (position);
 TextView txt_name = (TextView) v.findViewById (R.id.txt_name);
 CheckBox checkBox1 = (CheckBox) findViewById (R.id.checkBox1);
 if (checkBox1.isChecked ()) {
 new_al.add (x_list.get (position));
 }
 btn_clear.setOnItemClickListener (new Listener () {
 public void onClick (View v) {
 x_list.clear ();
 x_list.add (new_al);
 }}
 );
 notifyDataSetChanged ();
 return v;
 }",0
1808,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","public static void main (String args []) {
 Runnable threePrinter = new Runnable () {
 int i = 3;
 public void run () {
 System.out.println (i);
 i = i + 3;
 }}
 ;
 CyclicBarrier bar2 = new CyclicBarrier (1, threePrinter);
 two twoPrinter = new two (bar2);
 CyclicBarrier bar1 = new CyclicBarrier (1, twoPrinter);
 Thread onePrinter = new Thread (new one (bar1));
 onePrinter.start ();
 }",0
1213,"public static void main (String [] args) {
 int a = 100;
 int b = 1000;
 int lowest = b;
 int highest = a;
 int count = 100000;
 Random random = new Random ();
 for (int i = 0;
 i < count; i ++) {
 int nextNumber = (int) ((Math.abs (random.nextDouble ()) * (b - a))) + a;
 if (nextNumber < a || nextNumber > b) {
 System.err.println (""number not in range :"" + nextNumber);
 } else {
 System.out.println (nextNumber);
 }
 if (nextNumber < lowest) {
 lowest = nextNumber;
 }
 if (nextNumber > highest) {
 highest = nextNumber;
 }
 }
 System.out.println (""Produced "" + count + "" numbers from "" + lowest + "" to "" + highest);
 }","public static void main (String [] args) throws Exception {
 CodilityTest o_tc = new CodilityTest ();
 int [] x = {1, 2, - 3, 4, - 5, - 11, - 2, 3, - 4, 5};
 int [] y = new int [0];
 o_tc.setInput (x);
 o_tc.getOutput (x);
 System.out.println (count);
 CodilityTest o_tc1 = new CodilityTest ();
 o_tc1.getOutput (y);
 }",0
895,"public void manage () {
 double speed = getSpeedfromVehicle ();
 if ((speed >= 0 && speed <= 10) && state != SpeedState.LOW) {
 state = SpeedState.LOW;
 System.out.println (""Low Speed mode"");
 } else if ((speed > 10 && speed < 60) && state != SpeedState.MEDIUM) {
 state = SpeedState.MEDIUM;
 System.out.println (""Medium Speed Mode"");
 } else if ((speed >= 60) && state != SpeedState.HIGH) {
 state = SpeedState.HIGH;
 System.out.println (""High Speed Mode"");
 }
 }","public Speedo manage (int speed) {
 if (speed < getLowRange ()) {
 onLowTransition ();
 return getLowState ();
 } else if (speed > getHighRange ()) {
 onHighTransition ();
 return getHighState ();
 } else {
 return this;
 }
 }",1
675,"public static void main (String [] args) {
 SendMyFiles sendMyFiles = new SendMyFiles ();
 if (args.length < 1) {
 System.err.println (""Usage: java "" + sendMyFiles.getClass ().getName () + "" Properties_file File_To_FTP "");
 System.exit (1);
 }
 String propertiesFile = args [0].trim ();
 String fileToFTP = args [1].trim ();
 sendMyFiles.startFTP (propertiesFile, fileToFTP);
 }","public static void main (String args []) {
 JSch jsch = new JSch ();
 Session session = null;
 try {
 session = jsch.getSession (""username"", ""127.0.0.1"", 22);
 session.setConfig (""StrictHostKeyChecking"", ""no"");
 session.setPassword (""password"");
 session.connect ();
 Channel channel = session.openChannel (""sftp"");
 channel.connect ();
 ChannelSftp sftpChannel = (ChannelSftp) channel;
 sftpChannel.get (""remotefile.txt"", ""localfile.txt"");
 sftpChannel.exit ();
 session.disconnect ();
 } catch (JSchException e) {
 e.printStackTrace ();
 } catch (SftpException e) {
 e.printStackTrace ();
 }
 }",1
1900,"public static void throwException (final String key) throws Throwable {
 ExceptionMapping exceptionMapping = exceptionMappings.getExceptionMappings ().get (key);
 if (exceptionMapping != null) {
 try {
 Class < Throwable > exceptionClass = (Class < Throwable >) Class.forName (exceptionMapping.getClassName ());
 try {
 throw exceptionClass.cast (exceptionClass.newInstance ());
 } catch (InstantiationException e) {
 e.printStackTrace ();
 } catch (IllegalAccessException e) {
 e.printStackTrace ();
 }
 } catch (ClassNotFoundException e) {
 e.printStackTrace ();
 }
 }
 }","public final void mouseReleased (MouseEvent e) {
 target.mouseReleased (e);
 if (pressed != null) {
 if (getDragDistance (e) < MAX_CLICK_DISTANCE) {
 MouseEvent clickEvent = new MouseEvent ((Component) pressed.getSource (), MouseEvent.MOUSE_CLICKED, e.getWhen (), pressed.getModifiers (), pressed.getX (), pressed.getY (), pressed.getXOnScreen (), pressed.getYOnScreen (), pressed.getClickCount (), pressed.isPopupTrigger (), pressed.getButton ());
 target.mouseClicked (clickEvent);
 }
 pressed = null;
 }
 }",0
153,"public static void main (String [] args) throws Exception {
 Robot robot = new Robot ();
 final Dimension screenSize = Toolkit.getDefaultToolkit ().getScreenSize ();
 final BufferedImage screen = robot.createScreenCapture (new Rectangle (screenSize));
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 JLabel screenLabel = new JLabel (new ImageIcon (screen));
 JScrollPane screenScroll = new JScrollPane (screenLabel);
 screenScroll.setPreferredSize (new Dimension ((int) (screenSize.getWidth () / 2), (int) (screenSize.getHeight () / 2)));
 final Point pointOfInterest = new Point ();
 JPanel panel = new JPanel (new BorderLayout ());
 panel.add (screenScroll, BorderLayout.CENTER);
 final JLabel pointLabel = new JLabel (""Click on any point in the screen shot!"");
 panel.add (pointLabel, BorderLayout.SOUTH);
 screenLabel.addMouseListener (new MouseAdapter () {
 public void mouseClicked (MouseEvent me) {
 pointOfInterest.setLocation (me.getPoint ());
 pointLabel.setText (""Point: "" + pointOfInterest.getX () + ""x"" + pointOfInterest.getY ());
 }}
 );
 JOptionPane.showMessageDialog (null, panel);
 System.out.println (""Point of interest: "" + pointOfInterest);
 }}
 );
 }","public static void main (String [] args) {
 String windowName = ""Document - WordPad"";
 int [] rect;
 try {
 rect = GetWindowRect.getRect (windowName);
 System.out.printf (""The corner locations for the window \""%s\"" are %s"", windowName, Arrays.toString (rect));
 } catch (GetWindowRect.WindowNotFoundException e) {
 e.printStackTrace ();
 } catch (GetWindowRect.GetWindowRectException e) {
 e.printStackTrace ();
 }
 }",1
1850,"public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }","public String inputStreamToString (InputStream inputStream) throws IOException {
 try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
 byte [] buffer = new byte [1024];
 int length;
 while ((length = inputStream.read (buffer)) != - 1) {
 result.write (buffer, 0, length);
 }
 return result.toString (UTF_8);
 }
 }",0
584,"public static boolean longerTF (boolean [] guess) {
 int consecutiveVariableTrue = 0, maxConsecutiveVariableTrue = 0;
 int consecutiveVariableFalse = 0, maxConsecutiveVariableFalse = 0;
 for (int x = 0;
 x < guess.length; x ++) {
 if (guess [x] == true) {
 consecutiveVariableTrue ++;
 if (maxConsecutiveVariableTrue < consecutiveVariableTrue) maxConsecutiveVariableTrue = consecutiveVariableTrue;
 } else {
 consecutiveVariableTrue = 0;
 }
 }
 for (int x = 0;
 x < guess.length; x ++) {
 if (guess [x] == false) {
 consecutiveVariableFalse ++;
 if (maxConsecutiveVariableFalse < consecutiveVariableFalse) maxConsecutiveVariableFalse = consecutiveVariableFalse;
 } else {
 consecutiveVariableFalse = 0;
 }
 }
 if (maxConsecutiveVariableTrue >= maxConsecutiveVariableFalse) {
 return true;
 }
 return false;
 }","public static boolean longerTF (boolean [] guess) {
 int variableTrue = 0;
 int variableFalse = 0;
 for (int x = 0;
 x < guess.length; x ++) {
 if (guess [x]) {
 variableTrue ++;
 } else {
 variableFalse ++;
 }
 }
 return variableTrue >= variableFalse;
 }",1
639,"public static void countString (String str, char value) {
 String [] arr = str.split ("""");
 StringBuffer tempString = new StringBuffer ();
 for (String s : arr) {
 tempString.append (s);
 for (char ch : s.toCharArray ()) {
 System.out.println (""Number of Occurrence of "" + ch + "" is:"" + tempString.chars ().filter (i -> i == ch).count ());
 }
 }
 if (! (Character.toString (value).isEmpty ())) {
 StringBuffer tempString2 = new StringBuffer ();
 for (String s : arr) {
 tempString2.append (s);
 for (char ch : s.toCharArray ()) {
 if (ch == value) {
 System.out.println (""Number of Occurrence of "" + ch + "" is:"" + tempString2.chars ().filter (i -> i == ch).count ());
 }
 }
 }
 }
 }","public static void countString (String str, char searchKey) {
 String count = """";
 for (int i = 0;
 i < str.length (); i ++) {
 if (str.charAt (i) == searchKey) count += str.charAt (i) + ""\n"";
 }
 System.out.println (count + ""\nNumber of Occurrence of "" + searchKey + "" is "" + count.length () + "" in string "" + str);
 }",1
65,"public static String shuffle (String s) {
 String shuffledString = """";
 while (s.length () != 0) {
 int index = (int) Math.floor (Math.random () * s.length ());
 char c = s.charAt (index);
 s = s.substring (0, index) + s.substring (index + 1);
 shuffledString += c;
 }
 return shuffledString;
 }","public static String shuffle (String text) {
 char [] characters = text.toCharArray ();
 for (int i = 0;
 i < characters.length; i ++) {
 int randomIndex = (int) (Math.random () * characters.length);
 char temp = characters [i];
 characters [i] = characters [randomIndex];
 characters [randomIndex] = temp;
 }
 return new String (characters);
 }",1
1157,"public int [] solution (String S, int [] P, int [] Q) {
 int [] result = new int [P.length];
 int [] factor1 = new int [S.length ()];
 int [] factor2 = new int [S.length ()];
 int [] factor3 = new int [S.length ()];
 int [] factor4 = new int [S.length ()];
 int factor1Sum = 0;
 int factor2Sum = 0;
 int factor3Sum = 0;
 int factor4Sum = 0;
 for (int i = 0;
 i < S.length (); i ++) {
 switch (S.charAt (i)) {
 case 'A' :
 factor1Sum ++;
 break;
 case 'C' :
 factor2Sum ++;
 break;
 case 'G' :
 factor3Sum ++;
 break;
 case 'T' :
 factor4Sum ++;
 break;
 default :
 break;
 }
 factor1 [i] = factor1Sum;
 factor2 [i] = factor2Sum;
 factor3 [i] = factor3Sum;
 factor4 [i] = factor4Sum;
 }
 for (int i = 0;
 i < P.length; i ++) {
 int start = P [i];
 int end = Q [i];
 if (start == 0) {
 if (factor1 [end] > 0) {
 result [i] = 1;
 } else if (factor2 [end] > 0) {
 result [i] = 2;
 } else if (factor3 [end] > 0) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 } else {
 if (factor1 [end] > factor1 [start - 1]) {
 result [i] = 1;
 } else if (factor2 [end] > factor2 [start - 1]) {
 result [i] = 2;
 } else if (factor3 [end] > factor3 [start - 1]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 }
 return result;
 }","private void transform () {
 String call = ""transform "";
 System.out.println (call + ""Workbook"");
 XSSFSheet sheetNew;
 HSSFSheet sheetOld;
 this.workbookNew.setForceFormulaRecalculation (this.workbookOld.getForceFormulaRecalculation ());
 this.workbookNew.setMissingCellPolicy (this.workbookOld.getMissingCellPolicy ());
 for (int i = 0;
 i < this.workbookOld.getNumberOfSheets (); i ++) {
 sheetOld = this.workbookOld.getSheetAt (i);
 sheetNew = this.workbookNew.getSheet (sheetOld.getSheetName ());
 System.out.println (call + ""Sheet erstellt: "" + sheetOld.getSheetName ());
 sheetNew = this.workbookNew.createSheet (sheetOld.getSheetName ());
 this.transform (sheetOld, sheetNew);
 }
 System.out.println (call + ""Anzahl verwendeter Styles: "" + this.styleMap.size ());
 System.out.println (call + ""abgeschlossen"");
 }",0
1246,"public static void main (String [] args) {
 String pass = ""admin"";
 Scanner input = new Scanner (System.in);
 for (int i = 0;
 i < 3; i ++) {
 System.out.print (""Insert the admin pass: "");
 String test = input.nextLine ();
 if (pass.equals (test)) {
 System.out.print (""Access granted"");
 i = 3;
 } else {
 System.out.println (""Incorrect password, you have "" + (2 - i) + "" attempts remaining"");
 }
 }
 }","public static void main (String [] args) {
 String [] name1 = {""amy"", ""jose"", ""jeremy"", ""alice"", ""patrick""};
 String [] name2 = {""alan"", ""may"", ""jeremy"", ""helen"", ""alexi""};
 String [] name3 = {""adel"", ""aron"", ""amy"", ""james"", ""yam""};
 Set < String > keySet = new HashSet < String > ();
 List < String > result = new ArrayList < String > ();
 check (keySet, name1, result);
 check (keySet, name2, result);
 check (keySet, name3, result);
 System.out.println (result);
 }",0
735,"public void actionPerformed (ActionEvent e) {
 ImageIcon saveIcon = new ImageIcon (""save-icon.png"");
 int askSave = JOptionPane.showConfirmDialog (null, ""Save current image?"", """", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, saveIcon);
 if (askSave == JOptionPane.YES_OPTION) {
 saveImage ();
 Picture p = new Picture ();
 imageLabel.setIcon (new ImageIcon (image));
 frame.setSize (width (), height ());
 } else {
 Picture p = new Picture ();
 imageLabel.setIcon (new ImageIcon (image));
 frame.setSize (width (), height ());
 }
 }","public void actionPerformed (ActionEvent e) {
 ImageIcon widthIcon = new ImageIcon (""LR-arrows.png"");
 String scaleWidth = (String) JOptionPane.showInputDialog (null, ""What should the new width be?"", """", JOptionPane.QUESTION_MESSAGE, widthIcon, null, null);
 ImageIcon heightIcon = new ImageIcon (""UD-arrows.png"");
 String scaleHeight = (String) JOptionPane.showInputDialog (null, ""What should the new height be?"", """", JOptionPane.QUESTION_MESSAGE, widthIcon, null, null);
 double x = Double.parseDouble (scaleWidth);
 double y = Double.parseDouble (scaleHeight);
 int newWidth = (int) x;
 int newHeight = (int) y;
 frame.setSize (newWidth, newHeight);
 scale (newWidth, newHeight);
 }",1
1786,"public static void main (String [] args) {
 String str = ""abcdabghplhhnfl"".toLowerCase ();
 Integer [] ar = new Integer [26];
 for (int i = 0;
 i < str.length (); i ++) {
 int j = str.charAt (i) - 'a';
 if (ar [j] == null) {
 ar [j] = 1;
 } else {
 ar [j] += 1;
 }
 }
 for (int i = 0;
 i < ar.length; i ++) {
 if (ar [i] != null && ar [i] > 1) {
 char c = (char) (97 + i);
 System.out.println (""'"" + c + ""' comes "" + ar [i] + "" times."");
 }
 }
 }","private static void verifyDirsAreEqual (Path one, Path other) throws IOException {
 Files.walkFileTree (one, new SimpleFileVisitor < Path > () {
 @Override
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 FileVisitResult result = super.visitFile (file, attrs);
 Path relativize = one.relativize (file);
 Path fileInOther = other.resolve (relativize);
 log.debug (""=== comparing: {} to {}"", file, fileInOther);
 byte [] otherBytes = Files.readAllBytes (fileInOther);
 byte [] thisBytes = Files.readAllBytes (file);
 if (! Arrays.equals (otherBytes, thisTypes)) {
 throw new AssertionFailedError (file + "" is not equal to "" + fileInOther);
 }
 return result;
 }}
 );
 }",0
238,"public static void main (String [] args) {
 ObjectMapper mapper = new ObjectMapper ();
 try {
 File json = new File (""test.json"");
 CollectionType tweetListType = mapper.getTypeFactory ().constructCollectionType (ArrayList.class, Tweet.class);
 List < Tweet > tweets = mapper.readValue (json, tweetListType);
 System.out.println (""Java objects created from JSON String:"");
 tweets.forEach (System.out :: println);
 } catch (IOException ex) {
 ex.printStackTrace ();
 }
 }","public static void main (String [] args) throws Exception {
 Tweet [] tweets;
 ObjectMapper mapper = new ObjectMapper ();
 try {
 File json = new File (""test.json"");
 tweets = mapper.readValue (json, Tweet [].class);
 System.out.println (""Java object created from JSON String :"");
 Arrays.asList (tweets).forEach (System.out :: println);
 } catch (IOException ex) {
 ex.printStackTrace ();
 }
 }",1
1622,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","public void shuffle (String input) {
 List < Character > characters = new ArrayList < Character > ();
 for (char c : input.toCharArray ()) {
 characters.add (c);
 }
 StringBuilder output = new StringBuilder (input.length ());
 while (characters.size () != 0) {
 int randPicker = (int) (Math.random () * characters.size ());
 output.append (characters.remove (randPicker));
 }
 System.out.println (output.toString ());
 }",0
1803,"public Object [] tokenizer (String value, String [] delimeters) {
 List < String > list = new ArrayList < String > ();
 for (String s : delimeters) {
 if (value.contains (s)) {
 String [] strArr = value.split (""\\"" + s);
 for (String str : strArr) {
 list.add (str);
 if (! list.contains (s)) {
 list.add (s);
 }
 }
 }
 }
 Object [] newValues = list.toArray ();
 return newValues;
 }","private void transform () {
 String call = ""transform "";
 System.out.println (call + ""Workbook"");
 XSSFSheet sheetNew;
 HSSFSheet sheetOld;
 this.workbookNew.setForceFormulaRecalculation (this.workbookOld.getForceFormulaRecalculation ());
 this.workbookNew.setMissingCellPolicy (this.workbookOld.getMissingCellPolicy ());
 for (int i = 0;
 i < this.workbookOld.getNumberOfSheets (); i ++) {
 sheetOld = this.workbookOld.getSheetAt (i);
 sheetNew = this.workbookNew.getSheet (sheetOld.getSheetName ());
 System.out.println (call + ""Sheet erstellt: "" + sheetOld.getSheetName ());
 sheetNew = this.workbookNew.createSheet (sheetOld.getSheetName ());
 this.transform (sheetOld, sheetNew);
 }
 System.out.println (call + ""Anzahl verwendeter Styles: "" + this.styleMap.size ());
 System.out.println (call + ""abgeschlossen"");
 }",0
1031,"public int solution (int X, int [] A) {
 int len = A.length;
 if (X > len) {
 return - 1;
 }
 int [] isFilled = new int [X];
 int jumped = 0;
 Arrays.fill (isFilled, 0);
 for (int i = 0;
 i < len; i ++) {
 int x = A [i];
 if (x <= X) {
 if (isFilled [x - 1] == 0) {
 isFilled [x - 1] = 1;
 jumped += 1;
 if (jumped == X) {
 return i;
 }
 }
 }
 }
 return - 1;
 }","protected void onCreate (Bundle savedInstanceState) {
 super.onCreate (savedInstanceState);
 setContentView (R.layout.activity_main);
 listView = (ListView) findViewById (R.id.pageList);
 editTextB = (EditText) findViewById (R.id.searchB);
 adapter1 = new PagesAdapter (this);
 listView.setAdapter (adapter1);
 adapter1.notifyDataSetChanged ();
 listView.setOnItemClickListener (this);
 editTextB.addTextChangedListener (new TextWatcher () {
 @Override
 public void onTextChanged (CharSequence cs, int arg1, int arg2, int arg3) {
 IndexPageActivity.this.adapter1.getFilter ().filter (cs.toString ());
 adapter1.notifyDataSetChanged ();
 }@Override
 public void beforeTextChanged (CharSequence arg0, int arg1, int arg2, int arg3) {
 }@Override
 public void afterTextChanged (Editable arg0) {
 }}
 );
 }",0
853,"public static void main (String [] args) {
 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance ();
 factory.setNamespaceAware (true);
 DocumentBuilder builder;
 Document doc = null;
 try {
 builder = factory.newDocumentBuilder ();
 doc = builder.parse (""employees.xml"");
 XPathFactory xpathFactory = XPathFactory.newInstance ();
 XPath xpath = xpathFactory.newXPath ();
 String name = getEmployeeNameById (doc, xpath, 4);
 System.out.println (""Employee Name with ID 4: "" + name);
 List < String > names = getEmployeeNameWithAge (doc, xpath, 30);
 System.out.println (""Employees with 'age>30' are:"" + Arrays.toString (names.toArray ()));
 List < String > femaleEmps = getFemaleEmployeesName (doc, xpath);
 System.out.println (""Female Employees names are:"" + Arrays.toString (femaleEmps.toArray ()));
 } catch (ParserConfigurationException | SAXException | IOException e) {
 e.printStackTrace ();
 }
 }","public static void main (String s []) throws VTDException, java.io.UnsupportedEncodingException, java.io.IOException {
 VTDGen vg = new VTDGen ();
 if (! vg.parseFile (""input.xml"", false)) return;
 VTDNav vn = vg.getNav ();
 AutoPilot ap = new AutoPilot (vn);
 XMLModifier xm = new XMLModifier (vn);
 ap.selectXPath (""/*/place[@id=\""p14\"" and   @initialMarking=\""2\""]/@initialMarking"");
 int i = 0;
 while ((i = ap.evalXPath ()) != - 1) {
 xm.updateToken (i + 1, ""499"");
 }
 xm.output (""new.xml"");
 }",1
1393,"public void move (Container container) {
 if (x >= canvasWidth || x <= 0) {
 deltaX = - 1 * deltaX;
 }
 if (y >= canvasHeight || y <= 0) {
 deltaY = - 1 * deltaY;
 }
 x += deltaX;
 y += deltaY;
 }","public static void main (String [] args) {
 ArrayList < HashMap < String, String > > yourArrayList = new ArrayList < HashMap < String, String > > ();
 HashMap < String, String > myHashMap = new HashMap < String, String > ();
 myHashMap.put (""title"", ""first Title"");
 myHashMap.put (""date"", ""This is 1st date"");
 myHashMap.put (""number"", ""5"");
 yourArrayList.add (0, myHashMap);
 myHashMap = new HashMap < String, String > ();
 myHashMap.put (""title"", ""Second Title"");
 myHashMap.put (""date"", ""This is 2nd date"");
 myHashMap.put (""number"", ""2"");
 yourArrayList.add (1, myHashMap);
 myHashMap = new HashMap < String, String > ();
 myHashMap.put (""title"", ""Third Title"");
 myHashMap.put (""date"", ""This is 3rd date"");
 myHashMap.put (""number"", ""7"");
 yourArrayList.add (2, myHashMap);
 myHashMap = new HashMap < String, String > ();
 myHashMap.put (""title"", ""Fourth Title"");
 myHashMap.put (""date"", ""This is 4th date"");
 myHashMap.put (""number"", ""0"");
 yourArrayList.add (3, myHashMap);
 System.out.println (""================="");
 System.out.println (""BEFORE SORTING"");
 System.out.println (""================="");
 for (int i = 0;
 i < yourArrayList.size (); i ++) {
 System.out.println (yourArrayList.get (i));
 }
 HashMap < String, String > temporary;
 for (int c = 0;
 c < (yourArrayList.size () - 1); c ++) {
 for (int d = 0;
 d < (yourArrayList.size () - c - 1); d ++) {
 if (Integer.parseInt (yourArrayList.get (d).get (""number"")) > Integer.parseInt (yourArrayList.get (d + 1).get (""number""))) {
 temporary = yourArrayList.get (d);
 yourArrayList.set (d, yourArrayList.get (d + 1));
 yourArrayList.set (d + 1, temporary);
 }
 }
 }
 System.out.println (""================="");
 System.out.println (""AFTER SORTING"");
 System.out.println (""================="");
 for (int i = 0;
 i < yourArrayList.size (); i ++) {
 System.out.println (yourArrayList.get (i));
 }
 }",0
1079,"public void onRequestPermissionsResult (int requestCode,@NonNull
 String [] permissions,@NonNull
 int [] grantResults) {
 int index = (requestCode>> 16) & 0xffff;
 if (index != 0) {
 index --;
 String who = mPendingFragmentActivityResults.get (index);
 mPendingFragmentActivityResults.remove (index);
 if (who == null) {
 Log.w (TAG, ""Activity result delivered for unknown Fragment."");
 return;
 }
 Fragment frag = mFragments.findFragmentByWho (who);
 if (frag == null) {
 Log.w (TAG, ""Activity result no fragment exists for who: "" + who);
 } else {
 frag.onRequestPermissionsResult (requestCode & 0xffff, permissions, grantResults);
 }
 }
 }","public static void main (String [] args) throws Exception {
 KeyPairGenerator hostKeyGen = KeyPairGenerator.getInstance (""DH"");
 BigInteger p = new BigInteger (modp2048, 16);
 BigInteger g = BigInteger.valueOf (2L);
 System.out.println (""p bits: "" + p.bitLength ());
 System.out.println (""g bits: "" + g.bitLength ());
 DHParameterSpec dhGrp14KeySpec = new DHParameterSpec (p, p);
 hostKeyGen.initialize (dhGrp14KeySpec);
 System.out.println (""Creating Host DH private key..."");
 KeyPair hostKey = hostKeyGen.generateKeyPair ();
 System.out.println (""Initiating host side Schannel..."");
 KeyAgreement schannel = KeyAgreement.getInstance (""DH"");
 schannel.init (hostKey.getPrivate ());
 }",0
580,"public int readNumber () {
 int x = - 1;
 do {
 try {
 System.out.println (""Please enter a positive number."");
 x = keyboard.nextInt ();
 } catch (InputMismatchException e) {
 }
 } while (x < 0);
 return x;
 }","public int readNumber () {
 int x = - 1;
 while (x < 0) {
 System.out.println (""Please enter a positive number."");
 try {
 x = keyboard.nextInt ();
 } catch (java.util.InputMismatchException e) {
 }
 }
 return x;
 }",1
187,"static String decrypt (String cipher) {
 String [] cipher_char_codes = cipher.split (""#"");
 StringBuilder message = new StringBuilder ();
 for (String code : cipher_char_codes) {
 int index = Integer.parseInt (code);
 if (index > 26) {
 char [] pair = code.toCharArray ();
 for (int i = 0;
 i < pair.length; i ++) {
 int x = Integer.parseInt ("""" + code.charAt (i));
 message.append ((char) ('a' + ((x - 1) % 26)));
 }
 } else {
 message.append ((char) ('a' + ((index - 1) % 26)));
 }
 }
 return message.toString ();
 }","public static String decrypt (final String msg) {
 final Pattern regex = Pattern.compile (""((\\d\\d)(#)|(\\d))"");
 final Matcher regexMatcher = regex.matcher (msg);
 final StringBuffer result = new StringBuffer ();
 String c;
 while (regexMatcher.find ()) {
 if (regexMatcher.group (2) == null) {
 c = regexMatcher.group (1);
 } else {
 c = regexMatcher.group (2);
 }
 result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
 }
 return result.toString ();
 }",1
259,"public static void main (String args []) throws IOException {
 JavaPingExampleProgram ping = new JavaPingExampleProgram ();
 List < String > commands = new ArrayList < String > ();
 commands.add (""ping"");
 commands.add (""-c"");
 commands.add (""5"");
 commands.add (""74.125.236.73"");
 ping.doCommand (commands);
 }","public static void main (String [] args) throws UnknownHostException, IOException {
 InetAddress inet;
 inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
 System.out.println (""Sending Ping Request to "" + inet);
 System.out.println (inet.isReachable (5000) ? ""Host is reachable"" : ""Host is NOT reachable"");
 inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
 System.out.println (""Sending Ping Request to "" + inet);
 System.out.println (inet.isReachable (5000) ? ""Host is reachable"" : ""Host is NOT reachable"");
 }",1
1552,"public Command deserialize (JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
 try {
 JsonObject commandObject = json.getAsJsonObject ();
 JsonElement commandTypeElement = commandObject.get (commandElementName);
 Class < ? extends Command > commandInstanceClass = commandRegistry.get (commandTypeElement.getAsString ());
 Command command = gson.fromJson (json, commandInstanceClass);
 return command;
 } catch (Exception e) {
 throw new RuntimeException (e);
 }
 }","public void actionPerformed (ActionEvent e) {
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }",0
92,"public static void main (String [] args) throws Exception {
 Experius a = new Experius ();
 int count = 10000000;
 int v = 0;
 long tm = System.currentTimeMillis ();
 for (int i = 0;
 i < count; ++ i) {
 v = a.something (i + v);
 ++ v;
 }
 tm = System.currentTimeMillis () - tm;
 System.out.println (""Time: "" + tm);
 tm = System.currentTimeMillis ();
 Method method = Experius.class.getMethod (""something"", Integer.TYPE);
 for (int i = 0;
 i < count; ++ i) {
 Object o = method.invoke (a, i + v);
 ++ v;
 }
 tm = System.currentTimeMillis () - tm;
 System.out.println (""Time: "" + tm);
 }","public static void main (String [] args) throws Exception {
 int loops = 1000 * 1000;
 Object object = new Object ();
 long start = System.nanoTime ();
 Object s;
 testMethodCall (object, loops);
 long regularCalls = System.nanoTime () - start;
 java.lang.reflect.Method method = Object.class.getMethod (""getClass"");
 method.setAccessible (true);
 start = System.nanoTime ();
 testInvoke (object, loops, method);
 long reflectiveCalls = System.nanoTime () - start;
 start = System.nanoTime ();
 testGetMethodInvoke (object, loops);
 long reflectiveLookup = System.nanoTime () - start;
 System.out.println (""Average regular method calls:"" + regularCalls / loops + "" ns."");
 System.out.println (""Average reflective method calls without lookup:"" + reflectiveCalls / loops + "" ns."");
 System.out.println (""Average reflective method calls with lookup:"" + reflectiveLookup / loops + "" ns."");
 }",1
1175,"public static void main (String [] args) {
 int len = args.length;
 if (len <= 0) {
 System.out.println ("" ERROR: Please input a value of 1-5"");
 System.exit (0);
 }
 int j;
 for (int i = 0;
 i <= len; i ++) {
 for (j = 0; j <= i; j ++) System.out.print (""*"");
 System.out.println ("""");
 }
 }","public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 new MainGUIJFrame ().setVisible (true);
 }}
 );
 }",0
975,"public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 Set < Integer > leaves = new HashSet < > ();
 for (int i = 0;
 i < A.length; i ++) {
 leaves.add (A [i]);
 if (leaves.contains (X) && leaves.size () == X) return i;
 }
 return - 1;
 }",1
831,"public static void main (String [] args) {
 int n = 7;
 int mid = n / 2;
 for (int i = 0;
 i < n; i ++) {
 for (int j = 0;
 j < Math.abs (mid - i) + 1; j ++) {
 System.out.print (""*"");
 }
 System.out.println ();
 }
 }","public static void main (String [] args) {
 for (int row = 1;
 row <= 7; row += 2) {
 for (int space = 7;
 space >= row; space -= 2) {
 System.out.print (""*"");
 }
 for (int i = 1;
 i <= row; i ++) {
 System.out.print ("" "");
 }
 System.out.print (""\n"");
 }
 for (int row = 5;
 row >= 1; row -= 2) {
 for (int space = 7;
 space >= row; space -= 2) {
 System.out.print (""*"");
 }
 for (int i = 1;
 i <= row; i ++) {
 System.out.print ("" "");
 }
 System.out.print (""\n"");
 }
 }",1
1695,"public MyViewHolder (View itemView) {
 super (itemView);
 image = (ImageView) itemView.findViewById (R.id.horizontal_list_image);
 title = (TextView) itemView.findViewById (R.id.horizontal_list_title);
 price = (TextView) itemView.findViewById (R.id.horizontal_list_price);
 image.setOnClickListener (this);
 title.setOnClickListener (this);
 price.setOnClickListener (this);
 }","public int solution (int X, int [] A) {
 Set < Integer > leaves = new HashSet < > ();
 for (int i = 0;
 i < A.length; i ++) {
 leaves.add (A [i]);
 if (leaves.contains (X) && leaves.size () == X) return i;
 }
 return - 1;
 }",0
1025,"public static void main (String [] args) {
 Object [] numbers = new Object [100];
 Arrays.fill (numbers, new Object () {
 private int count = 0;
 @Override
 public String toString () {
 return Integer.toString (++ count);
 }}
 );
 System.out.println (Arrays.toString (numbers));
 }","public void mouseDragged (MouseEvent e) {
 JViewport vport = (JViewport) e.getSource ();
 JComponent label = (JComponent) vport.getView ();
 Point cp = e.getPoint ();
 Point vp = vport.getViewPosition ();
 vp.translate (pp.x - cp.x, pp.y - cp.y);
 label.scrollRectToVisible (new Rectangle (vp, vport.getSize ()));
 pp.setLocation (cp);
 }",0
986,"public static void main (String [] args) throws IOException, UnsupportedAudioFileException, LineUnavailableException {
 File in = new File (""C:\\Users\\Sandra\\Desktop\\music\\rags.wav"");
 AudioInputStream audioInputStream = AudioSystem.getAudioInputStream (in);
 Clip play = AudioSystem.getClip ();
 play.open (audioInputStream);
 FloatControl volume = (FloatControl) play.getControl (FloatControl.Type.MASTER_GAIN);
 volume.setValue (1.0f);
 play.start ();
 play.drain ();
 play.close ();
 }","public static void main (String [] args) throws InterruptedException {
 Clip play = null;
 try {
 File in = new File (""C:\\Users\\Public\\Music\\Sample Music\\Kalimba.wav"");
 AudioInputStream audioInputStream = AudioSystem.getAudioInputStream (in);
 play = AudioSystem.getClip ();
 play.open (audioInputStream);
 FloatControl volume = (FloatControl) play.getControl (FloatControl.Type.MASTER_GAIN);
 volume.setValue (1.0f);
 play.start ();
 play.drain ();
 } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
 ex.printStackTrace ();
 } finally {
 try {
 play.close ();
 } catch (Exception exp) {
 }
 }
 System.out.println (""..."");
 }",1
1545,"public static void main (String [] args) {
 try {
 InetAddress address = InetAddress.getByName (""192.168.1.103"");
 boolean reachable = address.isReachable (10000);
 System.out.println (""Is host reachable? "" + reachable);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public static void main (String [] args) throws ParseException {
 String month = ""08"";
 String day = ""05"";
 String year = ""2015"";
 String inputDateStr = String.format (""%s/%s/%s"", day, month, year);
 Date inputDate = new SimpleDateFormat (""dd/MM/yyyy"").parse (inputDateStr);
 Calendar calendar = Calendar.getInstance ();
 calendar.setTime (inputDate);
 String dayOfWeek = calendar.getDisplayName (Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.US).toUpperCase ();
 System.out.println (dayOfWeek);
 }",0
361,"private void deleteRecursive (File f) throws Exception {
 try {
 if (f.isDirectory ()) {
 for (File c : f.listFiles ()) {
 deleteRecursive (c);
 }
 }
 if (! f.delete ()) {
 throw new Exception (""Delete command returned false for file: "" + f);
 }
 } catch (Exception e) {
 throw new Exception (""Failed to delete the folder: "" + f, e);
 }
 }","public void deleteRecursive (File path) {
 File [] c = path.listFiles ();
 System.out.println (""Cleaning out folder:"" + path.toString ());
 for (File file : c) {
 if (file.isDirectory ()) {
 System.out.println (""Deleting file:"" + file.toString ());
 deleteRecursive (file);
 file.delete ();
 } else {
 file.delete ();
 }
 }
 path.delete ();
 }",1
642,"public void run () {
 count ++;
 if (Thread.currentThread ().getName ().compareTo (""one"") == 0) {
 synchronized (a.class) {
 try {
 for (int i = 0;
 i < 5; i ++) {
 while (time.equals (""Tock"")) {
 a.class.wait ();
 }
 System.out.println (""Now running thread "" + Thread.currentThread ().getName () + "" with count "" + count);
 time = ""Tock"";
 System.out.println (time);
 a.class.notify ();
 }
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }
 } else if (Thread.currentThread ().getName ().compareTo (""two"") == 0) {
 synchronized (a.class) {
 try {
 for (int j = 0;
 j < 5; j ++) {
 while (time.equals (""Tick"")) {
 a.class.wait ();
 }
 System.out.println (""Now running thread "" + Thread.currentThread ().getName () + "" with count "" + count);
 time = ""Tick"";
 System.out.println (time);
 a.class.notify ();
 }
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }
 }
 }","public void run () {
 try {
 synchronized (lock) {
 for (int i = 0;
 i < 5; i ++) {
 while (id != token % N) lock.wait ();
 System.out.println (id + "" "" + i);
 token ++;
 lock.notifyAll ();
 }
 }
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }",1
726,"public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Close Dialogs"");
 for (Window window : Window.getWindows ()) {
 if (window instanceof JDialog) {
 JDialog dialog = (JDialog) window;
 System.out.println (""\tClosing "" + dialog.getTitle ());
 dialog.dispose ();
 }
 }
 Runtime.getRuntime ().gc ();
 }","public void actionPerformed (ActionEvent e) {
 if (runProcess) {
 for (Window win : Window.getWindows ()) {
 if (win instanceof JDialog) {
 System.out.println (""    Trying to Remove JDialog"");
 win.dispose ();
 }
 }
 System.out.println (""    Remove Cycle Done :-)"");
 runProcess = false;
 new Thread () {
 @Override
 public void run () {
 try {
 Thread.sleep (100);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 Runtime.getRuntime ().gc ();
 }}
 .start ();
 } else {
 pastRemWins ();
 runProcess = true;
 }
 }",1
173,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","private void transform (HSSFSheet sheetOld, XSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setForceFormulaRecalculation (sheetOld.getForceFormulaRecalculation ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 XSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform ((HSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }",1
1160,"public static BufferedImage scale (BufferedImage imageToScale, int dWidth, int dHeight) {
 BufferedImage scaledImage = null;
 if (imageToScale != null) {
 scaledImage = new BufferedImage (dWidth, dHeight, imageToScale.getType ());
 Graphics2D graphics2D = scaledImage.createGraphics ();
 graphics2D.drawImage (imageToScale, 0, 0, dWidth, dHeight, null);
 graphics2D.dispose ();
 }
 return scaledImage;
 }","public int readNumber () {
 int x = - 1;
 do {
 try {
 System.out.println (""Please enter a positive number."");
 x = keyboard.nextInt ();
 } catch (InputMismatchException e) {
 }
 } while (x < 0);
 return x;
 }",0
462,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","private void transform (HSSFCell cellOld, XSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (! this.styleMap.containsKey (hash)) {
 this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",1
1048,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! highName.isEmpty ()) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! lowName.isEmpty ()) {
 buffer.append (SEPARATOR);
 }
 }
 if (! lowName.isEmpty ()) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }","public static void main (String [] args) {
 Map < String, String > map = new HashMap < > ();
 map.put (""b"", ""dd"");
 map.put (""c"", ""cc"");
 map.put (""a"", ""aa"");
 map = new TreeMap < > (map);
 for (String key : map.keySet ()) {
 System.out.println (key + ""="" + map.get (key));
 }
 }",0
1614,"public static void main (String [] args) {
 System.out.println (""Please enter the length of your picure in inches:"");
 final double length = console.nextDouble ();
 System.out.println (""Please enter the width of your picure in inches: "");
 final double width = console.nextDouble ();
 System.out.println (""Please enter the type of frame: R or r (Regular), F or f (Fancy). "");
 final char typeOfFrame = console.next ().charAt (0);
 FrameType frameType = FrameType.valueOf ("""" + Character.toUpperCase (typeOfFrame));
 System.out.println (""Would you like to add color?: Y for (Yes), N for (No): "");
 final char choiceOfColor = console.next ().charAt (0);
 final boolean color = Character.toUpperCase (choiceOfColor) == 'Y';
 System.out.println (""Would you like to add crowns? Enter Y (Yes), or N (No): "");
 final char choiceOfCrowns = console.next ().charAt (0);
 final boolean crowns = Character.toUpperCase (choiceOfCrowns) == 'Y';
 final double priceOfCrowns;
 if (crowns) {
 System.out.println (""How many crowns would you like? "");
 final int numberOfCrowns = console.nextInt ();
 priceOfCrowns = (numberOfCrowns * CROWNS);
 } else {
 priceOfCrowns = 0.0;
 }
 final double grandTotalPrice = priceOfCrowns + areaPriceInDollars (frameType, length, width, color);
 System.out.printf (""Your total comes to: $%.2f%n"", grandTotalPrice);
 }","public static void unzip (File zipFile, File targetDirectory) throws IOException {
 ZipInputStream zis = new ZipInputStream (new BufferedInputStream (new FileInputStream (zipFile)));
 try {
 ZipEntry ze;
 int count;
 byte [] buffer = new byte [8192];
 while ((ze = zis.getNextEntry ()) != null) {
 File file = new File (targetDirectory, ze.getName ());
 File dir = ze.isDirectory () ? file : file.getParentFile ();
 if (! dir.isDirectory () && ! dir.mkdirs ()) throw new FileNotFoundException (""Failed to ensure directory: "" + dir.getAbsolutePath ());
 if (ze.isDirectory ()) continue;
 FileOutputStream fout = new FileOutputStream (file);
 try {
 while ((count = zis.read (buffer)) != - 1) fout.write (buffer, 0, count);
 } finally {
 fout.close ();
 }
 }
 } finally {
 zis.close ();
 }
 }",0
1315,"public static int countLines (File input) throws IOException {
 try (InputStream is = new FileInputStream (input)) {
 int count = 1;
 for (int aChar = 0;
 aChar != - 1; aChar = is.read ()) count += aChar == '\n' ? 1 : 0;
 return count;
 }
 }","public void itemStateChanged (ItemEvent e) {
 size = Integer.parseInt ((String) box.getSelectedItem ());
 if (e.getStateChange () == ItemEvent.SELECTED) {
 for (i = 1; i <= size; i ++) {
 System.out.print ("" "" + i);
 }
 System.out.println ();
 }
 }",0
484,"public void mirroeView () {
 BSTNode node = mirroeView (root);
 preorder (node);
 System.out.println ();
 inorder (node);
 System.out.println ();
 postorder (node);
 System.out.println ();
 }","private BSTNode mirroeView (BSTNode node) {
 if (node == null || (node.left == null && node.rigth == null)) return node;
 BSTNode temp = node.left;
 node.left = node.rigth;
 node.rigth = temp;
 mirroeView (node.left);
 mirroeView (node.rigth);
 return node;
 }",1
464,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 System.out.println (""how many number you want to put in the pot?"");
 int num = input.nextInt ();
 int numbers [] = new int [num];
 for (int i = 0;
 i < num; i ++) {
 System.out.println (""number"" + i + "":"");
 numbers [i] = input.nextInt ();
 }
 for (int temp : numbers) {
 System.out.print (temp + ""\t"");
 }
 input.close ();
 }","public static void main (String [] args) {
 int arr [];
 Scanner scan = new Scanner (System.in);
 for (int i = 0;
 i < 5; i ++) {
 System.out.print (""Enter number "" + (i + 1) + "": "");
 arr [i] = scan.nextInt ();
 }
 for (int i = 0;
 i < 5; i ++) System.out.println (""Number "" + (i + 1) + "": "" + arr [i]);
 }",1
1406,"private void initData () {
 testData = new ArrayList < EventStatus > ();
 testData.add (new EventStatus (""Mach-1"", 1476950160000L, 1));
 testData.add (new EventStatus (""Mach-1"", 1476952200000L, 2));
 testData.add (new EventStatus (""Mach-1"", 1476964800000L, 4));
 testData.add (new EventStatus (""Mach-1"", 1476966600000L, 3));
 testData.add (new EventStatus (""Mach-2"", 1476943200000L, 1));
 testData.add (new EventStatus (""Mach-2"", 1476946800000L, 4));
 testData.add (new EventStatus (""Mach-2"", 1476954000000L, 2));
 testData.add (new EventStatus (""Mach-2"", 1476955800000L, 1));
 testData.add (new EventStatus (""Mach-2"", 1476973800000L, 3));
 testData.add (new EventStatus (""Mach-3"", 1476959400000L, 2));
 testData.add (new EventStatus (""Mach-3"", 1476966600000L, 1));
 testData.add (new EventStatus (""Mach-3"", 1476970200000L, 4));
 testData.add (new EventStatus (""Mach-3"", 1476972000000L, 1));
 testData.add (new EventStatus (""Mach-3"", 1476986400000L, 2));
 }","public static void main (String [] args) throws IOException {
 JFrame myFrame = new JFrame (""myJfTitle"");
 myFrame.setSize (300, 100);
 myFrame.setLayout (new BorderLayout ());
 JPanel myPanel = new JPanel ();
 JButton myButton = new JButton (""Click me"");
 JProgressBar myBar = new JProgressBar ();
 myBar.setPreferredSize (new Dimension (myFrame.getWidth (), myFrame.getHeight ()));
 myFrame.addComponentListener (new ComponentAdapter () {
 public void componentResized (ComponentEvent evt) {
 Component c = (Component) evt.getSource ();
 myBar.setPreferredSize (new Dimension (myFrame.getWidth (), myFrame.getHeight ()));
 }}
 );
 JPanel glass = (JPanel) myFrame.getGlassPane ();
 glass.setVisible (true);
 myBar.setValue (50);
 glass.add (myButton, BorderLayout.CENTER);
 myPanel.add (myBar);
 myFrame.add (myPanel);
 myFrame.revalidate ();
 myFrame.repaint ();
 myFrame.setVisible (true);
 }",0
875,"public void actionPerformed (ActionEvent e) {
 timer.stop ();
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 pastRemWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 pastRemWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }","public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Close Dialogs"");
 for (Window window : Window.getWindows ()) {
 if (window instanceof JDialog) {
 JDialog dialog = (JDialog) window;
 System.out.println (""\tClosing "" + dialog.getTitle ());
 dialog.dispose ();
 }
 }
 Runtime.getRuntime ().gc ();
 }",1
1038,"public boolean isPalindrome (String original) {
 int i = original.length () - 1;
 int j = 0;
 while (i > j) {
 if (original.charAt (i) != original.charAt (j)) {
 return false;
 }
 i --;
 j ++;
 }
 return true;
 }","public void actionPerformed (ActionEvent e) {
 JFileChooser ch = getFileChooser ();
 int result = ch.showSaveDialog (gui);
 if (result == JFileChooser.APPROVE_OPTION) {
 try {
 File f = ch.getSelectedFile ();
 ImageIO.write (BasicPaint.this.canvasImage, ""png"", f);
 BasicPaint.this.originalImage = BasicPaint.this.canvasImage;
 dirty = false;
 } catch (IOException ioe) {
 showError (ioe);
 ioe.printStackTrace ();
 }
 }
 }",0
1050,"public static void pack (final Path folder, final Path zipFilePath) throws IOException {
 try (FileOutputStream fos = new FileOutputStream (zipFilePath.toFile ()); ZipOutputStream zos = new ZipOutputStream (fos)) {
 Files.walkFileTree (folder, new SimpleFileVisitor < Path > () {
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 zos.putNextEntry (new ZipEntry (folder.relativize (file).toString ()));
 Files.copy (file, zos);
 zos.closeEntry ();
 return FileVisitResult.CONTINUE;
 } public FileVisitResult preVisitDirectory (Path dir, BasicFileAttributes attrs) throws IOException {
 zos.putNextEntry (new ZipEntry (folder.relativize (dir).toString () + ""/""));
 zos.closeEntry ();
 return FileVisitResult.CONTINUE;
 }}
 );
 }
 }","public static void main (String [] args) {
 FileReader fr = null;
 BufferedReader br = null;
 String [] stringArray;
 int counLine = 0;
 int arrayLength;
 String s = """";
 String stringLine = """";
 try {
 fr = new FileReader (""F:/Line.txt"");
 br = new BufferedReader (fr);
 while ((s = br.readLine ()) != null) {
 stringLine = stringLine + s;
 stringLine = stringLine + "" "";
 counLine ++;
 }
 System.out.println (stringLine);
 stringArray = stringLine.split ("" "");
 arrayLength = stringArray.length;
 System.out.println (""The number of Words is "" + arrayLength);
 for (int i = 0;
 i < arrayLength; i ++) {
 int c = 1;
 for (int j = i + 1;
 j < arrayLength; j ++) {
 if (stringArray [i].equalsIgnoreCase (stringArray [j])) {
 c ++;
 for (int j2 = j;
 j2 < arrayLength; j2 ++) {
 stringArray [j2] = stringArray [j2 + 1];
 arrayLength = arrayLength - 1;
 }
 }
 }
 System.out.println (""The "" + stringArray [i] + "" present "" + c + "" times ."");
 }
 System.out.println (""The number of Line is "" + counLine);
 System.out.println ();
 fr.close ();
 br.close ();
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }",0
296,"static private void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 for (File file : src.listFiles ()) {
 File fileDest = new File (dest, file.getName ());
 if (file.isDirectory ()) {
 copyFolder (file, fileDest);
 } else {
 if (fileDest.exists ()) continue;
 try {
 Files.copy (file.toPath (), fileDest.toPath ());
 } catch (IOException e) {
 }
 }
 }
 }","public static void copyFolder (Path src, Path dest) {
 try {
 Files.walk (src).forEach (s -> {
 try {
 Path d = dest.resolve (src.relativize (s));
 if (Files.isDirectory (s)) {
 if (! Files.exists (d)) Files.createDirectory (d);
 return;
 }
 Files.copy (s, d);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 });
 } catch (Exception ex) {
 ex.printStackTrace ();
 }
 }",1
3,"public static void countString (String str) {
 if (str != null) {
 int length = str.length ();
 char ch [] = str.toCharArray ();
 Arrays.sort (ch);
 if (length > 0) {
 char x = ch [0];
 int count = 1;
 for (int i = 1;
 i < length; i ++) {
 if (ch [i] == x) {
 count ++;
 } else {
 System.out.println (""Number of Occurrence of '"" + ch [i - 1] + ""' is: "" + count);
 x = ch [i];
 count = 1;
 }
 }
 System.out.println (""Number of Occurrence of '"" + ch [length - 1] + ""' is: "" + count);
 }
 }
 }","public static void countString (String str, char value) {
 String [] arr = str.split ("""");
 StringBuffer tempString = new StringBuffer ();
 for (String s : arr) {
 tempString.append (s);
 for (char ch : s.toCharArray ()) {
 System.out.println (""Number of Occurrence of "" + ch + "" is:"" + tempString.chars ().filter (i -> i == ch).count ());
 }
 }
 if (! (Character.toString (value).isEmpty ())) {
 StringBuffer tempString2 = new StringBuffer ();
 for (String s : arr) {
 tempString2.append (s);
 for (char ch : s.toCharArray ()) {
 if (ch == value) {
 System.out.println (""Number of Occurrence of "" + ch + "" is:"" + tempString2.chars ().filter (i -> i == ch).count ());
 }
 }
 }
 }
 }",1
1530,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","public void actionPerformed (ActionEvent e) {
 if (! connected) {
 JOptionPane.showMessageDialog (null, ""Connected"");
 putValue (NAME, ""Disonnect"");
 connected = true;
 } else {
 JOptionPane.showMessageDialog (null, ""Disconnected"");
 putValue (NAME, ""Connect"");
 connected = false;
 }
 }",0
795,"public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 CharSequence out = super.filter (source, start, end, dest, dstart, dend);
 if (out != null) {
 source = out;
 start = 0;
 end = out.length ();
 }
 int len = end - start;
 if (len == 0) {
 return source;
 }
 int dlen = dest.length ();
 for (int i = 0;
 i < dstart; i ++) {
 if (dest.charAt (i) == '.') {
 return (dlen - (i + 1) + len > digits) ? """" : new SpannableStringBuilder (source, start, end);
 }
 }
 for (int i = start;
 i < end; ++ i) {
 if (source.charAt (i) == '.') {
 if ((dlen - dend) + (end - (i + 1)) > digits) return """";
 else break;
 }
 }
 return new SpannableStringBuilder (source, start, end);
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String replacement = source.subSequence (start, end).toString ();
 String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
 Matcher matcher = mPattern.matcher (newVal);
 if (matcher.matches ()) return null;
 if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
 else return """";
 }",1
390,"static void throwException (final String exClassName) throws CheckedException, UncheckedException {
 Class < ? > clazz;
 try {
 clazz = Class.forName (exClassName);
 } catch (ClassNotFoundException cnfe) {
 throw new InternalError (exClassName, cnfe);
 }
 if (CheckedException.class.isAssignableFrom (clazz)) {
 throw newException (clazz.asSubclass (CheckedException.class));
 } else if (UncheckedException.class.isAssignableFrom (clazz)) {
 throw newException (clazz.asSubclass (UncheckedException.class));
 } else {
 throw new InternalError (exClassName + "" is not a valid exception"");
 }
 }","public static void throwException (String className) throws CheckedException, UncheckedException {
 Class < ? > exceptionClass;
 try {
 exceptionClass = Class.forName (className);
 } catch (ClassNotFoundException e) {
 throw new IllegalArgumentException (e);
 }
 try {
 if (CheckedException.class.isAssignableFrom (exceptionClass)) {
 throw exceptionClass.asSubclass (CheckedException.class).newInstance ();
 } else if (UncheckedException.class.isAssignableFrom (exceptionClass)) {
 throw exceptionClass.asSubclass (UncheckedException.class).newInstance ();
 } else {
 throw new IllegalArgumentException (""Not a valid exception type: "" + exceptionClass.getName ());
 }
 } catch (InstantiationException | IllegalAccessException e) {
 throw new IllegalStateException (e);
 }
 }",1
1949,"public static void main (String [] args) throws UnknownHostException, IOException {
 InetAddress inet;
 inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
 System.out.println (""Sending Ping Request to "" + inet);
 System.out.println (inet.isReachable (5000) ? ""Host is reachable"" : ""Host is NOT reachable"");
 inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
 System.out.println (""Sending Ping Request to "" + inet);
 System.out.println (inet.isReachable (5000) ? ""Host is reachable"" : ""Host is NOT reachable"");
 }","public static void main (String [] args) {
 String needle = ""ABC"";
 String haystack = ""ABCDSGDABCSAGAABCCCCAAABAABC"";
 int numberOfOccurences = 0;
 int index = haystack.indexOf (needle);
 while (index != - 1) {
 numberOfOccurences ++;
 haystack = haystack.substring (index + needle.length ());
 index = haystack.indexOf (needle);
 }
 System.out.println ("""" + numberOfOccurences);
 }",0
710,"public void paintComponent (Graphics g) {
 Graphics2D g2d = (Graphics2D) g;
 RenderingHints rh = new RenderingHints (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 rh.put (RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
 g2d.setRenderingHints (rh);
 double w = getWidth ();
 double m = w / 12;
 double dx = w / 7;
 double dy = w / 8;
 double x = m;
 double y = .7 * m;
 double r = w / 4;
 int fwdStart = - 30;
 int topStart = 90 - 30;
 float rw = (float) w / 40;
 BasicStroke bs = new BasicStroke (rw * 1.5f);
 BasicStroke fs = new BasicStroke (rw);
 Color blue = new Color (0, 133, 199);
 Color gold = new Color (244, 195, 0);
 Color black = Color.black;
 Color green = new Color (0, 159, 61);
 Color red = new Color (223, 0, 36);
 paintRing (g2d, fs, bs, x, y, r, rw, blue, 0, 360);
 paintRing (g2d, fs, bs, x + dx, y + dy, r, rw, gold, 0, 360);
 paintRing (g2d, fs, bs, x + 2 * dx, y, r, rw, black, 0, 360);
 paintRing (g2d, fs, bs, x + dx, y + dy, r, rw, gold, topStart, 60);
 paintRing (g2d, fs, bs, x, y, r, rw, blue, fwdStart, 60);
 paintRing (g2d, fs, bs, x + 3 * dx, y + dy, r, rw, green, 0, 360);
 paintRing (g2d, fs, bs, x + 4 * dx, y, r, rw, red, 0, 360);
 paintRing (g2d, fs, bs, x + 3 * dx, y + dy, r, rw, green, topStart, 60);
 paintRing (g2d, fs, bs, x + 2 * dx, y, r, rw, black, fwdStart, 60);
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2 = (Graphics2D) g.create ();
 g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 int x = X_START;
 int y = Y_START;
 myDrawOval (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.BLUE, OVAL_WIDTH);
 x += DELTA_X;
 y += DELTA_Y;
 myDrawOval (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, COLOR_GOLD, OVAL_WIDTH);
 x += DELTA_X;
 y -= DELTA_Y;
 myDrawOval (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.BLACK, OVAL_WIDTH);
 x += DELTA_X;
 y += DELTA_Y;
 myDrawOval (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.GREEN.darker (), OVAL_WIDTH);
 x += DELTA_X;
 y -= DELTA_Y;
 myDrawOval (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.RED, OVAL_WIDTH);
 x = X_START;
 y = Y_START;
 int angle = CIRCLE_DEGREES - ARC_LENGTH;
 myDrawArc (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.BLUE, OVAL_WIDTH, angle, ARC_LENGTH);
 x += DELTA_X;
 y += DELTA_Y;
 myDrawArc (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, COLOR_GOLD, OVAL_WIDTH, 0, ARC_LENGTH);
 x += DELTA_X;
 y -= DELTA_Y;
 myDrawArc (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.BLACK, OVAL_WIDTH, angle, ARC_LENGTH);
 x += DELTA_X;
 y += DELTA_Y;
 myDrawArc (g2, INNER_STROKE, OUTER_STROKE, x, y, BG, Color.GREEN.darker (), OVAL_WIDTH, 0, ARC_LENGTH);
 g2.dispose ();
 }",1
1503,"public void sort (int [] input) {
 for (int i = 0;
 i < input.length - 1; i ++) {
 int k = i + 1;
 int nxtVal = input [k];
 while (input [k - 1] > nxtVal) {
 input [k] = input [k - 1];
 k --;
 if (k == 0) break;
 }
 input [k] = nxtVal;
 }
 System.out.println (""Medium sorting is done and the result is :"");
 for (int i : input) {
 System.out.print (i + "","");
 }
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! highName.isEmpty ()) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! lowName.isEmpty ()) {
 buffer.append (SEPARATOR);
 }
 }
 if (! lowName.isEmpty ()) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }",0
760,"public static void main (String [] args) throws InterruptedException {
 final AtomicInteger outputCount = new AtomicInteger (0);
 ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
 Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
 for (int i = 0;
 i < THREADS; i ++) {
 tasks.add (new Callable < Object > () {
 private SecureRandom rand = new SecureRandom ();
 private String task () {
 return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
 }@Override
 public Object call () {
 for (int i;
 (i = outputCount.get ()) < TASKS;) {
 String output = task ();
 if (output != null) {
 if ((i = outputCount.incrementAndGet ()) < TASKS) {
 System.out.println (output + "": "" + i);
 }
 }
 }
 return null;
 }}
 );
 }
 threadPool.invokeAll (tasks);
 threadPool.shutdownNow ();
 System.out.println (""done"");
 }","public static void main (String [] args) throws InterruptedException {
 CountDownLatch theLatch = new CountDownLatch (100);
 List < String > output = Collections.synchronizedList (new ArrayList < String > ());
 SecureRandom random = new SecureRandom ();
 ExecutorService service = Executors.newCachedThreadPool ();
 for (int i = 0;
 i < 4; i ++) {
 service.execute (new CountDownTask (theLatch, output, random));
 }
 theLatch.await (1, TimeUnit.MINUTES);
 service.shutdown ();
 System.out.println (output.size ());
 }",1
977,"public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String replacement = source.subSequence (start, end).toString ();
 String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
 Matcher matcher = mPattern.matcher (newVal);
 if (matcher.matches ()) return null;
 if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
 else return """";
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String lsStart = """";
 String lsInsert = """";
 String lsEnd = """";
 String lsText = """";
 Log.d (""debug"", moPattern.toString ());
 Log.d (""debug"", ""source: "" + source + "", start: "" + start + "", end:"" + end + "", dest: "" + dest + "", dstart: "" + dstart + "", dend: "" + dend);
 lsText = dest.toString ();
 if (lsText.length () > 0) {
 lsStart = lsText.substring (0, dstart);
 Log.d (""debug"", ""lsStart : "" + lsStart);
 if (source != """") {
 lsInsert = source.toString ();
 Log.d (""debug"", ""lsInsert: "" + lsInsert);
 }
 lsEnd = lsText.substring (dend);
 Log.d (""debug"", ""lsEnd   : "" + lsEnd);
 lsText = lsStart + lsInsert + lsEnd;
 Log.d (""debug"", ""lsText  : "" + lsText);
 }
 Matcher loMatcher = moPattern.matcher (lsText);
 Log.d (""debug"", ""loMatcher.matches(): "" + loMatcher.matches () + "", lsText: "" + lsText);
 if (! loMatcher.matches ()) {
 return """";
 }
 return null;
 }",1
156,"public static void main (String [] args) {
 String stmt = "" INSERT INTO `TABLENAME` VALUES(xxx,yyy,zzz),(aaa,'bb),(b',ccc),(aaa,bbb,ccc); "";
 System.out.printf (""%s\n"", stmt);
 stmt = stmt.split (""(?i)\\s+values\\s*\\(|\\);"") [1];
 System.out.printf (""values list: %s\n"", stmt);
 Matcher m = Pattern.compile (""('\\w*)(\\)\\,\\()+(\\w*')"").matcher (stmt);
 while (m.find ()) {
 stmt = stmt.substring (0, m.start (2)) + ""###"" + stmt.substring (m.end (2), stmt.length ());
 System.out.printf (""values list with pattern subst inside char literal: %s\n"", stmt);
 }
 String [] multiValues = stmt.split (""\\)\\,\\("");
 for (int i = 0;
 i < multiValues.length; i ++) {
 multiValues [i] = multiValues [i].replaceAll (""###"", ""),("");
 }
 System.out.println (Arrays.toString (multiValues));
 }","public static void main (String [] args) {
 Test t = new Test ();
 String [] allQueryStrings = new String [] {""INSERT INTO `TABLENAME` VALUES(xxx,yyy,zzz);"", ""INSERT INTO `TABLENAME` VALUES(xxx,yyy,zzz),(aaa,bbb,ccc);"", ""INSERT INTO `TABLENAME` VALUES(xxx,yyy,zzz),(aaa,'bb(,)b',ccc);"", ""INSERT INTO `TABLENAME` VALUES(xxx,yyy,zzz),(aaa,'bb),(b',ccc);""};
 for (String queryString : allQueryStrings) {
 System.out.println (queryString);
 for (String values : t.extractValues (queryString)) {
 System.out.println (values);
 }
 }
 }",1
1704,"public static void main (String [] args) {
 new Thread (new Runnable () {
 public void run () {
 for (int i = 0;
 i < 30; i ++) {
 System.out.println (""i := "" + i);
 try {
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }}
 ).start ();
 try {
 frameTest ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }","boolean isPalindrome (String s) {
 int n = s.length ();
 for (int i = 0;
 i < (n / 2); ++ i) {
 if (s.charAt (i) != s.charAt (n - i - 1)) {
 return false;
 }
 }
 return true;
 }",0
1491,"public void actionPerformed (ActionEvent e) {
 JFileChooser ch = getFileChooser ();
 int result = ch.showSaveDialog (gui);
 if (result == JFileChooser.APPROVE_OPTION) {
 try {
 File f = ch.getSelectedFile ();
 ImageIO.write (BasicPaint.this.canvasImage, ""png"", f);
 BasicPaint.this.originalImage = BasicPaint.this.canvasImage;
 dirty = false;
 } catch (IOException ioe) {
 showError (ioe);
 ioe.printStackTrace ();
 }
 }
 }","public static void main (String [] args) {
 javax.swing.SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 ValidateRevalidateRepaint rVR = new ValidateRevalidateRepaint ();
 }}
 );
 }",0
620,"public void run () {
 System.out.println (i);
 try {
 cb.await ();
 i = i + 3;
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 }","public synchronized void run () {
 int i = 3;
 while (i < 50) {
 while (s.getState () != 2) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 2) System.out.println (""t3 "" + i);
 i = i + 3;
 s.setState (3);
 s.notifyAll ();
 }
 }
 }",1
528,"private void type (char character) {
 handleSpecialCharacter (character);
 if (Character.isLowerCase (character)) {
 typeCharacter (Character.toUpperCase (character));
 }
 if (Character.isUpperCase (character)) {
 typeShiftCharacter (character);
 }
 if (Character.isDigit (character)) {
 typeCharacter (character);
 }
 }","public void type (char character) {
 switch (character) {
 case 'a' :
 doType (VK_A);
 break;
 case 'b' :
 doType (VK_B);
 break;
 case 'c' :
 doType (VK_C);
 break;
 case 'd' :
 doType (VK_D);
 break;
 case 'e' :
 doType (VK_E);
 break;
 case 'f' :
 doType (VK_F);
 break;
 case 'g' :
 doType (VK_G);
 break;
 case 'h' :
 doType (VK_H);
 break;
 case 'i' :
 doType (VK_I);
 break;
 case 'j' :
 doType (VK_J);
 break;
 case 'k' :
 doType (VK_K);
 break;
 case 'l' :
 doType (VK_L);
 break;
 case 'm' :
 doType (VK_M);
 break;
 case 'n' :
 doType (VK_N);
 break;
 case 'o' :
 doType (VK_O);
 break;
 case 'p' :
 doType (VK_P);
 break;
 case 'q' :
 doType (VK_Q);
 break;
 case 'r' :
 doType (VK_R);
 break;
 case 's' :
 doType (VK_S);
 break;
 case 't' :
 doType (VK_T);
 break;
 case 'u' :
 doType (VK_U);
 break;
 case 'v' :
 doType (VK_V);
 break;
 case 'w' :
 doType (VK_W);
 break;
 case 'x' :
 doType (VK_X);
 break;
 case 'y' :
 doType (VK_Y);
 break;
 case 'z' :
 doType (VK_Z);
 break;
 case 'A' :
 doType (VK_SHIFT, VK_A);
 break;
 case 'B' :
 doType (VK_SHIFT, VK_B);
 break;
 case 'C' :
 doType (VK_SHIFT, VK_C);
 break;
 case 'D' :
 doType (VK_SHIFT, VK_D);
 break;
 case 'E' :
 doType (VK_SHIFT, VK_E);
 break;
 case 'F' :
 doType (VK_SHIFT, VK_F);
 break;
 case 'G' :
 doType (VK_SHIFT, VK_G);
 break;
 case 'H' :
 doType (VK_SHIFT, VK_H);
 break;
 case 'I' :
 doType (VK_SHIFT, VK_I);
 break;
 case 'J' :
 doType (VK_SHIFT, VK_J);
 break;
 case 'K' :
 doType (VK_SHIFT, VK_K);
 break;
 case 'L' :
 doType (VK_SHIFT, VK_L);
 break;
 case 'M' :
 doType (VK_SHIFT, VK_M);
 break;
 case 'N' :
 doType (VK_SHIFT, VK_N);
 break;
 case 'O' :
 doType (VK_SHIFT, VK_O);
 break;
 case 'P' :
 doType (VK_SHIFT, VK_P);
 break;
 case 'Q' :
 doType (VK_SHIFT, VK_Q);
 break;
 case 'R' :
 doType (VK_SHIFT, VK_R);
 break;
 case 'S' :
 doType (VK_SHIFT, VK_S);
 break;
 case 'T' :
 doType (VK_SHIFT, VK_T);
 break;
 case 'U' :
 doType (VK_SHIFT, VK_U);
 break;
 case 'V' :
 doType (VK_SHIFT, VK_V);
 break;
 case 'W' :
 doType (VK_SHIFT, VK_W);
 break;
 case 'X' :
 doType (VK_SHIFT, VK_X);
 break;
 case 'Y' :
 doType (VK_SHIFT, VK_Y);
 break;
 case 'Z' :
 doType (VK_SHIFT, VK_Z);
 break;
 case '`' :
 doType (VK_BACK_QUOTE);
 break;
 case '0' :
 doType (VK_0);
 break;
 case '1' :
 doType (VK_1);
 break;
 case '2' :
 doType (VK_2);
 break;
 case '3' :
 doType (VK_3);
 break;
 case '4' :
 doType (VK_4);
 break;
 case '5' :
 doType (VK_5);
 break;
 case '6' :
 doType (VK_6);
 break;
 case '7' :
 doType (VK_7);
 break;
 case '8' :
 doType (VK_8);
 break;
 case '9' :
 doType (VK_9);
 break;
 case '-' :
 doType (VK_MINUS);
 break;
 case '=' :
 doType (VK_EQUALS);
 break;
 case '~' :
 doType (VK_BACK_QUOTE);
 break;
 case '!' :
 doType (VK_SHIFT, VK_EXCLAMATION_MARK);
 break;
 case '@' :
 doType (VK_SHIFT, VK_AT);
 break;
 case '#' :
 doType (VK_SHIFT, VK_NUMBER_SIGN);
 break;
 case '$' :
 doType (VK_SHIFT, VK_DOLLAR);
 break;
 case '%' :
 doType (VK_SHIFT, VK_5);
 break;
 case '^' :
 doType (VK_SHIFT, VK_CIRCUMFLEX);
 break;
 case '&' :
 doType (VK_SHIFT, VK_AMPERSAND);
 break;
 case '*' :
 doType (VK_SHIFT, VK_ASTERISK);
 break;
 case '(' :
 doType (VK_LEFT_PARENTHESIS);
 break;
 case ')' :
 doType (VK_RIGHT_PARENTHESIS);
 break;
 case '_' :
 doType (VK_SHIFT, VK_UNDERSCORE);
 break;
 case '+' :
 doType (VK_SHIFT, VK_PLUS);
 break;
 case '\t' :
 doType (VK_TAB);
 break;
 case '\n' :
 doType (VK_ENTER);
 break;
 case '[' :
 doType (VK_OPEN_BRACKET);
 break;
 case ']' :
 doType (VK_CLOSE_BRACKET);
 break;
 case '\\' :
 doType (VK_BACK_SLASH);
 break;
 case '{' :
 doType (VK_SHIFT, VK_OPEN_BRACKET);
 break;
 case '}' :
 doType (VK_SHIFT, VK_CLOSE_BRACKET);
 break;
 case '|' :
 doType (VK_SHIFT, VK_BACK_SLASH);
 break;
 case ';' :
 doType (VK_SEMICOLON);
 break;
 case ':' :
 doType (VK_SHIFT, VK_COLON);
 break;
 case '\'' :
 doType (VK_QUOTE);
 break;
 case '""' :
 doType (VK_SHIFT, VK_QUOTEDBL);
 break;
 case ',' :
 doType (VK_COMMA);
 break;
 case '<' :
 doType (VK_SHIFT, VK_COMMA);
 break;
 case '.' :
 doType (VK_PERIOD);
 break;
 case '>' :
 doType (VK_SHIFT, VK_PERIOD);
 break;
 case '/' :
 doType (VK_SLASH);
 break;
 case '?' :
 doType (VK_SHIFT, VK_SLASH);
 break;
 case ' ' :
 doType (VK_SPACE);
 break;
 case '\b' :
 doType (VK_BACK_SPACE);
 break;
 default :
 throw new IllegalArgumentException (""Cannot type character "" + character);
 }
 }",1
1170,"public V remove (Object key) {
 readWriteLock.writeLock ().lock ();
 V value;
 try {
 value = super.remove (key);
 } finally {
 readWriteLock.writeLock ().unlock ();
 }
 return value;
 }","public static void main (String [] args) {
 char [] chars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"".toCharArray ();
 final int mid = (chars.length + 1) / 2;
 System.out.println (""Mid: "" + mid);
 System.out.println (""Start : "" + new String (chars));
 if ((chars.length % 2) == 1) {
 char first = chars [0];
 for (int l = 1, r = mid;
 r < chars.length; l ++, r ++) {
 chars [l - 1] = chars [r];
 chars [r] = chars [l];
 }
 chars [mid - 1] = first;
 } else {
 for (int l = 0, r = mid;
 r < chars.length; l ++, r ++) {
 swap (chars, l, r);
 }
 }
 System.out.println (""Pass 1: "" + new String (chars));
 swap (chars, 0, chars.length - 2);
 swap (chars, 1, chars.length - 1);
 System.out.println (""Pass 2: "" + new String (chars));
 swap (chars, mid - 1, mid + 1);
 swap (chars, mid - 2, mid);
 System.out.println (""Pass 3: "" + new String (chars));
 }",0
1046,"public static String getLongestSubstring (String s) {
 int length = 1;
 String longestString = """";
 for (int i = 0;
 i < s.length (); i ++) {
 StringBuilder str = new StringBuilder ();
 str.append (s.charAt (i));
 for (int j = i + 1;
 j < s.length (); j ++) {
 if (s.charAt (i) == s.charAt (j)) {
 str.append (s.charAt (j));
 } else {
 break;
 }
 }
 if (length < str.length ()) {
 length = str.length ();
 longestString = str.toString ();
 }
 }
 return longestString;
 }","public int solution (int N) {
 String binary = Integer.toString (N, 2);
 int largestGap = 0;
 for (int i = 1, gap = 0;
 i < binary.length (); i ++) {
 while (i < binary.length () && binary.charAt (i) == '0') {
 i ++;
 gap ++;
 }
 if (gap > largestGap && i < binary.length ()) {
 largestGap = gap;
 }
 gap = 0;
 }
 return largestGap;
 }",0
30,"private void addPersonButtonActionPerformed (java.awt.event.ActionEvent evt) {
 String firstName = firstNameTextField.getText ();
 String lastName = lastNameTextField.getText ();
 String emailAddress = emailTextField.getText ();
 if (isNameValid (firstName, ""First name"") && isNameValid (lastName, ""Last name"") && isEmailValid (emailAddress, ""Email address"")) {
 personArrayList.add (new Person (firstName, lastName, emailAddress));
 System.out.println (""Person added!"");
 }
 }","private void addPersonButtonActionPerformed (java.awt.event.ActionEvent evt) {
 String firstName = firstNameTextField.getText ();
 String lastName = lastNameTextField.getText ();
 String emailAddress = emailTextField.getText ();
 boolean valid = true;
 if (firstName.equals ("""")) {
 System.out.println (""First Name is missing"");
 valid = false;
 }
 if (lastName.equals ("""")) {
 System.out.println (""Last Name is missing"");
 valid = false;
 }
 if (emailAddress.equals ("""")) {
 System.out.println (""E-Mail address is missing"");
 valid = false;
 }
 if (! Email.isValid (emailAddress)) {
 System.out.println (""E-Mail address is invalid"");
 valid = false;
 }
 if (valid) {
 personArrayList.add (new Person (firstName, lastName, emailAddress));
 System.out.println (""Person added!"");
 }
 }",1
60,"public static boolean isNumber (String s) {
 boolean isNumber = true;
 for (int i = 0;
 i < s.length () && isNumber; i ++) {
 char c = s.charAt (i);
 isNumber = isNumber & ((c >= '0' && c <= '9') || (c == '.') || (c == 'e') || (c == 'E') || (c == ''));
 }
 return isInteger;
 }","public static boolean isNumber (String str) {
 int i = 0, len = str.length ();
 boolean a = false, b = false, c = false, d = false;
 if (i < len && (str.charAt (i) == '+' || str.charAt (i) == '-')) i ++;
 while (i < len && isDigit (str.charAt (i))) {
 i ++;
 a = true;
 }
 if (i < len && (str.charAt (i) == '.')) i ++;
 while (i < len && isDigit (str.charAt (i))) {
 i ++;
 b = true;
 }
 if (i < len && (str.charAt (i) == 'e' || str.charAt (i) == 'E') && (a || b)) {
 i ++;
 c = true;
 }
 if (i < len && (str.charAt (i) == '+' || str.charAt (i) == '-') && c) i ++;
 while (i < len && isDigit (str.charAt (i))) {
 i ++;
 d = true;
 }
 return i == len && (a || b) && (! c || (c && d));
 }",1
1295,"public int maxBlock (String str) {
 int max = 0;
 int count = 1;
 char o = ' ';
 for (int i = 0;
 i < str.length (); i ++) {
 char c = str.charAt (i);
 if (c == o) {
 count ++;
 if (count > max) {
 max = count;
 }
 } else {
 count = 1;
 if (count > max) {
 max = count;
 }
 }
 o = c;
 }
 return max;
 }","private void type (char character) {
 handleSpecialCharacter (character);
 if (Character.isLowerCase (character)) {
 typeCharacter (Character.toUpperCase (character));
 }
 if (Character.isUpperCase (character)) {
 typeShiftCharacter (character);
 }
 if (Character.isDigit (character)) {
 typeCharacter (character);
 }
 }",0
1075,"public static void main (String args []) {
 int ci, i, j, k, l = 0;
 String str, str1, result, subString;
 char c1, c2, ch;
 Scanner scan = new Scanner (System.in);
 System.out.print (""Enter a String : "");
 str = scan.nextLine ();
 i = str.length ();
 for (c1 = 'A'; c1 <= 'z'; c1 ++) {
 for (c2 = 'A'; c2 <= 'z'; c2 ++) {
 result = new String (new char [] {c1, c2});
 k = 0;
 for (j = 0; j < i - 1; j ++) {
 subString = str.substring (j, j + 2);
 if (result.equals (subString)) {
 k ++;
 }
 }
 if (k > 0) {
 System.out.println ("""" + result + "": "" + k);
 }
 }
 }
 }","public Node reverse (Node previous, Node current) {
 if (previous == null) return null;
 if (previous.equals (head)) previous.setNext (null);
 if (current == null) {
 head = previous;
 return head;
 } else {
 Node temp = current.getNext ();
 current.setNext (previous);
 reverse (current, temp);
 }
 return null;
 }",0
589,"static int search (int [] A, int K) {
 int l = - 1;
 int u = A.length;
 int m;
 while (l + 1 < u) {
 m = l + (u - l) / 2;
 if (A [m] < K) {
 l = m;
 } else {
 u = m;
 }
 }
 if ((u == A.length) || (A [u] != K)) return - 1;
 return u;
 }","static int search (int [] A, int K) {
 int l = 0;
 int u = A.length - 1;
 int m;
 while (l <= u) {
 m = (u - l) / 2 + l;
 if (A [m] < K) l = m + 1;
 else if (A [m] == K) return m;
 else u = m - 1;
 }
 return - 1;
 }",1
1951,"public static String center (String s, int size, char pad) {
 if (s == null || size <= s.length ()) return s;
 StringBuilder sb = new StringBuilder (size);
 for (int i = 0;
 i < (size - s.length ()) / 2; i ++) {
 sb.append (pad);
 }
 sb.append (s);
 while (sb.length () < size) {
 sb.append (pad);
 }
 return sb.toString ();
 }","public int solution (int X, int [] A) {
 Set < Integer > leaves = new HashSet < > ();
 for (int i = 0;
 i < A.length; i ++) {
 leaves.add (A [i]);
 if (leaves.contains (X) && leaves.size () == X) return i;
 }
 return - 1;
 }",0
632,"public Command deserialize (JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
 try {
 JsonObject commandObject = json.getAsJsonObject ();
 JsonElement commandTypeElement = commandObject.get (commandElementName);
 Class < ? extends Command > commandInstanceClass = commandRegistry.get (commandTypeElement.getAsString ());
 Command command = gson.fromJson (json, commandInstanceClass);
 return command;
 } catch (Exception e) {
 throw new RuntimeException (e);
 }
 }","public IAnimal deserialize (JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
 JsonObject jsonObject = json.getAsJsonObject ();
 JsonPrimitive prim = (JsonPrimitive) jsonObject.get (CLASSNAME);
 String className = prim.getAsString ();
 Class < ? > klass = null;
 try {
 klass = Class.forName (className);
 } catch (ClassNotFoundException e) {
 e.printStackTrace ();
 throw new JsonParseException (e.getMessage ());
 }
 return context.deserialize (jsonObject.get (INSTANCE), klass);
 }",1
1825,"public static int TestTryFinallyBlock () {
 int i = 0;
 try {
 i = 10;
 return i;
 } finally {
 i = 40;
 System.out.println (""local: "" + i);
 }
 }","public static final void main (String...args) {
 Node tree = new Node ();
 tree.value = ""root"";
 Node [] n = {new Node (), new Node ()};
 tree.nodes = n;
 tree.nodes [0].value = ""leftish"";
 tree.nodes [1].value = ""rightish-leafy"";
 Node [] nn = {new Node ()};
 tree.nodes [0].nodes = nn;
 tree.nodes [0].nodes [0].value = ""off-leftish-leaf"";
 System.out.println (Arrays.toString (list (tree, args [0]).toArray ()));
 }",0
1022,"public static boolean isImmutable (Object object) {
 if (object instanceof Number) {
 if (object instanceof AtomicInteger) {
 } else if (object instanceof AtomicLong) {
 } else {
 return true;
 }
 } else if (object instanceof String) {
 return true;
 } else if (object instanceof Character) {
 return true;
 } else if (object instanceof Class) {
 return true;
 }
 Class < ? > objClass = object.getClass ();
 if (! Modifier.isFinal (objClass.getModifiers ())) {
 return false;
 }
 Field [] objFields = objClass.getDeclaredFields ();
 for (int i = 0;
 i < objFields.length; i ++) {
 if (! Modifier.isFinal (objFields [i].getModifiers ()) || ! isImmutable (objFields [i].getType ())) {
 return false;
 }
 }
 return true;
 }","public static void main (String [] args) {
 ScriptEngineManager manager = new ScriptEngineManager ();
 ScriptEngine engine = manager.getEngineByName (""js"");
 engine.put (""a"", 1);
 engine.put (""b"", 2);
 try {
 String expression = ""(a + b) > 2"";
 Object result = engine.eval (expression);
 System.out.println (expression + "" ? "" + result);
 } catch (ScriptException se) {
 se.printStackTrace ();
 }
 }",0
1784,"public void dispatchEvent (Event event) {
 checkNotNull (event);
 CancellableEvent cancellableEvent = null;
 boolean cancellable;
 if (cancellable = event instanceof CancellableEvent) {
 cancellableEvent = (CancellableEvent) event;
 checkArgument (cancellableEvent.isCancelled ());
 }
 for (EventPriority priority : EventPriority.values ()) {
 Map < Method, EventListener > internalMapping = getRegistry ().getMethodMap (event.getClass (), priority, true);
 if (internalMapping != null) {
 for (Entry < Method, EventListener > entry : internalMapping.entrySet ()) {
 invokeEntry (entry, event);
 }
 }
 }
 for (EventPriority priority : EventPriority.values ()) {
 Map < Method, EventListener > internalMapping = getRegistry ().getMethodMap (event.getClass (), priority, false);
 if (internalMapping != null) {
 for (Entry < Method, EventListener > entry : internalMapping.entrySet ()) {
 invokeEntry (entry, event);
 if (cancellable && cancellableEvent.isCancelled ()) {
 return;
 }
 }
 }
 }
 }","public int read () throws IOException {
 if (currentPos < currentLineEnd) {
 in.seek (currentPos ++);
 int readByte = in.readByte ();
 return readByte;
 } else if (currentPos < 0) {
 return - 1;
 } else {
 findPrevLine ();
 return read ();
 }
 }",0
108,"public void actionPerformed (ActionEvent e) {
 long duration = System.currentTimeMillis () - startTime;
 float progress = (float) duration / (float) RUN_TIME;
 if (progress > 1f) {
 progress = 1f;
 ((Timer) e.getSource ()).stop ();
 }
 ballPoint = new Point ();
 ballPoint.x = getWidth () / 2;
 ballPoint.y = Math.round (getHeight () * progress);
 repaint ();
 }","public void actionPerformed (ActionEvent e) {
 long duration = System.currentTimeMillis () - startTime;
 float progress = (float) duration / (float) RUN_TIME;
 linePoint = new Point ();
 linePoint.x = getWidth () / 2;
 if (progress < 0.5f) {
 linePoint.y = Math.round (getHeight () * (progress * 2));
 } else {
 if (progress > 1f) {
 progress = 1f;
 ((Timer) e.getSource ()).stop ();
 linePoint = null;
 ballPoint = null;
 } else {
 linePoint.y = Math.round (getHeight () * (progress * 2));
 linePoint.y = getHeight () - (linePoint.y - getHeight ());
 ballPoint.y = linePoint.y;
 }
 }
 repaint ();
 }",1
536,"public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 char [] c1 = s1.toCharArray ();
 char [] c2 = s2.toCharArray ();
 Arrays.sort (c1);
 Arrays.sort (c2);
 for (int i = 0;
 i < c1.length; i ++) {
 if (c1 [i] != c2 [i]) return false;
 }
 return true;
 }","public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) {
 return false;
 }
 s1 = s1.toLowerCase ();
 s2 = s2.toLowerCase ();
 char [] c1 = s1.toCharArray ();
 char [] c2 = s2.toCharArray ();
 Arrays.sort (c1);
 Arrays.sort (c2);
 String sc1 = new String (c1);
 String sc2 = new String (c2);
 return sc1.equals (sc2);
 }",1
1003,"public ZonedDateTime parseToZonedDateTime (String date, String dateFormat) {
 DateTimeFormatter formatter = DateTimeFormatter.ofPattern (dateFormat);
 ZonedDateTime zonedDateTime = null;
 try {
 zonedDateTime = ZonedDateTime.parse (date, formatter);
 } catch (DateTimeException e) {
 LocalDateTime localDateTime = LocalDateTime.parse (date, formatter);
 zonedDateTime = localDateTime.atZone (ZoneId.systemDefault ());
 }
 return zonedDateTime;
 }","public String getNextMonth (boolean maxDate) {
 Calendar calendar = Calendar.getInstance ();
 calendar.set (year, monthNo, 1);
 calendar.add (Calendar.MONTH, 1);
 if (maxDate) {
 int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
 calendar.set (Calendar.DAY_OF_MONTH, maxD);
 } else {
 calendar.set (Calendar.DAY_OF_MONTH, day);
 }
 String date = (calendar.get (Calendar.YEAR)) + ""-"" + (calendar.get (Calendar.MONTH) + 1) + ""-"" + calendar.get (Calendar.DAY_OF_MONTH);
 calendar.clear ();
 return date;
 }",0
41,"public boolean isAnagram (String leftString, String rightString) {
 if (leftString == null || rightString == null) {
 return false;
 } else if (leftString.length () != rightString.length ()) {
 return false;
 }
 char letters [] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
 Map < Character, Integer > occurrencesMap = new HashMap < > ();
 for (char l : letters) {
 occurrencesMap.put (l, 0);
 }
 for (int i = 0;
 i < leftString.length (); i ++) {
 char charFromLeft = leftString.charAt (i);
 Integer nrOfCharsInLeft = occurrencesMap.get (charFromLeft);
 occurrencesMap.put (charFromLeft, ++ nrOfCharsInLeft);
 char charFromRight = rightString.charAt (i);
 Integer nrOfCharsInRight = occurrencesMap.get (charFromRight);
 occurrencesMap.put (charFromRight, -- nrOfCharsInRight);
 }
 for (Integer occurrencesNr : occurrencesMap.values ()) {
 if (occurrencesNr != 0) {
 return false;
 }
 }
 return true;
 }","private static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int [] seen = new int [256];
 Arrays.fill (seen, 0);
 s1 = s1.toLowerCase ();
 s2 = s2.toLowerCase ();
 for (int i = 0;
 i < s1.length (); i ++) {
 seen [s1.charAt (i)] = seen [s1.charAt (i)] + 1;
 }
 for (int i = 0;
 i < s2.length (); i ++) {
 if (seen [s2.charAt (i)] == 0) return false;
 seen [s2.charAt (i)] = seen [s2.charAt (i)] - 1;
 }
 for (int i = 0;
 i < 256; i ++) {
 if (seen [i] != 0) return false;
 }
 return true;
 }",1
400,"public static void main (String [] args) {
 SendMyFiles sendMyFiles = new SendMyFiles ();
 if (args.length < 1) {
 System.err.println (""Usage: java "" + sendMyFiles.getClass ().getName () + "" Properties_file File_To_FTP "");
 System.exit (1);
 }
 String propertiesFile = args [0].trim ();
 String fileToFTP = args [1].trim ();
 sendMyFiles.startFTP (propertiesFile, fileToFTP);
 }","public static void main (String [] args) throws IOException {
 final SSHClient ssh = new SSHClient ();
 ssh.loadKnownHosts ();
 ssh.connect (""localhost"");
 try {
 ssh.authPublickey (System.getProperty (""user.name""));
 final String src = System.getProperty (""user.home"") + File.separator + ""test_file"";
 final SFTPClient sftp = ssh.newSFTPClient ();
 try {
 sftp.put (new FileSystemFile (src), ""/tmp"");
 } finally {
 sftp.close ();
 }
 } finally {
 ssh.disconnect ();
 }
 }",1
1268,"public static void main (String [] args) {
 n = 4;
 set = new Vector < String > (4);
 d = new int [6];
 set.add (""a"");
 set.add (""b"");
 set.add (""c"");
 set.add (""d"");
 recursion (0);
 }","private int interpolateColor (int a, int b, float proportion) {
 float [] hsva = new float [3];
 float [] hsvb = new float [3];
 Color.colorToHSV (a, hsva);
 Color.colorToHSV (b, hsvb);
 for (int i = 0;
 i < 3; i ++) {
 hsvb [i] = interpolate (hsva [i], hsvb [i], proportion);
 }
 return Color.HSVToColor (hsvb);
 }",0
1243,"public void mouseMoved (MouseEvent e) {
 xpos = getX ();
 if (xpos < 0) {
 polyrot --;
 } else if (xpos > 0) {
 polyrot ++;
 }
 repaint ();
 break;
 }","public static void main (String [] args) {
 for (int row = 1;
 row <= 7; row += 2) {
 for (int space = 7;
 space >= row; space -= 2) {
 System.out.print (""*"");
 }
 for (int i = 1;
 i <= row; i ++) {
 System.out.print ("" "");
 }
 System.out.print (""\n"");
 }
 for (int row = 5;
 row >= 1; row -= 2) {
 for (int space = 7;
 space >= row; space -= 2) {
 System.out.print (""*"");
 }
 for (int i = 1;
 i <= row; i ++) {
 System.out.print ("" "");
 }
 System.out.print (""\n"");
 }
 }",0
798,"public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
 Component cellComponent = super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, column);
 if (row == 0) {
 cellComponent.setBackground (Color.YELLOW);
 } else if (row == 1) {
 cellComponent.setBackground (Color.GRAY);
 } else {
 cellComponent.setBackground (Color.CYAN);
 }
 return cellComponent;
 }","public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
 Component c = super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, col);
 c.setBackground (Color.WHITE);
 c.setForeground (Color.BLACK);
 JLabel l = (JLabel) super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, col);
 if (separatedVariable.equals (""YOUR VALUE TO GREEN"")) {
 l.setBackground (Color.GREEN);
 return l;
 } else {
 if (separatedValue.equals (""YOUR VALUE TO YELLOW"")) {
 l.setBackground (Color.YELLOW);
 return l;
 } else if (separatedValue.equals (""YOUR VALUE TO RED"")) {
 l.setBaground (Color.RED);
 return l;
 }
 }
 return c;
 }",1
1110,"public int [] zeroFront (int [] nums) {
 if (nums == null) {
 return null;
 }
 int zerosPos = 0;
 for (int i = 0;
 i < nums.length; ++ i) {
 if (nums [i] == 0) {
 num [i] = num [zerosPos];
 num [zerosPos] = 0;
 ++ zerosPos;
 }
 }
 return num;
 }","public static void main (String [] args) {
 System.out.println (""Enter Number to convert into words"");
 Scanner sc = new Scanner (System.in);
 long num = sc.nextInt ();
 int rem = 0;
 int i = 0;
 while (num > 0) {
 if (i == 0) {
 rem = (int) (num % 1000);
 printText (rem);
 num = num / 1000;
 i ++;
 } else if (num > 0) {
 rem = (int) (num % 100);
 if (rem > 0) text = denom.values () [i - 1] + "" "" + text;
 printText (rem);
 num = num / 100;
 i ++;
 }
 }
 if (i > 0) System.out.println (text);
 else System.out.println (""Zero"");
 }",0
47,"public static void main (String [] args) {
 ScottishPerson scottishPerson = new ScottishPerson ();
 BritishPerson britishPerson = new BritishPerson ();
 BritishPerson britishPersonUpcasted = new ScottishPerson (""Another scottish name"");
 scottishPerson.salute ();
 scottishPerson.warcry ();
 System.out.println (scottishPerson.name);
 System.out.println (scottishPerson.clanName);
 britishPerson.salute ();
 System.out.println (britishPerson.name);
 britishPersonUpcasted.salute ();
 System.out.println (britishPersonUpcasted.name);
 }","public static void main (String [] args) {
 Dog dog = new Dog ();
 Horse horse = new Horse ();
 Animal animal = dog;
 Animal horseAnimal = new Horse ();
 Dog upcastedAnimal = upcastToDog (animal);
 dog.saySomething ();
 dog.getTheBall ();
 upcastedAnimal.saySomething ();
 upcastedAnimal.getTheBall ();
 horse.saySomething ();
 horse.getTheBall ();
 try {
 Dog upcastedDog = upcastToDog (horseAnimal);
 } catch (Exception ex) {
 System.out.println (ex.getClass ().getSimpleName () + "": Obviously a horse is not a dog!"");
 }
 }",1
799,"public static void main (String [] args) {
 Scanner in = new Scanner (System.in);
 int T = Integer.parseInt (in.nextLine ());
 int [] N = new int [T];
 int [] A = new int [T];
 int [] B = new int [T];
 double [] Probability = new double [T];
 for (int t = 0;
 t < T; t ++) {
 String [] input = in.nextLine ().split ("" "");
 N [t] = Integer.parseInt (input [0]);
 A [t] = Integer.parseInt (input [1]);
 B [t] = Integer.parseInt (input [2]);
 int total, pa = 0, pb = 0;
 String [] faces = in.nextLine ().split ("" "");
 total = faces.length;
 for (String f : faces) {
 if (Integer.parseInt (f) == A [t]) {
 pa ++;
 }
 if (Integer.parseInt (f) == B [t]) {
 pb ++;
 }
 }
 double pn = (double) (total * total);
 Probability [t] = (pa * pb) / pn;
 }
 for (double d : Probability) {
 System.out.println (d);
 }
 }","public static void main (String [] args) {
 Scanner scanner = new Scanner (System.in);
 String line = scanner.nextLine ();
 int trys = Integer.parseInt (line.trim ());
 for (int i = 0;
 i < trys; i ++) {
 double probability = processTry (scanner);
 System.out.println (probability);
 }
 scanner.close ();
 }",1
522,"public static void copyFolder (Path src, Path dest) {
 try {
 Files.walk (src).forEach (s -> {
 try {
 Path d = dest.resolve (src.relativize (s));
 if (Files.isDirectory (s)) {
 if (! Files.exists (d)) Files.createDirectory (d);
 return;
 }
 Files.copy (s, d);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 });
 } catch (Exception ex) {
 ex.printStackTrace ();
 }
 }","static void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 String strAbsPathSrc = src.getAbsolutePath ();
 String strAbsPathDest = dest.getAbsolutePath ();
 try {
 Files.walkFileTree (src.toPath (), new SimpleFileVisitor < Path > () {
 @Override
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
 if (dstFile.exists ()) return FileVisitResult.CONTINUE;
 if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
 Files.copy (file, dstFile.toPath ());
 return FileVisitResult.CONTINUE;
 }}
 );
 } catch (IOException e) {
 return;
 }
 return;
 }",1
1019,"private void remWins () {
 runProcess = true;
 timer = new Timer (1000, new ActionListener () {
 @Override
 public void actionPerformed (ActionEvent e) {
 if (runProcess) {
 for (Window win : Window.getWindows ()) {
 if (win instanceof JDialog) {
 System.out.println (""    Trying to Remove JDialog"");
 win.dispose ();
 }
 }
 System.out.println (""    Remove Cycle Done :-)"");
 runProcess = false;
 new Thread () {
 @Override
 public void run () {
 try {
 Thread.sleep (100);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 Runtime.getRuntime ().gc ();
 }}
 .start ();
 } else {
 pastRemWins ();
 runProcess = true;
 }
 }}
 );
 timer.setRepeats (true);
 timer.start ();
 }","static long countLines (InputStream is) throws IOException {
 try (LineNumberReader lnr = new LineNumberReader (new InputStreamReader (is))) {
 char [] buf = new char [8192];
 int n, previousN = - 1;
 while ((n = lnr.read (buf)) != - 1) {
 previousN = n;
 }
 int ln = lnr.getLineNumber ();
 if (previousN == - 1) {
 return 0;
 } else {
 char lastChar = buf [previousN - 1];
 if (lastChar == '\n' || lastChar == '\r') {
 return ln;
 }
 }
 return ln + 1;
 }
 }",0
1580,"boolean hasLoop (Node first) {
 if (first == null) return false;
 Node slow, fast;
 slow = fast = first;
 while (true) {
 slow = slow.next;
 if (fast.next != null) fast = fast.next.next;
 else return false;
 if (slow == null || fast == null) return false;
 if (slow == fast) return true;
 }
 }","public static String translateToEnglish (String phrase) {
 if (phrase == null) return null;
 boolean threeAtBeginning = false, threeAtEnd = fal;
 if (phrase.charAt (0) == '3' && phrase.charAt (1) == ' ') threeAtBeginning = true;
 int length = phrase.length ();
 if (phrase.charAt (length - 1) == '3' && phrase.charAt (length - 2) == ' ') threeAtEnd = true;
 String finished = phrase.replace ('4', 'a').replace ('1', 'l').replace ('2', 'z').replace ('5', 's').replace ('8', 'b').replace ('0', 'o').replace ('7', 't').replace (""|_|"", ""u"").replace (""3"", ""e"");
 finished = finished.replace ("" e "", "" 3 "");
 if (threeAtBeginning) finished = '3' + finished.substring (1);
 if (threeAtEnd) finished = finished.substring (0, length - 1) + '3';
 return finished;
 }",0
1431,"public void run () {
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" starting"");
 synchronized (BadRunnable.class) {
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" acquired the monitor on BadRunnable.class"");
 latch.countDown ();
 while (true) {
 try {
 latch.await ();
 } catch (InterruptedException ex) {
 continue;
 }
 break;
 }
 }
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" released the monitor on BadRunnable.class"");
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" ending"");
 }","@Override
 public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
 super.onRequestPermissionsResult (requestCode, permissions, grantResults);
 if (grantResults.length == 0 || grantResults == null) {
 } else if (grantResults [0] == PackageManager.PERMISSION_GRANTED) {
 } else if (grantResults [0] == PackageManager.PERMISSION_DENIED) {
 }
 }",0
835,"public static void stars (int size) {
 for (int i = 0;
 i < size * size; i ++) {
 int y = i / size, x = i % size;
 System.out.print ((x >= y && x < size - y) || (x >= size - y - 1 && x <= y) ? '*' : ' ');
 if (x == size - 1) System.out.println ();
 }
 }","static void stars () {
 final int MAX_WIDTH = 7;
 for (int i = 0;
 i < 7; ++ i) {
 int width;
 if (i < 3) width = MAX_WIDTH - i * 2;
 else if (i > 3) width = (i - 3) * 2 + 1;
 else width = 1;
 for (int j = 0;
 j < (MAX_WIDTH - width) / 2; ++ j) {
 System.out.print ("" "");
 }
 for (int j = 0;
 j < width; ++ j) {
 System.out.print (""*"");
 }
 for (int j = 0;
 j < (MAX_WIDTH - width) / 2; ++ j) {
 System.out.print ("" "");
 }
 System.out.println ();
 }
 }",1
1907,"public static void main (String [] args) {
 Runnable r = new Runnable () {
 public void run () {
 final JCheckBox show = new JCheckBox (""Have Text"", false);
 JPanel ui = new JPanel (new FlowLayout (FlowLayout.CENTER, 5, 5));
 ui.add (show);
 final CardLayout cl = new CardLayout ();
 final JPanel cards = new JPanel (cl);
 ui.add (cards);
 cards.add (new JPanel (), ""notext"");
 cards.add (new JTextField (8), ""text"");
 ItemListener al = new ItemListener () {
 public void itemStateChanged (ItemEvent ie) {
 if (show.isSelected ()) {
 cl.show (cards, ""text"");
 } else {
 cl.show (cards, ""notext"");
 }
 }}
 ;
 show.addItemListener (al);
 JOptionPane.showMessageDialog (null, ui);
 }}
 ;
 SwingUtilities.invokeLater (r);
 }","public void run () {
 for (int i = 0;
 ; i ++) {
 if (i % 1000 == 0) {
 System.out.printf (""get: %d\n"", i);
 }
 Map < K, String > m2 = new HashMap < > (map);
 }
 }",0
1331,"public static void main (String [] args) {
 try {
 ArrayList < String > sentences = null;
 sentences = new ArrayList < String > ();
 sentences.add (""Mary and Meera are my classmates."");
 sentences.add (""Mary and Meera are my classmates."");
 sentences.add (""Meera and Mary are my classmates."");
 sentences.add (""Alice and Bobe are not my classmates."");
 sentences.add (""Some totally different sentence."");
 wordAnalyser (sentences);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public static void main (String [] args) {
 String output = """";
 Multiset < String > wordsMultiset = HashMultiset.create ();
 String [] words = ""AAABBBBCC"".split ("""");
 wordsMultiset.addAll (Arrays.asList (words));
 for (Entry < String > string : wordsMultiset.entrySet ()) {
 if (! string.getElement ().isEmpty ()) output += string.getCount () + """" + string.getElement ();
 }
 System.out.println (output);
 }",0
476,"public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }",1
147,"public int maxBlock (String str) {
 Pattern pattern = Pattern.compile (""(.)(\\1)*"");
 Matcher matcher = pattern.matcher (str);
 int max = 0;
 while (matcher.find ()) {
 max = Math.max (max, matcher.group ().length ());
 }
 return max;
 }","public int maxBlock (String str) {
 int max = 0;
 int count = 1;
 char o = ' ';
 for (int i = 0;
 i < str.length (); i ++) {
 char c = str.charAt (i);
 if (c == o) {
 count ++;
 if (count > max) {
 max = count;
 }
 } else {
 count = 1;
 if (count > max) {
 max = count;
 }
 }
 o = c;
 }
 return max;
 }",1
607,"public static void printTable (String [] countries, int [] populations) {
 int countryLength = 0;
 long populationLength = 0;
 for (String country : countries) {
 if (country.length () > countryLength) countryLength = country.length ();
 }
 for (int i : populations) {
 if (String.valueOf (i).length () > populationLength) populationLength = String.valueOf (i).length ();
 }
 for (int i = 0;
 i < countries.length; i ++) System.out.format (""%-"" + (countryLength + 1) + ""s|%"" + (populationLength + 1) + ""d\n"", countries [i], populations [i]);
 }","public static void printTable (String [] countries, int [] populations) {
 int defaultLength = 10;
 int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
 int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
 for (int i = 0;
 i < countries.length; i ++) {
 System.out.format (""%-"" + maxCountryLength + ""s | %"" + maxPopulationLength + ""d\n"", countries [i], populations [i]);
 }
 }",1
1680,"public static void main (String [] args) {
 String userInput = ""Peter"";
 int length = userInput.length ();
 int m, j, i, n = 0;
 for (m = length % 2 > 0 ? 1 : 2; m < length * 2; m += 2) {
 i = m < length ? m : length * 2 - m;
 for (j = 0; j < length - 1 - i / 2; ++ j) {
 System.out.print ("" "");
 }
 for (j = 0; j < i; ++ j) {
 char c = userInput.charAt (n ++ % length);
 c = j == 0 ? Character.toUpperCase (c) : Character.toLowerCase (c);
 System.out.print (c);
 }
 System.out.println ("""");
 }
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",0
774,"public static void main (String [] args) {
 JFrame frame = new JFrame ();
 JPanel panel = new JPanel ();
 JPanel another = new JPanel ();
 JPanel emptyPanel = new JPanel ();
 emptyPanel.setPreferredSize (new Dimension (700, 50));
 frame.setSize (700, 500);
 panel.setMaximumSize (new Dimension (300, 200));
 panel.setMinimumSize (new Dimension (300, 200));
 panel.setPreferredSize (new Dimension (300, 200));
 panel.setBackground (Color.green);
 panel.setCursor (new Cursor (java.awt.Cursor.HAND_CURSOR));
 frame.setDefaultCloseOperation (WindowConstants.EXIT_ON_CLOSE);
 another.add (emptyPanel, BorderLayout.NORTH);
 another.add (panel, BorderLayout.CENTER);
 frame.add (another);
 frame.setVisible (true);
 frame.setLocationRelativeTo (null);
 }","public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 JFrame frame = new FrameDemo ();
 frame.setVisible (true);
 }}
 );
 }",1
37,"public static void main (String [] args) {
 Scanner in = new Scanner (System.in);
 System.out.println (""Insert The Sentence"");
 String [] sentence = in.nextLine ().split ("" "");
 ArrayList < String > allDigrams = new ArrayList < String > ();
 for (int i = 0;
 i < sentence.length; i ++) {
 for (int j = 0;
 j < sentence [i].length (); j ++) {
 String oneDigram = """";
 if (j < sentence [i].length () - 1) {
 oneDigram += sentence [i].charAt (j);
 oneDigram += sentence [i].charAt (j + 1);
 allDigrams.add (oneDigram);
 }
 }
 }
 ArrayList < Integer > frequency = new ArrayList < Integer > ();
 ArrayList < String > digrams = new ArrayList < String > ();
 int freqIndex = 0;
 while (allDigrams.size () > 0) {
 frequency.add (freqIndex, 0);
 for (int j = 0;
 j < allDigrams.size (); j ++) {
 if (allDigrams.get (0).equalsIgnoreCase (allDigrams.get (j))) {
 frequency.set (freqIndex, frequency.get (freqIndex) + 1);
 }
 }
 String dig = allDigrams.get (0);
 while (allDigrams.contains (dig)) {
 allDigrams.remove (dig);
 }
 digrams.add (dig);
 freqIndex ++;
 }
 for (int i = 0;
 i < frequency.size (); i ++) {
 for (int j = 0;
 j < frequency.size () - i - 1; j ++) {
 if (frequency.get (j) < frequency.get (j + 1) || ((frequency.get (j) == frequency.get (j + 1)) && (digrams.get (j).charAt (0) > digrams.get (j + 1).charAt (0))) || ((digrams.get (j).charAt (0) == digrams.get (j + 1).charAt (0)) && (digrams.get (j).charAt (1) > digrams.get (j + 1).charAt (1)))) {
 int swap = frequency.get (j);
 String swapS = digrams.get (j);
 frequency.set (j, frequency.get (j + 1));
 frequency.set (j + 1, swap);
 digrams.set (j, digrams.get (j + 1));
 digrams.set (j + 1, swapS);
 }
 }
 }
 String sortedResult = """";
 for (int i = 0;
 i < frequency.size (); i ++) {
 sortedResult += digrams.get (i) + "":"" + frequency.get (i) + "" "";
 }
 System.out.println (sortedResult);
 }","public static void main (String args []) {
 int ci, i, j, k, l = 0;
 String str, str1, result, subString;
 char c1, c2, ch;
 Scanner scan = new Scanner (System.in);
 System.out.print (""Enter a String : "");
 str = scan.nextLine ();
 i = str.length ();
 for (c1 = 'A'; c1 <= 'z'; c1 ++) {
 for (c2 = 'A'; c2 <= 'z'; c2 ++) {
 result = new String (new char [] {c1, c2});
 k = 0;
 for (j = 0; j < i - 1; j ++) {
 subString = str.substring (j, j + 2);
 if (result.equals (subString)) {
 k ++;
 }
 }
 if (k > 0) {
 System.out.println ("""" + result + "": "" + k);
 }
 }
 }
 }",1
289,"public int solution (int X, int [] A) {
 HashSet < Integer > hset = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= X) hset.add (A [i]);
 if (hset.size () == X) return i;
 }
 return - 1;
 }","public int solution (final int X, final int [] A) {
 Set < Integer > emptyPosition = new HashSet < Integer > ();
 for (int i = 1;
 i <= X; i ++) {
 emptyPosition.add (i);
 }
 for (int i = 0;
 i < A.length; i ++) {
 emptyPosition.remove (A [i]);
 if (emptyPosition.size () == 0) {
 return i;
 }
 }
 return - 1;
 }",1
35,"public static void main (String [] args) {
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int mArray [] = new int [5];
 int j = 0;
 for (int i = 0;
 i < array.length; i ++) {
 if (array [i] > lower (mArray)) {
 mArray [lowerPos (mArray)] = array [i];
 }
 }
 System.out.println (Arrays.toString (mArray));
 }","public static void main (String args []) {
 int i;
 int large [] = new int [5];
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int max = 0, index;
 for (int j = 0;
 j < 5; j ++) {
 max = array [0];
 index = 0;
 for (i = 1; i < array.length; i ++) {
 if (max < array [i]) {
 max = array [i];
 index = i;
 }
 }
 large [j] = max;
 array [index] = Integer.MIN_VALUE;
 System.out.println (""Largest "" + j + "" : "" + large [j]);
 }
 }",1
1205,"public static void main (String [] args) {
 Runnable r = new Runnable () {
 @Override
 public void run () {
 WhiteSpace ws = new WhiteSpace ();
 Container gui = ws.getGui ();
 JFrame f = new JFrame (""White (OK Red) Space"");
 f.add (gui);
 f.setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
 f.setLocationByPlatform (true);
 f.setResizable (false);
 f.pack ();
 f.setVisible (true);
 }}
 ;
 SwingUtilities.invokeLater (r);
 }","public void type (char character) {
 switch (character) {
 case 'a' :
 doType (VK_A);
 break;
 case 'b' :
 doType (VK_B);
 break;
 case 'c' :
 doType (VK_C);
 break;
 case 'd' :
 doType (VK_D);
 break;
 case 'e' :
 doType (VK_E);
 break;
 case 'f' :
 doType (VK_F);
 break;
 case 'g' :
 doType (VK_G);
 break;
 case 'h' :
 doType (VK_H);
 break;
 case 'i' :
 doType (VK_I);
 break;
 case 'j' :
 doType (VK_J);
 break;
 case 'k' :
 doType (VK_K);
 break;
 case 'l' :
 doType (VK_L);
 break;
 case 'm' :
 doType (VK_M);
 break;
 case 'n' :
 doType (VK_N);
 break;
 case 'o' :
 doType (VK_O);
 break;
 case 'p' :
 doType (VK_P);
 break;
 case 'q' :
 doType (VK_Q);
 break;
 case 'r' :
 doType (VK_R);
 break;
 case 's' :
 doType (VK_S);
 break;
 case 't' :
 doType (VK_T);
 break;
 case 'u' :
 doType (VK_U);
 break;
 case 'v' :
 doType (VK_V);
 break;
 case 'w' :
 doType (VK_W);
 break;
 case 'x' :
 doType (VK_X);
 break;
 case 'y' :
 doType (VK_Y);
 break;
 case 'z' :
 doType (VK_Z);
 break;
 case 'A' :
 doType (VK_SHIFT, VK_A);
 break;
 case 'B' :
 doType (VK_SHIFT, VK_B);
 break;
 case 'C' :
 doType (VK_SHIFT, VK_C);
 break;
 case 'D' :
 doType (VK_SHIFT, VK_D);
 break;
 case 'E' :
 doType (VK_SHIFT, VK_E);
 break;
 case 'F' :
 doType (VK_SHIFT, VK_F);
 break;
 case 'G' :
 doType (VK_SHIFT, VK_G);
 break;
 case 'H' :
 doType (VK_SHIFT, VK_H);
 break;
 case 'I' :
 doType (VK_SHIFT, VK_I);
 break;
 case 'J' :
 doType (VK_SHIFT, VK_J);
 break;
 case 'K' :
 doType (VK_SHIFT, VK_K);
 break;
 case 'L' :
 doType (VK_SHIFT, VK_L);
 break;
 case 'M' :
 doType (VK_SHIFT, VK_M);
 break;
 case 'N' :
 doType (VK_SHIFT, VK_N);
 break;
 case 'O' :
 doType (VK_SHIFT, VK_O);
 break;
 case 'P' :
 doType (VK_SHIFT, VK_P);
 break;
 case 'Q' :
 doType (VK_SHIFT, VK_Q);
 break;
 case 'R' :
 doType (VK_SHIFT, VK_R);
 break;
 case 'S' :
 doType (VK_SHIFT, VK_S);
 break;
 case 'T' :
 doType (VK_SHIFT, VK_T);
 break;
 case 'U' :
 doType (VK_SHIFT, VK_U);
 break;
 case 'V' :
 doType (VK_SHIFT, VK_V);
 break;
 case 'W' :
 doType (VK_SHIFT, VK_W);
 break;
 case 'X' :
 doType (VK_SHIFT, VK_X);
 break;
 case 'Y' :
 doType (VK_SHIFT, VK_Y);
 break;
 case 'Z' :
 doType (VK_SHIFT, VK_Z);
 break;
 case '`' :
 doType (VK_BACK_QUOTE);
 break;
 case '0' :
 doType (VK_0);
 break;
 case '1' :
 doType (VK_1);
 break;
 case '2' :
 doType (VK_2);
 break;
 case '3' :
 doType (VK_3);
 break;
 case '4' :
 doType (VK_4);
 break;
 case '5' :
 doType (VK_5);
 break;
 case '6' :
 doType (VK_6);
 break;
 case '7' :
 doType (VK_7);
 break;
 case '8' :
 doType (VK_8);
 break;
 case '9' :
 doType (VK_9);
 break;
 case '-' :
 doType (VK_MINUS);
 break;
 case '=' :
 doType (VK_EQUALS);
 break;
 case '~' :
 doType (VK_BACK_QUOTE);
 break;
 case '!' :
 doType (VK_SHIFT, VK_EXCLAMATION_MARK);
 break;
 case '@' :
 doType (VK_SHIFT, VK_AT);
 break;
 case '#' :
 doType (VK_SHIFT, VK_NUMBER_SIGN);
 break;
 case '$' :
 doType (VK_SHIFT, VK_DOLLAR);
 break;
 case '%' :
 doType (VK_SHIFT, VK_5);
 break;
 case '^' :
 doType (VK_SHIFT, VK_CIRCUMFLEX);
 break;
 case '&' :
 doType (VK_SHIFT, VK_AMPERSAND);
 break;
 case '*' :
 doType (VK_SHIFT, VK_ASTERISK);
 break;
 case '(' :
 doType (VK_LEFT_PARENTHESIS);
 break;
 case ')' :
 doType (VK_RIGHT_PARENTHESIS);
 break;
 case '_' :
 doType (VK_SHIFT, VK_UNDERSCORE);
 break;
 case '+' :
 doType (VK_SHIFT, VK_PLUS);
 break;
 case '\t' :
 doType (VK_TAB);
 break;
 case '\n' :
 doType (VK_ENTER);
 break;
 case '[' :
 doType (VK_OPEN_BRACKET);
 break;
 case ']' :
 doType (VK_CLOSE_BRACKET);
 break;
 case '\\' :
 doType (VK_BACK_SLASH);
 break;
 case '{' :
 doType (VK_SHIFT, VK_OPEN_BRACKET);
 break;
 case '}' :
 doType (VK_SHIFT, VK_CLOSE_BRACKET);
 break;
 case '|' :
 doType (VK_SHIFT, VK_BACK_SLASH);
 break;
 case ';' :
 doType (VK_SEMICOLON);
 break;
 case ':' :
 doType (VK_SHIFT, VK_COLON);
 break;
 case '\'' :
 doType (VK_QUOTE);
 break;
 case '""' :
 doType (VK_SHIFT, VK_QUOTEDBL);
 break;
 case ',' :
 doType (VK_COMMA);
 break;
 case '<' :
 doType (VK_SHIFT, VK_COMMA);
 break;
 case '.' :
 doType (VK_PERIOD);
 break;
 case '>' :
 doType (VK_SHIFT, VK_PERIOD);
 break;
 case '/' :
 doType (VK_SLASH);
 break;
 case '?' :
 doType (VK_SHIFT, VK_SLASH);
 break;
 case ' ' :
 doType (VK_SPACE);
 break;
 case '\b' :
 doType (VK_BACK_SPACE);
 break;
 default :
 throw new IllegalArgumentException (""Cannot type character "" + character);
 }
 }",0
1104,"public static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) {
 return false;
 }
 for (int i = 0;
 i < s2.length (); i ++) {
 if (! s1.contains ("""" + s2.charAt (i))) {
 return false;
 }
 s1 = s1.replaceFirst ("""" + s2.charAt (i), """");
 s2 = s2.replaceFirst ("""" + s2.charAt (i), """");
 }
 return true;
 }","public static boolean check (double x, double y, double x1, double y1, double x2, double y2) {
 double dx1 = x - x1, dx2 = x2 - x1, dy1 = y - y1, dy2 = y2 - y1;
 double dotp = dx1 * dx2 + dy1 * dy2;
 double theta = Math.acos (dotp / (Math.sqrt (dx1 * dx1 + dy1 * dy1) * Math.sqrt (dx2 * dx2 + dy2 * dy2)));
 theta = Math.abs (theta);
 if (theta > (Math.PI / 2)) return false;
 dx1 = x - x2;
 dx2 = x1 - x2;
 dy1 = y - y2;
 dy2 = y1 - y2;
 dotp = dx1 * dx2 + dy1 * dy2;
 theta = Math.acos (dotp / (Math.sqrt (dx1 * dx1 + dy1 * dy1) * Math.sqrt (dx2 * dx2 + dy2 * dy2)));
 theta = Math.abs (theta);
 if (theta > (Math.PI / 2)) return false;
 return true;
 }",0
553,"void permute (char [] alphabet, int k) {
 int permutationNumber = (int) Math.pow (alphabet.length, k);
 for (int i = 0;
 i < permutationNumber; i ++) {
 for (int j = 0;
 j < k; j ++) {
 System.out.print (alphabet [(i + (j * i / alphabet.length)) % alphabet.length]);
 }
 System.out.println ();
 }
 }","static void permute (int level, String prefix) {
 if (level == 0) {
 System.out.println (prefix);
 return;
 }
 for (int i = 0;
 i < s.length (); i ++) permute (level - 1, prefix + s.charAt (i));
 }",1
1146,"public VV remove (String key) {
 synchronized (lock) {
 Item < VV > item = cache.remove (key);
 if (item != null) {
 return item.payload;
 } else {
 return null;
 }
 }
 }","public static void main (String [] args) {
 Scanner s = new Scanner (System.in);
 int n = Integer.parseInt (s.nextLine ());
 int [] [] a = new int [n] [n];
 for (int i = 0;
 i < n; i ++) {
 String str = s.nextLine ();
 String [] tempArray = str.split ("" "");
 for (int j = 0;
 j < n; j ++) {
 a [i] [j] = Integer.parseInt (tempArray [j]);
 }
 }
 int x = 0;
 int y = 0;
 int sum = 0;
 for (int i = 0;
 i < n; i ++) {
 x += a [i] [i];
 }
 for (int p = 0;
 p < n; p ++) {
 int k = a.length - p - 1;
 y += a [p] [a.length - p - 1];
 k += - 1;
 }
 sum = x - y;
 System.out.println (Math.abs (sum));
 }",0
945,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }","private void transform (HSSFRow rowOld, XSSFRow rowNew) {
 XSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 if (rowOld.getRowStyle () != null) {
 Integer hash = rowOld.getRowStyle ().hashCode ();
 if (! this.styleMap.containsKey (hash)) this.transform (hash, rowOld.getRowStyle (), this.workbookNew.createCellStyle ());
 rowNew.setRowStyle (this.styleMap.get (hash));
 }
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform ((HSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }",1
1971,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if ("""".equals (name)) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || """".equals (decimalValue))) {
 String zeroDecimalValue = """";
 for (int i = 0;
 i < decimalValue.length (); i ++) {
 zeroDecimalValue = zeroDecimalValue + ""0"";
 }
 if (decimalValue.equals (zeroDecimalValue)) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (""zero"").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 } else {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 }
 return name;
 }","public static void deleteRecursive (File path) {
 path.listFiles (new FileFilter () {
 @Override
 public boolean accept (File pathname) {
 if (pathname.isDirectory ()) {
 pathname.listFiles (this);
 pathname.delete ();
 } else {
 pathname.delete ();
 }
 return false;
 }}
 );
 path.delete ();
 }",0
908,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 boolean tensFound = false;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number >= 20) {
 buffer.append (TOKENS [(number / 10) - 2]);
 number %= 10;
 tensFound = true;
 } else {
 number %= 20;
 }
 if (number != 0) {
 if (tensFound) {
 buffer.append (UNION_SEPARATOR);
 }
 buffer.append (unitProcessor.getName (number));
 }
 return buffer.toString ();
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! """".equals (highName)) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! """".equals (lowName)) {
 buffer.append (SEPARATOR);
 }
 }
 if (! """".equals (lowName)) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }",1
761,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 String high, low;
 if (value.length () < getPartDivider ()) {
 high = """";
 low = value;
 } else {
 int index = value.length () - getPartDivider ();
 high = value.substring (0, index);
 low = value.substring (index);
 }
 String highName = getHighProcessor ().getName (high);
 String lowName = getLowProcessor ().getName (low);
 if (! """".equals (highName)) {
 buffer.append (highName);
 buffer.append (SEPARATOR);
 buffer.append (getToken ());
 if (! """".equals (lowName)) {
 buffer.append (SEPARATOR);
 }
 }
 if (! """".equals (lowName)) {
 buffer.append (lowName);
 }
 return buffer.toString ();
 }","public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if ("""".equals (name)) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || """".equals (decimalValue))) {
 String zeroDecimalValue = """";
 for (int i = 0;
 i < decimalValue.length (); i ++) {
 zeroDecimalValue = zeroDecimalValue + ""0"";
 }
 if (decimalValue.equals (zeroDecimalValue)) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (""zero"").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 } else {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 }
 return name;
 }",1
973,"public View getView (int position, View convertView, ViewGroup parent) {
 View rowView = convertView;
 if (rowView == null) {
 LayoutInflater inflater = context.getLayoutInflater ();
 rowView = inflater.inflate (R.layout.test_row, null);
 final TestViewHolder viewHolder = new TestViewHolder ();
 viewHolder.tvCounter = (TextView) rowView.findViewById (R.id.tvCounter);
 rowView.setTag (viewHolder);
 }
 TestViewHolder holder = (TestViewHolder) rowView.getTag ();
 final TextView tv = holder.tvCounter;
 CountDownTimer cdt = counters.get (holder.tvCounter);
 if (cdt != null) {
 cdt.cancel ();
 cdt = null;
 }
 Date date = values.get (position);
 long currentDate = Calendar.getInstance ().getTime ().getTime ();
 long limitDate = date.getTime ();
 long difference = limitDate - currentDate;
 cdt = new CountDownTimer (difference, 1000) {
 @Override
 public void onTick (long millisUntilFinished) {
 int days = 0;
 int hours = 0;
 int minutes = 0;
 int seconds = 0;
 String sDate = """";
 if (millisUntilFinished > DateUtils.DAY_IN_MILLIS) {
 days = (int) (millisUntilFinished / DateUtils.DAY_IN_MILLIS);
 sDate += days + ""d"";
 }
 millisUntilFinished -= (days * DateUtils.DAY_IN_MILLIS);
 if (millisUntilFinished > DateUtils.HOUR_IN_MILLIS) {
 hours = (int) (millisUntilFinished / DateUtils.HOUR_IN_MILLIS);
 }
 millisUntilFinished -= (hours * DateUtils.HOUR_IN_MILLIS);
 if (millisUntilFinished > DateUtils.MINUTE_IN_MILLIS) {
 minutes = (int) (millisUntilFinished / DateUtils.MINUTE_IN_MILLIS);
 }
 millisUntilFinished -= (minutes * DateUtils.MINUTE_IN_MILLIS);
 if (millisUntilFinished > DateUtils.SECOND_IN_MILLIS) {
 seconds = (int) (millisUntilFinished / DateUtils.SECOND_IN_MILLIS);
 }
 sDate += "" "" + String.format (""%02d"", hours) + "":"" + String.format (""%02d"", minutes) + "":"" + String.format (""%02d"", seconds);
 tv.setText (sDate.trim ());
 }@Override
 public void onFinish () {
 tv.setText (""Finished"");
 }}
 ;
 counters.put (tv, cdt);
 cdt.start ();
 return rowView;
 }","public View getView (int position, View convertView, ViewGroup parent) {
 convertView = mInflater.inflate (R.layout.listview_row, null);
 TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
 TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
 Item item = data.get (position);
 tvName.setText (item.getName ());
 myTimer.setTimer (tvTimer, item.getTime ());
 return convertView;
 }",1
134,"public static void main (String [] args) {
 n = 4;
 set = new Vector < String > (4);
 d = new int [6];
 set.add (""a"");
 set.add (""b"");
 set.add (""c"");
 set.add (""d"");
 recursion (0);
 }","public static void main (String [] args) {
 for (int i = 1;
 i < 16; ++ i) {
 if ((i & 1) > 0) System.out.print (""A"");
 if ((i & 2) > 0) System.out.print (""B"");
 if ((i & 4) > 0) System.out.print (""C"");
 if ((i & 8) > 0) System.out.print (""D"");
 System.out.println ("""");
 }
 }",1
1685,"public static void main (String [] args) {
 BinaryTreeWithoutRecursion < Integer > ls = new BinaryTreeWithoutRecursion < > ();
 ls.insert (1);
 ls.insert (2);
 ls.insert (3);
 ls.insert (4);
 ls.insert (5);
 ls.insert (6);
 ls.insert (7);
 ls.inOrderPrint ();
 }","public int [] solution (String S, int [] P, int [] Q) {
 int [] result = new int [P.length];
 int [] factor1 = new int [S.length ()];
 int [] factor2 = new int [S.length ()];
 int [] factor3 = new int [S.length ()];
 int [] factor4 = new int [S.length ()];
 int factor1Sum = 0;
 int factor2Sum = 0;
 int factor3Sum = 0;
 int factor4Sum = 0;
 for (int i = 0;
 i < S.length (); i ++) {
 switch (S.charAt (i)) {
 case 'A' :
 factor1Sum ++;
 break;
 case 'C' :
 factor2Sum ++;
 break;
 case 'G' :
 factor3Sum ++;
 break;
 case 'T' :
 factor4Sum ++;
 break;
 default :
 break;
 }
 factor1 [i] = factor1Sum;
 factor2 [i] = factor2Sum;
 factor3 [i] = factor3Sum;
 factor4 [i] = factor4Sum;
 }
 for (int i = 0;
 i < P.length; i ++) {
 int start = P [i];
 int end = Q [i];
 if (start == 0) {
 if (factor1 [end] > 0) {
 result [i] = 1;
 } else if (factor2 [end] > 0) {
 result [i] = 2;
 } else if (factor3 [end] > 0) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 } else {
 if (factor1 [end] > factor1 [start - 1]) {
 result [i] = 1;
 } else if (factor2 [end] > factor2 [start - 1]) {
 result [i] = 2;
 } else if (factor3 [end] > factor3 [start - 1]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 }
 return result;
 }",0
1655,"public static void main (String...a) {
 System.out.print (""Enter the String"");
 Scanner sc = new Scanner (System.in);
 String st = sc.nextLine ();
 int [] ar = new int [256];
 for (int i = 0;
 i < st.length (); i ++) {
 ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
 }
 for (int i = 0;
 i < 256; i ++) {
 char ch = (char) i;
 if (ar [i] > 0) {
 if (ar [i] == 1) {
 System.out.print (ch);
 } else {
 System.out.print (ch + """" + ar [i]);
 }
 }
 }
 }","public static final int gcd (int a, int b) {
 if (a == Integer.MIN_VALUE) {
 if (b == Integer.MIN_VALUE) throw new IllegalArgumentException (""gcd() is greater than Integer.MAX_VALUE"");
 return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
 }
 if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
 a = Math.abs (a);
 b = Math.abs (b);
 if (a == 0) return b;
 if (b == 0) return a;
 int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
 a>>= factorsOfTwoInA;
 b>>= factorsOfTwoInB;
 while (a != b) {
 if (a > b) {
 a = (a - b);
 a>>= Integer.numberOfTrailingZeros (a);
 } else {
 b = (b - a);
 b>>= Integer.numberOfTrailingZeros (b);
 }
 }
 return a << commonFactorsOfTwo;
 }",0
203,"private void initData () {
 testData = new ArrayList < EventStatus > ();
 testData.add (new EventStatus (""Mach-1"", 1476950160000L, 1));
 testData.add (new EventStatus (""Mach-1"", 1476952200000L, 2));
 testData.add (new EventStatus (""Mach-1"", 1476964800000L, 4));
 testData.add (new EventStatus (""Mach-1"", 1476966600000L, 3));
 testData.add (new EventStatus (""Mach-2"", 1476943200000L, 1));
 testData.add (new EventStatus (""Mach-2"", 1476946800000L, 4));
 testData.add (new EventStatus (""Mach-2"", 1476954000000L, 2));
 testData.add (new EventStatus (""Mach-2"", 1476955800000L, 1));
 testData.add (new EventStatus (""Mach-2"", 1476973800000L, 3));
 testData.add (new EventStatus (""Mach-3"", 1476959400000L, 2));
 testData.add (new EventStatus (""Mach-3"", 1476966600000L, 1));
 testData.add (new EventStatus (""Mach-3"", 1476970200000L, 4));
 testData.add (new EventStatus (""Mach-3"", 1476972000000L, 1));
 testData.add (new EventStatus (""Mach-3"", 1476986400000L, 2));
 }","private void initData () {
 testData = new ArrayList < EventStatus > ();
 testData.add (new EventStatus (""Mach-1"", 1477468500000L, 1, 0));
 testData.add (new EventStatus (""Mach-1"", 1477472100000L, 2, 0));
 testData.add (new EventStatus (""Mach-1"", 1477474200000L, 5, 0));
 testData.add (new EventStatus (""Mach-1"", 1477476000000L, 3, 0));
 testData.add (new EventStatus (""Mach-1"", 1477479600000L, 4, 0));
 testData.add (new EventStatus (""Mach-1"", 1477486800000L, 1, 0));
 testData.add (new EventStatus (""Mach-2"", 1477465200000L, 3, 1));
 testData.add (new EventStatus (""Mach-2"", 1477472400000L, 2, 1));
 testData.add (new EventStatus (""Mach-2"", 1477474200000L, 5, 1));
 testData.add (new EventStatus (""Mach-2"", 1477476000000L, 2, 1));
 testData.add (new EventStatus (""Mach-2"", 1477479600000L, 3, 1));
 testData.add (new EventStatus (""Mach-2"", 1477486800000L, 4, 1));
 ArrayList < String > list = new ArrayList < > ();
 for (EventStatus eventStatus : testData) {
 if (list.contains (eventStatus.getName ())) continue;
 else list.add (eventStatus.getName ());
 }
 catArray = new String [list.size ()];
 catArray = list.toArray (catArray);
 }",1
183,"public String startOz (String str) {
 if (str != null) {
 char [] arr = str.toLowerCase ().toCharArray ();
 boolean oTest = arr.length >= 1 && arr [0] == 'o';
 boolean zTest = arr.length >= 2 && arr [1] == 'z';
 if (oTest && zTest) {
 return ""oz"";
 } else if (oTest) {
 return ""o"";
 } else if (zTest) {
 return ""z"";
 }
 }
 return """";
 }","public String startOz (String str) {
 int len = str.length ();
 if (len < 1) return new String ("""");
 if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String (""oz"");
 if (str.charAt (0) == 'o') return new String (""o"");
 if (str.charAt (1) == 'z') return new String (""z"");
 return new String ("""");
 }",1
109,"public void actionPerformed (ActionEvent evt) {
 NewComboBox combo = (NewComboBox) evt.getSource ();
 String selection = combo.getSelectedItem ().toString ();
 for (int i = 0;
 i < comboBoxes.length; i ++) {
 NewComboBox comboI = comboBoxes [i];
 if (comboI != combo && comboI.getSelectedItem ().equals (selection)) {
 comboI.setSelectedItem (combo.getPreviousSelectedItem ());
 }
 }
 }","public void actionPerformed (ActionEvent e) {
 String item = (String) mainComboBox.getSelectedItem ();
 Object o = subItems.get (item);
 if (o == null) {
 subComboBox.setModel (new DefaultComboBoxModel ());
 } else {
 subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
 }
 }",1
690,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 System.out.println (""how many number you want to put in the pot?"");
 int num = input.nextInt ();
 int numbers [] = new int [num];
 for (int i = 0;
 i < num; i ++) {
 System.out.println (""number"" + i + "":"");
 numbers [i] = input.nextInt ();
 }
 for (int temp : numbers) {
 System.out.print (temp + ""\t"");
 }
 input.close ();
 }","public static void main (String [] args) {
 List < String > list = new ArrayList < String > ();
 Scanner stdin = new Scanner (System.in);
 do {
 System.out.println (""Current list is "" + list);
 System.out.println (""Add more? (y/n)"");
 if (stdin.next ().startsWith (""y"")) {
 System.out.println (""Enter : "");
 list.add (stdin.next ());
 } else {
 break;
 }
 } while (true);
 stdin.close ();
 System.out.println (""List is "" + list);
 String [] arr = list.toArray (new String [0]);
 System.out.println (""Array is "" + Arrays.toString (arr));
 }",1
1235,"public static void main (String [] args) {
 Scanner scan = new Scanner (System.in);
 int numOfItems = 20, maxItems = 0;
 String arrayOfNames [] = new String [numOfItems];
 String Temp = """";
 for (int i = 0;
 i < arrayOfNames.length; i ++) {
 System.out.print (""Enter Item "" + (i + 1) + "" : "");
 Temp = scan.nextLine ();
 if (Temp.equals (arrayOfNames [0])) {
 maxItems = i;
 break;
 } else {
 arrayOfNames [i] = Temp;
 }
 }
 for (int i = 0;
 i < maxItems; i ++) {
 System.out.print (""Item # "" + (i + 1) + "" : "");
 System.out.print (arrayOfNames [i] + ""\n"");
 }
 }","public static void main (String [] args) {
 int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
 int [] B = new int [A.length];
 int [] C = new int [A.length];
 int t = 4;
 int countb = 0;
 int countc = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= t) {
 B [countb ++] = A [i];
 } else {
 C [countc ++] = A [i];
 }
 }
 System.out.println (Arrays.toString (B));
 System.out.println (Arrays.toString (C));
 }",0
1911,"public void remove (E element) {
 Node n = head;
 Node tmp;
 while (n != null && ! n.data.equals (element)) {
 tmp = n;
 n = n.previous;
 }
 if (n == null) {
 System.out.println (""Element "" + element + "" not found."");
 } else {
 tmp.prev = n.prev;
 n.prev = null;
 System.out.println (""Element "" + element + "" removed."");
 }
 }","public int read () throws IOException {
 if (currentPos < currentLineEnd) {
 in.seek (currentPos ++);
 int readByte = in.readByte ();
 return readByte;
 } else if (currentPos > lastPosInFile && currentLineStart < currentLineEnd) {
 findPrevLine ();
 if (lastChar != '\n' && lastChar != '\r') {
 return '\n';
 } else {
 return read ();
 }
 } else if (currentPos < 0) {
 return - 1;
 } else {
 findPrevLine ();
 return read ();
 }
 }",0
601,"public static void main (String [] args) throws TwilioRestException {
 TwilioRestClient client = new TwilioRestClient (ACCOUNT_SID, AUTH_TOKEN);
 List < NameValuePair > params = new ArrayList < NameValuePair > ();
 params.add (new BasicNameValuePair (""Body"", ""Test Twilio message""));
 params.add (new BasicNameValuePair (""To"", ""+14159352345""));
 params.add (new BasicNameValuePair (""From"", ""+14158141829""));
 MessageFactory messageFactory = client.getAccount ().getMessageFactory ();
 Message message = messageFactory.create (params);
 System.out.println (message.getSid ());
 }","public static void main (String args []) {
 GSMConnect gsm = new GSMConnect (comPort);
 if (gsm.init ()) {
 try {
 System.out.println (""Initialization Success"");
 gsm.connect ();
 Thread.sleep (5000);
 gsm.checkStatus ();
 Thread.sleep (5000);
 gsm.sendMessage (""+91XXXXXXXX"", ""Trial Success"");
 Thread.sleep (1000);
 gsm.hangup ();
 Thread.sleep (1000);
 gsm.closePort ();
 gsm.outCommand ();
 System.exit (1);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 } else {
 System.out.println (""Can't init this card"");
 }
 }",1
189,"public static void main (String [] args) {
 String pass = ""admin"";
 Scanner input = new Scanner (System.in);
 for (int i = 0;
 i < 3; i ++) {
 System.out.print (""Insert the admin pass: "");
 String test = input.nextLine ();
 if (pass.equals (test)) {
 System.out.print (""Access granted"");
 i = 3;
 } else {
 System.out.println (""Incorrect password, you have "" + (2 - i) + "" attempts remaining"");
 }
 }
 }","public static void main (String [] args) {
 String pass = ""admin"";
 Scanner input = new Scanner (System.in);
 System.out.print (""Insert the admin pass: "");
 String test = input.nextLine ();
 if (pass.equals (test)) {
 System.out.print (""Access granted"");
 } else {
 for (int i = 1;
 i < 3; i ++) {
 System.out.print (""You have "" + i + "" try(es): "");
 test = input.nextLine ();
 if (pass.equals (test)) {
 System.out.print (""Access granted"");
 break;
 } else if (i == 2) {
 System.out.print (""Access denied"");
 }
 }
 }
 }",1
170,"public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Display Dialogs"");
 for (Window window : Window.getWindows ()) {
 if (window instanceof JDialog) {
 JDialog dialog = (JDialog) window;
 System.out.println (""\t"" + dialog.getTitle () + "" "" + dialog.isDisplayable ());
 }
 }
 }","public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Create Dialog"");
 JDialog dialog = new JDialog ();
 dialog.getContentPane ().setLayout (null);
 for (int i = 0;
 i < 200; i ++) {
 dialog.add (new JTextField (""some text""));
 }
 dialog.setTitle (""Dialog "" + count ++);
 dialog.setLocation (count * 25, count * 25);
 dialog.setVisible (true);
 System.out.println (""\tCreated "" + dialog.getTitle ());
 }",1
741,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFSheet sheetOld, XSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 XSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (HSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }",1
119,"public void start (Stage primaryStage) {
 try {
 stage = primaryStage;
 gotoLogin ();
 primaryStage.show ();
 } catch (Exception ex) {
 Logger.getLogger (App.class.getName ()).log (Level.SEVERE, null, ex);
 }
 }","@Override
 public void start (Stage stage) throws Exception {
 URL location = getClass ().getResource (""Main.fxml"");
 FXMLLoader fxmlLoader = new FXMLLoader ();
 fxmlLoader.setLocation (location);
 fxmlLoader.setBuilderFactory (new JavaFXBuilderFactory ());
 Parent root = (Parent) fxmlLoader.load (location.openStream ());
 Scene scene = new Scene (root);
 stage.setScene (scene);
 MainController mainController = fxmlLoader.getController ();
 mainController.setStage (stage);
 mainController.showStage ();
 }",1
405,"public static void main (String...argv) throws ClassNotFoundException {
 Class < Foo > fooClass = loadClass ();
 initializeClass (fooClass);
 URLClassLoader myClassLoader = ((URLClassLoader) InitializeClassMultipleTimes.class.getClassLoader ());
 URL [] urls = myClassLoader.getURLs ();
 for (int i = 0;
 i < 2; i ++) {
 URLClassLoader newClassLoader = new URLClassLoader (urls, null);
 System.out.format (""%nLoading class using another class loader%n"", Foo.class.getSimpleName ());
 Class < ? > fooClassAgain = Class.forName (fooClass.getName (), false, newClassLoader);
 initializeClass (fooClassAgain);
 }
 }","public static void main (String [] args) {
 CustomClassLoader loader = new CustomClassLoader ();
 try {
 Class < ? > c = loader.findClass (""sample.Sample"");
 Object o = c.newInstance ();
 } catch (ClassNotFoundException e) {
 e.printStackTrace ();
 } catch (InstantiationException e) {
 e.printStackTrace ();
 } catch (IllegalAccessException e) {
 e.printStackTrace ();
 }
 }",1
1603,"public static void main (String [] args) {
 Scanner stdin = new Scanner (System.in);
 String [] wordArray = new String [10000];
 int [] wordCount = new int [10000];
 int numWords = 0;
 while (stdin.hasNextLine ()) {
 String s = stdin.nextLine ();
 ArrayList < String > noDuplicated = new ArrayList < String > ();
 String [] words = s.replaceAll (""[^a-zA-Z ]"", """").toLowerCase ().split (""\\s+"");
 for (int i = 0;
 i < words.length; i ++) {
 if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
 }
 for (int i = 0;
 i < noDuplicated.size (); i ++) {
 int count = 0;
 for (int j = 0;
 j < words.length; j ++) {
 if (noDuplicated.get (i).equals (words [j])) count ++;
 }
 System.out.println (""word count: → "" + words [i] + "" "" + count);
 }
 }
 }","public static boolean isPerfectSquare (long n) {
 if (n < 0) {
 return false;
 } else {
 switch ((byte) n) {
 case - 128 :
 case - 127 :
 case - 124 :
 case - 119 :
 case - 112 :
 case - 111 :
 case - 103 :
 case - 95 :
 case - 92 :
 case - 87 :
 case - 79 :
 case - 71 :
 case - 64 :
 case - 63 :
 case - 60 :
 case - 55 :
 case - 47 :
 case - 39 :
 case - 31 :
 case - 28 :
 case - 23 :
 case - 15 :
 case - 7 :
 case 0 :
 case 1 :
 case 4 :
 case 9 :
 case 16 :
 case 17 :
 case 25 :
 case 33 :
 case 36 :
 case 41 :
 case 49 :
 case 57 :
 case 64 :
 case 65 :
 case 68 :
 case 73 :
 case 81 :
 case 89 :
 case 97 :
 case 100 :
 case 105 :
 case 113 :
 case 121 :
 long i = (n * INV3465)>>> 52;
 if (! good3465 [(int) i]) {
 return false;
 } else {
 long r = round (Math.sqrt (n));
 return r * r == n;
 }
 default :
 return false;
 }
 }
 }",0
1846,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 boolean tensFound = false;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number >= 20) {
 buffer.append (TOKENS [(number / 10) - 2]);
 number %= 10;
 tensFound = true;
 } else {
 number %= 20;
 }
 if (number != 0) {
 if (tensFound) {
 buffer.append (UNION_SEPARATOR);
 }
 buffer.append (unitProcessor.getName (number));
 }
 return buffer.toString ();
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String formatedSource = source.subSequence (start, end).toString ();
 String destPrefix = dest.subSequence (0, dstart).toString ();
 String destSuffix = dest.subSequence (dend, dest.length ()).toString ();
 String result = destPrefix + formatedSource + destSuffix;
 result = result.replace ("","", ""."");
 Matcher matcher = mPattern.matcher (result);
 if (matcher.matches ()) {
 return null;
 }
 return """";
 }",0
582,"public int solution (int N) {
 String binary = Integer.toString (N, 2);
 int largestGap = 0;
 for (int i = 1, gap = 0;
 i < binary.length (); i ++) {
 while (i < binary.length () && binary.charAt (i) == '0') {
 i ++;
 gap ++;
 }
 if (gap > largestGap && i < binary.length ()) {
 largestGap = gap;
 }
 gap = 0;
 }
 return largestGap;
 }","public int solution (int N) {
 int result = 0;
 while (N > 0) {
 if ((N & 1) == 1) {
 int temp = 0;
 while ((N>>= 1) > 0 && ((N & 1) != 1)) {
 temp ++;
 }
 result = Math.max (result, temp);
 } else {
 N>>= 1;
 }
 }
 return result;
 }",1
132,"public void run () {
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" starting"");
 synchronized (BadRunnable.class) {
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" acquired the monitor on BadRunnable.class"");
 latch.countDown ();
 while (true) {
 try {
 latch.await ();
 } catch (InterruptedException ex) {
 continue;
 }
 break;
 }
 }
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" released the monitor on BadRunnable.class"");
 System.out.println (""Thread "" + Thread.currentThread ().getId () + "" ending"");
 }","public void run () {
 String threadName = Thread.currentThread ().getName ();
 try {
 first.lock ();
 latch.countDown ();
 System.out.println (threadName + "": locked first lock"");
 latch.await ();
 System.out.println (threadName + "": attempting to lock second lock"");
 second.lock ();
 System.out.println (threadName + "": never reached"");
 } catch (InterruptedException e) {
 throw new RuntimeException (e);
 }
 }",1
463,"public static void main (String [] args) throws Exception {
 Console console = System.console ();
 if (console == null) {
 System.out.println (""Unable to fetch console"");
 return;
 }
 String line = console.readLine ();
 console.printf (""I saw this line: %s"", line);
 }","public static void main (final String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.println (""Enter some text, or '"" + EXIT_COMMAND + ""' to quit"");
 while (true) {
 System.out.print (""><![CDATA[ "");
 String input = br.readLine ();
 System.out.println (input);
 if (input.length () == EXIT_COMMAND.length () && input.toLowerCase ().equals (EXIT_COMMAND)) {
 System.out.println (""Exiting."");
 return;
 }
 System.out.println (""...response goes here..."");
 }
 }",1
1628,"public static boolean twoDuplicates (int [] values) {
 boolean twoDuplicate = false;
 int counter = 0;
 Arrays.sort (values);
 int old = values [0];
 boolean numberSeen = false;
 for (int i = 0;
 i < values.length; i ++) {
 if (values [i] == old) {
 if (! numberSeen) {
 counter ++;
 numberSeen = true;
 }
 } else {
 numberSeen = false;
 old = values [i];
 }
 }
 if (counter == 2) twoDuplicate = true;
 return twoDuplicate;
 }","public static void main (String [] args) {
 Scanner scan = new Scanner (System.in);
 int numOfItems = 20, maxItems = 0;
 String arrayOfNames [] = new String [numOfItems];
 String Temp = """";
 for (int i = 0;
 i < arrayOfNames.length; i ++) {
 System.out.print (""Enter Item "" + (i + 1) + "" : "");
 Temp = scan.nextLine ();
 if (Temp.equals (arrayOfNames [0])) {
 maxItems = i;
 break;
 } else {
 arrayOfNames [i] = Temp;
 }
 }
 for (int i = 0;
 i < maxItems; i ++) {
 System.out.print (""Item # "" + (i + 1) + "" : "");
 System.out.print (arrayOfNames [i] + ""\n"");
 }
 }",0
1790,"public static void main (String [] args) {
 int a = 100;
 int b = 1000;
 int lowest = b;
 int highest = a;
 int count = 100000;
 Random random = new Random ();
 for (int i = 0;
 i < count; i ++) {
 int nextNumber = (int) ((Math.abs (random.nextDouble ()) * (b - a))) + a;
 if (nextNumber < a || nextNumber > b) {
 System.err.println (""number not in range :"" + nextNumber);
 } else {
 System.out.println (nextNumber);
 }
 if (nextNumber < lowest) {
 lowest = nextNumber;
 }
 if (nextNumber > highest) {
 highest = nextNumber;
 }
 }
 System.out.println (""Produced "" + count + "" numbers from "" + lowest + "" to "" + highest);
 }","public void manage () {
 double speed = getSpeedfromVehicle ();
 if ((speed >= 0 && speed <= 10) && state != SpeedState.LOW) {
 state = SpeedState.LOW;
 System.out.println (""Low Speed mode"");
 } else if ((speed > 10 && speed < 60) && state != SpeedState.MEDIUM) {
 state = SpeedState.MEDIUM;
 System.out.println (""Medium Speed Mode"");
 } else if ((speed >= 60) && state != SpeedState.HIGH) {
 state = SpeedState.HIGH;
 System.out.println (""High Speed Mode"");
 }
 }",0
581,"public static void main (String [] args) {
 BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Please enter user name : "");
 String username = null;
 try {
 username = reader.readLine ();
 } catch (IOException e) {
 e.printStackTrace ();
 }
 System.out.println (""You entered : "" + username);
 Scanner in = new Scanner (System.in);
 System.out.print (""Please enter user name : "");
 username = in.nextLine ();
 System.out.println (""You entered : "" + username);
 Console console = System.console ();
 username = console.readLine (""Please enter user name : "");
 System.out.println (""You entered : "" + username);
 }","public static void main (String [] args) throws IOException {
 BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
 System.out.print (""Enter String"");
 String s = br.readLine ();
 System.out.print (""Enter Integer:"");
 try {
 int i = Integer.parseInt (br.readLine ());
 } catch (NumberFormatException nfe) {
 System.err.println (""Invalid Format!"");
 }
 }",1
663,"public static int solution (int X, int [] A) {
 Set < Integer > values = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (values.add (A [i])) X --;
 if (X == 0) return i;
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 HashSet < Integer > hset = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= X) hset.add (A [i]);
 if (hset.size () == X) return i;
 }
 return - 1;
 }",1
554,"public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }",1
1920,"public void filter (String [] words, BufferedReader reader) throws IOException {
 String text;
 while ((text = reader.readLine ()) != null) {
 for (int i = 0;
 i < words.length; i ++) {
 if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
 System.out.println (text);
 break;
 }
 }
 }
 }","private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }",0
936,"public static void main (String args []) {
 java.awt.EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 new RowSorterDefaults ();
 }}
 );
 }","public static void main (String args []) {
 UIManager.getLookAndFeelDefaults ().put (""Table.ascendingSortIcon"", new BevelArrowIcon (BevelArrowIcon.UP, false, false));
 UIManager.getLookAndFeelDefaults ().put (""Table.descendingSortIcon"", new BevelArrowIcon (BevelArrowIcon.DOWN, false, false));
 java.awt.EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 new RowSorterCustom ();
 }}
 );
 }",1
477,"public static void main (String [] args) {
 System.out.println (""*** "" + FrenchNumberToWords.convert (0));
 System.out.println (""*** "" + FrenchNumberToWords.convert (9));
 System.out.println (""*** "" + FrenchNumberToWords.convert (19));
 System.out.println (""*** "" + FrenchNumberToWords.convert (21));
 System.out.println (""*** "" + FrenchNumberToWords.convert (28));
 System.out.println (""*** "" + FrenchNumberToWords.convert (71));
 System.out.println (""*** "" + FrenchNumberToWords.convert (72));
 System.out.println (""*** "" + FrenchNumberToWords.convert (80));
 System.out.println (""*** "" + FrenchNumberToWords.convert (81));
 System.out.println (""*** "" + FrenchNumberToWords.convert (89));
 System.out.println (""*** "" + FrenchNumberToWords.convert (90));
 System.out.println (""*** "" + FrenchNumberToWords.convert (91));
 System.out.println (""*** "" + FrenchNumberToWords.convert (97));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100));
 System.out.println (""*** "" + FrenchNumberToWords.convert (101));
 System.out.println (""*** "" + FrenchNumberToWords.convert (110));
 System.out.println (""*** "" + FrenchNumberToWords.convert (120));
 System.out.println (""*** "" + FrenchNumberToWords.convert (200));
 System.out.println (""*** "" + FrenchNumberToWords.convert (201));
 System.out.println (""*** "" + FrenchNumberToWords.convert (232));
 System.out.println (""*** "" + FrenchNumberToWords.convert (999));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2000000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (3000000000L));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2147483647));
 }","public static void main (String...args) {
 processor = new DefaultProcessor ();
 long [] values = new long [] {0, 4, 10, 12, 100, 108, 299, 1000, 1003, 2040, 45213, 100000, 100005, 100010, 202020, 202022, 999999, 1000000, 1000001, 10000000, 10000007, 99999999, Long.MAX_VALUE, Long.MIN_VALUE};
 String [] strValues = new String [] {""0"", ""1.30"", ""0001.00"", ""3.141592""};
 for (long val : values) {
 System.out.println (val + "" = "" + processor.getName (val));
 }
 for (String strVal : strValues) {
 System.out.println (strVal + "" = "" + processor.getName (strVal));
 }
 StringBuilder bigNumber = new StringBuilder ();
 for (int d = 0;
 d < 66; d ++) {
 bigNumber.append ((char) ((Math.random () * 10) + '0'));
 }
 bigNumber.append (""."");
 for (int d = 0;
 d < 26; d ++) {
 bigNumber.append ((char) ((Math.random () * 10) + '0'));
 }
 System.out.println (bigNumber.toString () + "" = "" + processor.getName (bigNumber.toString ()));
 }",1
186,"public void tick (float delta) {
 for (Entity e : entities) {
 if (color == Color.WHITE) {
 if (getSurrounding (- 32, - 32) != null && getSurrounding (- 32, - 32).getColor () == Color.BLACK) {
 if (getSurrounding (- 32, - 32).getStrength () < strength) {
 getSurrounding (- 32, - 32).setStrength (- 50);
 }
 }
 }
 if (! inGame.entities.isEmpty () && strength <= 0) {
 inGame.entities.remove (this);
 }
 }
 }","@Override
 public void tick (float delta) {
 Entity removeEntity = null;
 for (Entity e : entities) {
 e.tick (delta);
 if (e.checkStrength ()) {
 removeEntity = e;
 break;
 }
 }
 if (removeEntity != null) {
 entities.remove (removeEntity);
 }
 player.tick (delta);
 }",1
340,"public static void main (String [] args) {
 String userInput = ""Peter"";
 int length = userInput.length ();
 int m, j, i, n = 0;
 for (m = length % 2 > 0 ? 1 : 2; m < length * 2; m += 2) {
 i = m < length ? m : length * 2 - m;
 for (j = 0; j < length - 1 - i / 2; ++ j) {
 System.out.print ("" "");
 }
 for (j = 0; j < i; ++ j) {
 char c = userInput.charAt (n ++ % length);
 c = j == 0 ? Character.toUpperCase (c) : Character.toLowerCase (c);
 System.out.print (c);
 }
 System.out.println ("""");
 }
 }","public static void main (String [] args) {
 Scanner keyboard = new Scanner (System.in);
 String userInput = keyboard.next ();
 String concatenated = userInput;
 int i, cumSum = 0;
 ArrayList < Integer > helperIndex = new ArrayList < > ();
 for (i = 1; i < userInput.length (); i += 2) {
 helperIndex.add (i);
 cumSum += i;
 }
 for (i = userInput.length (); i > 0; i -= 2) {
 helperIndex.add (i);
 cumSum += i;
 }
 int numOfWordRepitition = cumSum / userInput.length ();
 for (i = 0; i < numOfWordRepitition; i ++) {
 concatenated += userInput;
 }
 String substr;
 int prev = helperIndex.get (0);
 int next = helperIndex.get (0);
 substr = concatenated.substring (0, helperIndex.get (0));
 System.out.println (Character.toUpperCase (substr.charAt (0)) + substr.substring (1));
 for (i = 1; i < userInput.length (); i ++) {
 next += helperIndex.get (i);
 substr = concatenated.substring (prev, next);
 substr = Character.toUpperCase (substr.charAt (0)) + substr.substring (1);
 System.out.println (substr);
 prev = next;
 }
 }",1
333,"public static void main (String [] args) throws Exception {
 Class unsafeClass = Class.forName (""sun.misc.Unsafe"");
 Field f = unsafeClass.getDeclaredField (""theUnsafe"");
 f.setAccessible (true);
 Unsafe unsafe = (Unsafe) f.get (null);
 System.out.print (""4..3..2..1..."");
 try {
 for (;;) unsafe.allocateMemory (1024 * 1024);
 } catch (Error e) {
 System.out.println (""Boom :)"");
 e.printStackTrace ();
 }
 }","public static void main (String [] args) throws IOException {
 ZipOutputStream zos = new ZipOutputStream (new FileOutputStream (new File (""big.jar"")));
 zos.putNextEntry (new ZipEntry (""resource.txt""));
 zos.write (""not too much in here"".getBytes ());
 zos.closeEntry ();
 zos.putNextEntry (new ZipEntry (""largeFile.out""));
 for (int i = 0;
 i < 10000000; i ++) {
 zos.write ((int) (Math.round (Math.random () * 100) + 20));
 }
 zos.closeEntry ();
 zos.close ();
 }",1
1925,"private void transform (HSSFCell cellOld, XSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (! this.styleMap.containsKey (hash)) {
 this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }","public boolean equals (Object other) {
 boolean result;
 if ((other == null) || (getClass () != other.getClass ())) {
 result = false;
 } else {
 People otherPeople = (People) other;
 result = name.equals (otherPeople.name) && age == otherPeople.age;
 }
 return result;
 }",0
91,"public V get (K1 key1, K2 key2) {
 if (! mapOfMap.containsKey (key1)) {
 key1 = null;
 }
 if (! mapOfMap.get (key1).containsKey (key2)) {
 key2 = null;
 }
 return mapOfMap.get (key1).get (key2);
 }","public V get (K...keys) {
 if (keys == null) {
 return value;
 }
 if (expectedNumberOfKeys == - 1) {
 return null;
 }
 if (expectedNumberOfKeys == 0) {
 return value;
 }
 if (expectedNumberOfKeys != keys.length) {
 throw new IllegalArgumentException (""Expecting "" + expectedNumberOfKeys + "" keys.  Was "" + keys.length);
 }
 Map < K, Map > currentMap = topMap;
 for (int i = 0;
 i < keys.length - 1; i ++) {
 currentMap = (Map) getDefault (currentMap, keys [i]);
 }
 V result = (V) getDefault (currentMap, keys [keys.length - 1]);
 return result;
 }",1
1297,"static void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 String strAbsPathSrc = src.getAbsolutePath ();
 String strAbsPathDest = dest.getAbsolutePath ();
 try {
 Files.walkFileTree (src.toPath (), new SimpleFileVisitor < Path > () {
 @Override
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
 if (dstFile.exists ()) return FileVisitResult.CONTINUE;
 if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
 Files.copy (file, dstFile.toPath ());
 return FileVisitResult.CONTINUE;
 }}
 );
 } catch (IOException e) {
 return;
 }
 return;
 }","public void deleteRecursive (File path) {
 File [] c = path.listFiles ();
 System.out.println (""Cleaning out folder:"" + path.toString ());
 for (File file : c) {
 if (file.isDirectory ()) {
 System.out.println (""Deleting file:"" + file.toString ());
 deleteRecursive (file);
 file.delete ();
 } else {
 file.delete ();
 }
 }
 path.delete ();
 }",0
196,"public void move (Container container) {
 if (leftRight) {
 x += deltaX;
 if (x >= canvasWidth) {
 leftRight = false;
 updateDelta ();
 }
 } else {
 x += - deltaX;
 if (x <= 0) {
 leftRight = true;
 updateDelta ();
 }
 }
 if (upDown) {
 y += deltaY;
 upDown = ! (y >= (canvasHeight));
 if (y >= (canvasHeight)) {
 upDown = false;
 updateDelta ();
 }
 } else {
 y += - deltaY;
 if (y <= 0) {
 upDown = true;
 updateDelta ();
 }
 }
 }","public void move (Container container) {
 if (x >= canvasWidth || x <= 0) {
 deltaX = - 1 * deltaX;
 }
 if (y >= canvasHeight || y <= 0) {
 deltaY = - 1 * deltaY;
 }
 x += deltaX;
 y += deltaY;
 }",1
515,"protected void onCreate (Bundle savfedInstanceState) {
 super.onCreate (savedInstanceState);
 setContentView (R.layout.indexpage);
 listView = (ListView) findViewById (R.id.pageList);
 editTextB = (EditText) findViewById (R.id.searchB);
 listView.setAdapter (new PagesAdapter (this));
 listView.setOnItemClickListener (new OnItemClickListener () {
 public void onItemClick (AdapterView < ? > parent, View view, int position, long id) {
 }}
 );
 }","protected void onCreate (Bundle savedInstanceState) {
 super.onCreate (savedInstanceState);
 setContentView (R.layout.activity_main);
 listView = (ListView) findViewById (R.id.pageList);
 editTextB = (EditText) findViewById (R.id.searchB);
 adapter1 = new PagesAdapter (this);
 listView.setAdapter (adapter1);
 adapter1.notifyDataSetChanged ();
 listView.setOnItemClickListener (this);
 editTextB.addTextChangedListener (new TextWatcher () {
 @Override
 public void onTextChanged (CharSequence cs, int arg1, int arg2, int arg3) {
 IndexPageActivity.this.adapter1.getFilter ().filter (cs.toString ());
 adapter1.notifyDataSetChanged ();
 }@Override
 public void beforeTextChanged (CharSequence arg0, int arg1, int arg2, int arg3) {
 }@Override
 public void afterTextChanged (Editable arg0) {
 }}
 );
 }",1
1236,"Node reverse (Node n, Node p) {
 if (n == null) return null;
 if (n.next == null) {
 n.next = p;
 return n;
 }
 Node r = reverse (n.next, n);
 n.next = p;
 return r;
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int number;
 if (value.isEmpty ()) {
 number = 0;
 } else if (value.length () > 4) {
 number = Integer.valueOf (value.substring (value.length () - 4), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 1000;
 if (number >= 100) {
 buffer.append (unitProcessor.getName (number / 100));
 buffer.append (SEPARATOR);
 buffer.append (SCALE.getName (EXPONENT));
 }
 String tensName = tensProcessor.getName (number % 100);
 if (! tensName.isEmpty () && (number >= 100)) {
 buffer.append (SEPARATOR);
 }
 buffer.append (tensName);
 return buffer.toString ();
 }",0
1308,"public static void main (String [] args) {
 int size = 10;
 double skew = 2.0;
 ZipfGenerator z0 = new ZipfGenerator (size, skew);
 FastZipfGenerator z1 = new FastZipfGenerator (size, skew);
 long before = 0;
 long after = 0;
 int n = 5000000;
 before = System.nanoTime ();
 Map < Integer, Integer > counts0 = computeCounts (z0, size, n);
 after = System.nanoTime ();
 System.out.println (counts0 + "", duration "" + (after - before) / 1e6);
 before = System.nanoTime ();
 Map < Integer, Integer > counts1 = computeCounts (z1, size, n);
 after = System.nanoTime ();
 System.out.println (counts1 + "", duration "" + (after - before) / 1e6);
 }","public static void main (String args []) {
 int i;
 int large [] = new int [5];
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int max = 0, index;
 for (int j = 0;
 j < 5; j ++) {
 max = array [0];
 index = 0;
 for (i = 1; i < array.length; i ++) {
 if (max < array [i]) {
 max = array [i];
 index = i;
 }
 }
 large [j] = max;
 array [index] = Integer.MIN_VALUE;
 System.out.println (""Largest "" + j + "" : "" + large [j]);
 }
 }",0
393,"public static void main (String [] args) {
 String str = ""abcdabghplhhnfl"".toLowerCase ();
 Integer [] ar = new Integer [26];
 for (int i = 0;
 i < str.length (); i ++) {
 int j = str.charAt (i) - 'a';
 if (ar [j] == null) {
 ar [j] = 1;
 } else {
 ar [j] += 1;
 }
 }
 for (int i = 0;
 i < ar.length; i ++) {
 if (ar [i] != null && ar [i] > 1) {
 char c = (char) (97 + i);
 System.out.println (""'"" + c + ""' comes "" + ar [i] + "" times."");
 }
 }
 }","public static void main (String [] args) {
 String name = ""AnuvratAnuvra"";
 char [] arr = name.toCharArray ();
 HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
 for (char val : arr) {
 map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
 }
 for (Entry < Character, Integer > entry : map.entrySet ()) {
 if (entry.getValue () > 1) {
 Character key = entry.getKey ();
 Object value = entry.getValue ();
 System.out.println (key + "":"" + value);
 }
 }
 }",1
980,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFCell cellOld, HSSFCell cellNew) {
 cellNew.setCellComment (cellOld.getCellComment ());
 Integer hash = cellOld.getCellStyle ().hashCode ();
 if (this.styleMap != null && ! this.styleMap.containsKey (hash)) {
 this.transform (workbookOld, workbookNew, hash, cellOld.getCellStyle (), (HSSFCellStyle) workbookNew.createCellStyle ());
 }
 cellNew.setCellStyle (this.styleMap.get (hash));
 switch (cellOld.getCellType ()) {
 case Cell.CELL_TYPE_BLANK :
 break;
 case Cell.CELL_TYPE_BOOLEAN :
 cellNew.setCellValue (cellOld.getBooleanCellValue ());
 break;
 case Cell.CELL_TYPE_ERROR :
 cellNew.setCellValue (cellOld.getErrorCellValue ());
 break;
 case Cell.CELL_TYPE_FORMULA :
 cellNew.setCellValue (cellOld.getCellFormula ());
 break;
 case Cell.CELL_TYPE_NUMERIC :
 cellNew.setCellValue (cellOld.getNumericCellValue ());
 break;
 case Cell.CELL_TYPE_STRING :
 cellNew.setCellValue (cellOld.getStringCellValue ());
 break;
 default :
 System.out.println (""transform: Unbekannter Zellentyp "" + cellOld.getCellType ());
 }
 }","private HSSFFont transform (HSSFWorkbook workbookNew, XSSFFont fontOld) {
 HSSFFont fontNew = workbookNew.createFont ();
 fontNew.setBoldweight (fontOld.getBoldweight ());
 fontNew.setCharSet (fontOld.getCharSet ());
 fontNew.setColor (fontOld.getColor ());
 fontNew.setFontName (fontOld.getFontName ());
 fontNew.setFontHeight (fontOld.getFontHeight ());
 fontNew.setItalic (fontOld.getItalic ());
 fontNew.setStrikeout (fontOld.getStrikeout ());
 fontNew.setTypeOffset (fontOld.getTypeOffset ());
 fontNew.setUnderline (fontOld.getUnderline ());
 return fontNew;
 }",1
1749,"public static int [] MaxNumber (String [] arr) {
 int [] Number_arr = new int [11];
 int count = 1;
 int j = 0;
 int k = 0;
 for (int i = 0;
 i < arr.length - 1; i ++) {
 if (arr [i].equals (arr [i + 1])) count ++;
 else {
 Number_arr [j] = count;
 j ++;
 count = 1;
 }
 }
 Number_arr [j] = count;
 return Number_arr;
 }","public void copyFolder (File src, File dest) throws IOException {
 try (Stream < Path > stream = Files.walk (src.toPath ())) {
 stream.forEachOrdered (sourcePath -> {
 try {
 Files.copy (sourcePath, src.toPath ().resolve (dest.toPath ().relativize (sourcePath)));
 } catch (Exception e) {
 e.printStackTrace ();
 }
 });
 }
 }",0
184,"public static String join (String [] strings, int startIndex, String separator) {
 StringBuffer sb = new StringBuffer ();
 for (int i = startIndex;
 i < strings.length; i ++) {
 if (i != startIndex) sb.append (separator);
 sb.append (strings [i]);
 }
 return sb.toString ();
 }","public static String join (String separator, String...values) {
 if (values.length == 0) return """";
 char [] sep = separator.toCharArray ();
 int totalSize = (values.length - 1) * sep.length;
 for (int i = 0;
 i < values.length; i ++) {
 if (values [i] == null) values [i] = """";
 else totalSize += values [i].length ();
 }
 char [] joined = new char [totalSize];
 int pos = 0;
 for (int i = 0, end = values.length - 1;
 i < end; i ++) {
 System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
 pos += values [i].length ();
 System.arraycopy (sep, 0, joined, pos, sep.length);
 pos += sep.length;
 }
 System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
 return new String (joined);
 }",1
657,"public void itemStateChanged (ItemEvent e) {
 if (e.getStateChange () == ItemEvent.SELECTED) {
 size = Integer.parseInt ((String) box.getSelectedItem ());
 for (i = 1; i <= size; i ++) {
 System.out.print ("" "" + i);
 }
 System.out.println ();
 }
 }","public void itemStateChanged (ItemEvent e) {
 size = Integer.parseInt ((String) box.getSelectedItem ());
 if (e.getStateChange () == ItemEvent.SELECTED) {
 for (i = 1; i <= size; i ++) {
 System.out.print ("" "" + i);
 }
 System.out.println ();
 }
 }",1
654,"public static void main (String args []) {
 int i;
 int large [] = new int [5];
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int max = 0, index;
 for (int j = 0;
 j < 5; j ++) {
 max = array [0];
 index = 0;
 for (i = 1; i < array.length; i ++) {
 if (max < array [i]) {
 max = array [i];
 index = i;
 }
 }
 large [j] = max;
 array [index] = Integer.MIN_VALUE;
 System.out.println (""Largest "" + j + "" : "" + large [j]);
 }
 }","public static void main (String args []) {
 int i;
 int largestSize = 4;
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34};
 int large [] = Arrays.copyOf (array, largestSize);
 int smallest = large [0];
 int smallestIndex = 0;
 for (int j = 1;
 j < large.length; ++ j) {
 if (smallest > large [j]) {
 smallest = large [j];
 smallestIndex = j;
 }
 }
 for (i = large.length; i < array.length; i ++) {
 if (smallest < array [i]) {
 large [smallestIndex] = array [i];
 smallest = large [0];
 smallestIndex = 0;
 for (int j = 1;
 j < large.length; ++ j) {
 if (smallest > large [j]) {
 smallest = large [j];
 smallestIndex = j;
 }
 }
 }
 }
 for (int j = 0;
 j < large.length; j ++) {
 System.out.println (""Largest 5 : "" + large [j]);
 }
 System.out.println ();
 System.out.println (""Largest is: "" + getHighest (large));
 }",1
1090,"public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int number;
 if ("""".equals (value)) {
 number = 0;
 } else if (value.length () > 4) {
 number = Integer.valueOf (value.substring (value.length () - 4), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 1000;
 if (number >= 100) {
 buffer.append (unitProcessor.getName (number / 100));
 buffer.append (SEPARATOR);
 buffer.append (SCALE.getName (EXPONENT));
 }
 String tensName = tensProcessor.getName (number % 100);
 if (! """".equals (tensName) && (number >= 100)) {
 buffer.append (SEPARATOR);
 }
 buffer.append (tensName);
 return buffer.toString ();
 }",0
1109,"Node reverse (Node n, Node p) {
 if (n == null) return null;
 if (n.next == null) {
 n.next = p;
 return n;
 }
 Node r = reverse (n.next, n);
 n.next = p;
 return r;
 }","public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }",0
782,"public static String join (String separator, String...values) {
 StringBuilder sb = new StringBuilder (128);
 int end = 0;
 for (String s : values) {
 if (s != null) {
 sb.append (s);
 end = sb.length ();
 sb.append (separator);
 }
 }
 return sb.substring (0, end);
 }","public static String join (String separator, String...values) {
 if (values.length == 0) return """";
 char [] sep = separator.toCharArray ();
 int totalSize = (values.length - 1) * sep.length;
 for (int i = 0;
 i < values.length; i ++) {
 if (values [i] == null) values [i] = """";
 else totalSize += values [i].length ();
 }
 char [] joined = new char [totalSize];
 int pos = 0;
 for (int i = 0, end = values.length - 1;
 i < end; i ++) {
 System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
 pos += values [i].length ();
 System.arraycopy (sep, 0, joined, pos, sep.length);
 pos += sep.length;
 }
 System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
 return new String (joined);
 }",1
1744,"public static String camelCaser (String str) {
 char [] strChr = str.toCharArray ();
 strChr [0] = Character.toUpperCase (strChr [0]);
 for (int i = 0;
 i < strChr.length; i ++) if (strChr [i] == '_') strChr [i + 1] = Character.toUpperCase (strChr [i + 1]);
 String reply = new String (strChr);
 reply = reply.replace (""_"", """");
 return reply;
 }","public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column) {
 _value = value;
 JTextField textField = new JTextField (_value.toString ());
 textField.addKeyListener (new KeyAdapter () {
 public void keyTyped (KeyEvent e) {
 e.consume ();
 }@Override
 public void keyPressed (KeyEvent e) {
 e.consume ();
 }}
 );
 textField.setEditable (false);
 return textField;
 }",0
1520,"public static String toHexString (byte [] bytes) {
 char [] hexArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
 char [] hexChars = new char [10000000];
 int c = 0;
 int v;
 for (j = 0; j < bytes.length; j ++) {
 v = bytes [j] & 0xFF;
 hexChars [c] = hexArray [v / 16];
 c ++;
 hexChars [c] = hexArray [v % 16];
 c ++;
 }
 return new String (hexChars, 0, c);
 }","public static void main (String [] args) throws InterruptedException {
 final AtomicInteger outputCount = new AtomicInteger (0);
 ExecutorService threadPool = Executors.newFixedThreadPool (THREADS);
 Collection < Callable < Object > > tasks = new ArrayList < > (THREADS);
 for (int i = 0;
 i < THREADS; i ++) {
 tasks.add (new Callable < Object > () {
 private SecureRandom rand = new SecureRandom ();
 private String task () {
 return rand.nextDouble () > 0.5 ? Thread.currentThread ().getName () : null;
 }@Override
 public Object call () {
 for (int i;
 (i = outputCount.get ()) < TASKS;) {
 String output = task ();
 if (output != null) {
 if ((i = outputCount.incrementAndGet ()) < TASKS) {
 System.out.println (output + "": "" + i);
 }
 }
 }
 return null;
 }}
 );
 }
 threadPool.invokeAll (tasks);
 threadPool.shutdownNow ();
 System.out.println (""done"");
 }",0
1931,"public static void main (String [] args) {
 System.out.println (""*** "" + FrenchNumberToWords.convert (0));
 System.out.println (""*** "" + FrenchNumberToWords.convert (9));
 System.out.println (""*** "" + FrenchNumberToWords.convert (19));
 System.out.println (""*** "" + FrenchNumberToWords.convert (21));
 System.out.println (""*** "" + FrenchNumberToWords.convert (28));
 System.out.println (""*** "" + FrenchNumberToWords.convert (71));
 System.out.println (""*** "" + FrenchNumberToWords.convert (72));
 System.out.println (""*** "" + FrenchNumberToWords.convert (80));
 System.out.println (""*** "" + FrenchNumberToWords.convert (81));
 System.out.println (""*** "" + FrenchNumberToWords.convert (89));
 System.out.println (""*** "" + FrenchNumberToWords.convert (90));
 System.out.println (""*** "" + FrenchNumberToWords.convert (91));
 System.out.println (""*** "" + FrenchNumberToWords.convert (97));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100));
 System.out.println (""*** "" + FrenchNumberToWords.convert (101));
 System.out.println (""*** "" + FrenchNumberToWords.convert (110));
 System.out.println (""*** "" + FrenchNumberToWords.convert (120));
 System.out.println (""*** "" + FrenchNumberToWords.convert (200));
 System.out.println (""*** "" + FrenchNumberToWords.convert (201));
 System.out.println (""*** "" + FrenchNumberToWords.convert (232));
 System.out.println (""*** "" + FrenchNumberToWords.convert (999));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2000000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (3000000000L));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2147483647));
 }","public boolean isPrime () {
 int sqrt = (int) Math.sqrt ((double) value);
 for (int i = 2;
 i <= sqrt; i ++) {
 if (value % i == 0) return false;
 }
 return true;
 }",0
593,"public static void main (String args []) {
 int [] arr = new int [10];
 Scanner in = new Scanner (System.in);
 int i, min = 0, max = 0;
 for (i = 0; i <= arr.length; i ++) {
 System.out.print (""Enter any number: "");
 arr [i] = in.nextInt ();
 }
 min = arr [0];
 for (i = 0; i <= 9; i ++) {
 if (arr [i] > max) {
 max = arr [i];
 }
 if (arr [i] < min) {
 min = arr [i];
 }
 }
 System.out.println (""Maximum is: "" + max);
 System.out.println (""Minimum is: "" + min);
 }","public static void main (String [] args) {
 System.out.println (""Main Method Started"");
 Scanner in = new Scanner (System.in);
 System.out.println (""Enter the size of the arr"");
 int size = in.nextInt ();
 System.out.println (""Enter the maximum value of the arr"");
 int max = in.nextInt ();
 int [] arr = initializeArr (max, size);
 print (arr);
 findMinMax (arr);
 System.out.println (""Main Method Ended"");
 }",1
837,"public static void main (String [] args) {
 Scanner scn = new Scanner (System.in);
 int number;
 int nearNumberZero = 0;
 for (int i = 1;
 i <= 5; i ++) {
 System.out.println (""Enter number "" + i);
 number = scn.nextInt ();
 if (i == 1 || Math.abs (number) < Math.abs (nearNumberZero)) nearNumberZero = number;
 }
 System.out.println (""The number near zero 0 is - "" + nearNumberZero);
 scn.close ();
 }","public static void main (String [] args) {
 Scanner scn = new Scanner (System.in);
 ArrayList < Integer > integers = new ArrayList < > ();
 System.out.println (""Enter number 1"");
 integers.add (scn.nextInt ());
 System.out.println (""Enter number 2"");
 integers.add (scn.nextInt ());
 System.out.println (""Enter number 3"");
 integers.add (scn.nextInt ());
 System.out.println (""Enter number 4"");
 integers.add (scn.nextInt ());
 System.out.println (""Enter number 5"");
 integers.add (scn.nextInt ());
 Collections.sort (integers, Comparator.comparingInt (Math :: abs));
 System.out.println (""The number near zero 0 is"" + integers.get (0));
 }",1
1954,"public static void main (String [] args) {
 System.out.println (""*** "" + FrenchNumberToWords.convert (0));
 System.out.println (""*** "" + FrenchNumberToWords.convert (9));
 System.out.println (""*** "" + FrenchNumberToWords.convert (19));
 System.out.println (""*** "" + FrenchNumberToWords.convert (21));
 System.out.println (""*** "" + FrenchNumberToWords.convert (28));
 System.out.println (""*** "" + FrenchNumberToWords.convert (71));
 System.out.println (""*** "" + FrenchNumberToWords.convert (72));
 System.out.println (""*** "" + FrenchNumberToWords.convert (80));
 System.out.println (""*** "" + FrenchNumberToWords.convert (81));
 System.out.println (""*** "" + FrenchNumberToWords.convert (89));
 System.out.println (""*** "" + FrenchNumberToWords.convert (90));
 System.out.println (""*** "" + FrenchNumberToWords.convert (91));
 System.out.println (""*** "" + FrenchNumberToWords.convert (97));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100));
 System.out.println (""*** "" + FrenchNumberToWords.convert (101));
 System.out.println (""*** "" + FrenchNumberToWords.convert (110));
 System.out.println (""*** "" + FrenchNumberToWords.convert (120));
 System.out.println (""*** "" + FrenchNumberToWords.convert (200));
 System.out.println (""*** "" + FrenchNumberToWords.convert (201));
 System.out.println (""*** "" + FrenchNumberToWords.convert (232));
 System.out.println (""*** "" + FrenchNumberToWords.convert (999));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2000000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (3000000000L));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2147483647));
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String replacement = source.subSequence (start, end).toString ();
 String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
 Matcher matcher = mPattern.matcher (newVal);
 if (matcher.matches ()) return null;
 if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
 else return """";
 }",0
1587,"public int solution (int X, int [] A) {
 int len = A.length;
 if (X > len) {
 return - 1;
 }
 int [] isFilled = new int [X];
 int jumped = 0;
 Arrays.fill (isFilled, 0);
 for (int i = 0;
 i < len; i ++) {
 int x = A [i];
 if (x <= X) {
 if (isFilled [x - 1] == 0) {
 isFilled [x - 1] = 1;
 jumped += 1;
 if (jumped == X) {
 return i;
 }
 }
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 HashSet < Integer > hset = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= X) hset.add (A [i]);
 if (hset.size () == X) return i;
 }
 return - 1;
 }",0
944,"public static void main (String [] args) {
 JFrame main = new JFrame ();
 JPanel p = new JPanel ();
 p.setLayout (new BorderLayout ());
 p.add (new JLabel (""test""), BorderLayout.WEST);
 p.add (new JTextField (""growable""), BorderLayout.CENTER);
 p.add (new JComboBox (), BorderLayout.EAST);
 main.add (p);
 main.pack ();
 main.setVisible (true);
 }","public static void main (String [] args) {
 EventQueue.invokeLater (new Runnable () {
 @Override
 public void run () {
 create ();
 }}
 );
 }",1
1462,"public int solution (int [] A) {
 final Set perm = new HashSet ();
 final int size = A.length;
 for (int number : A) {
 if (number > size) return 0;
 perm.add (number);
 }
 if (perm.size () == A.length) return 1;
 else return 0;
 }","public static void main (String [] args) {
 String s = ""aaaabbccccdddeee"";
 String s1 = """";
 String s2 = """";
 int count = 0;
 for (int i = 0;
 i < s.length (); i ++) {
 if (s1.indexOf (s.charAt (i)) < 0) {
 s1 = s1 + s.charAt (i);
 }
 }
 for (int i = 0;
 i < s1.length (); i ++) {
 for (int j = 0;
 j < s.length (); j ++) {
 if (s1.charAt (i) == s.charAt (j)) {
 count ++;
 }
 }
 s2 = s2 + s1.charAt (i) + count;
 count = 0;
 }
 System.out.println (s2);
 }",0
121,"public void mouseMoved (MouseEvent e) {
 int x = width / 2;
 int y = height / 2;
 Point mousePoint = e.getPoint ();
 int deltaX = mousePoint.x - x;
 int deltaY = mousePoint.y - y;
 polyrot = - Math.atan2 (deltaX, deltaY);
 polyrot = Math.toDegrees (polyrot) + 180;
 repaint ();
 }","public void mouseMoved (MouseEvent e) {
 xpos = getX ();
 if (xpos < 0) {
 polyrot --;
 } else if (xpos > 0) {
 polyrot ++;
 }
 repaint ();
 break;
 }",1
1708,"public static void main (String [] args) throws ParseException {
 String month = ""08"";
 String day = ""05"";
 String year = ""2015"";
 String inputDateStr = String.format (""%s/%s/%s"", day, month, year);
 Date inputDate = new SimpleDateFormat (""dd/MM/yyyy"").parse (inputDateStr);
 Calendar calendar = Calendar.getInstance ();
 calendar.setTime (inputDate);
 String dayOfWeek = calendar.getDisplayName (Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.US).toUpperCase ();
 System.out.println (dayOfWeek);
 }","public static boolean isPermutation (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int checker = 0;
 for (int i = 0;
 i < s1.length (); i ++) {
 checker ^= s1.charAt (i) ^ s2.charAt (i);
 }
 return checker == 0;
 }",0
1419,"public int solution (int X, int [] A) {
 HashSet < Integer > hset = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= X) hset.add (A [i]);
 if (hset.size () == X) return i;
 }
 return - 1;
 }","public int [] zeroFront (int [] nums) {
 if (nums == null) {
 return null;
 }
 int [] result = new int [nums.length];
 int zeroesPos = 0;
 int othersPos = result.length - 1;
 for (int i = 0;
 i < nums.length; ++ i) {
 if (nums [i] == 0) {
 result [zeroesPos] = 0;
 ++ zeroesPos;
 } else {
 result [othersPos] = nums [i];
 -- othersPos;
 }
 }
 return result;
 }",0
1652,"public int solution (int X, int [] A) {
 HashSet < Integer > hset = new HashSet < Integer > ();
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= X) hset.add (A [i]);
 if (hset.size () == X) return i;
 }
 return - 1;
 }","public static String validName (Scanner input, Scanner histogram) {
 String user = """";
 String name = input.next ();
 String tmp = """";
 boolean test = false;
 while (histogram.hasNext ()) {
 user = histogram.next ();
 tmp += user + "" "";
 if (name.equalsIgnoreCase (user)) {
 test = true;
 break;
 } else {
 test = false;
 }
 }
 if (! test) {
 System.out.println (""Name not found"");
 user = validName (input, new Scanner (tmp));
 }
 return user;
 }",0
676,"public void actionPerformed (ActionEvent e) {
 tick ();
 int delta = 20;
 int width = SPRITE_WIDTH + 2 * delta;
 int height = width;
 if (moved) {
 int x = oldMX - delta;
 int y = oldMY - delta;
 repaint (x, y, width, height);
 }
 int x = mX - delta;
 int y = mY - delta;
 repaint (x, y, width, height);
 moved = false;
 }","public void actionPerformed (ActionEvent e) {
 switch (direction) {
 case UP :
 draw.incrementY (false);
 break;
 case DOWN :
 draw.incrementY (true);
 break;
 case LEFT :
 draw.incrementX (false);
 break;
 case RIGHT :
 draw.incrementX (true);
 break;
 default :
 break;
 }
 }",1
1715,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if (name.isEmpty ()) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || decimalValue.isEmpty ())) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 return name;
 }","public void printSquare (int min, int max) {
 for (int i = min;
 i <= max; i ++) {
 for (int j = i;
 j <= max; j ++) {
 System.out.print (j);
 }
 for (int k = min;
 k < i; k ++) {
 System.out.print (k);
 }
 System.out.println ();
 }
 }",0
848,"public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Create Dialog"");
 JDialog dialog = new JDialog ();
 dialog.getContentPane ().setLayout (null);
 for (int i = 0;
 i < 200; i ++) {
 dialog.add (new JTextField (""some text""));
 }
 dialog.setTitle (""Dialog "" + count ++);
 dialog.setLocation (count * 25, count * 25);
 dialog.setVisible (true);
 System.out.println (""\tCreated "" + dialog.getTitle ());
 }","public void actionPerformed (ActionEvent e) {
 if (runProcess) {
 for (Window win : Window.getWindows ()) {
 if (win instanceof JDialog) {
 System.out.println (""    Trying to Remove JDialog"");
 win.dispose ();
 }
 }
 System.out.println (""    Remove Cycle Done :-)"");
 runProcess = false;
 new Thread () {
 @Override
 public void run () {
 try {
 Thread.sleep (100);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 Runtime.getRuntime ().gc ();
 }}
 .start ();
 } else {
 pastRemWins ();
 runProcess = true;
 }
 }",1
1648,"public String inputStreamToString (InputStream in) throws IOException {
 ReadableByteChannel channel = Channels.newChannel (in);
 ByteBuffer byteBuffer = ByteBuffer.allocate (1024 * 16);
 ByteArrayOutputStream bout = new ByteArrayOutputStream ();
 WritableByteChannel outChannel = Channels.newChannel (bout);
 while (channel.read (byteBuffer) > 0 || byteBuffer.position () > 0) {
 byteBuffer.flip ();
 outChannel.write (byteBuffer);
 byteBuffer.compact ();
 }
 channel.close ();
 outChannel.close ();
 return bout.toString (UTF_8);
 }","public static int solution (int X, int [] A) {
 int [] counter = new int [X + 1];
 int ans = - 1;
 int x = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (counter [A [i]] == 0) {
 counter [A [i]] = A [i];
 x += 1;
 if (x == X) {
 return i;
 }
 }
 }
 return ans;
 }",0
1650,"public static void printTable (String [] countries, int [] populations) {
 int countryLength = 0;
 long populationLength = 0;
 for (String country : countries) {
 if (country.length () > countryLength) countryLength = country.length ();
 }
 for (int i : populations) {
 if (String.valueOf (i).length () > populationLength) populationLength = String.valueOf (i).length ();
 }
 for (int i = 0;
 i < countries.length; i ++) System.out.format (""%-"" + (countryLength + 1) + ""s|%"" + (populationLength + 1) + ""d\n"", countries [i], populations [i]);
 }","public synchronized void run () {
 int i = 2;
 while (i < 50) {
 while (s.getState () != 1) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 1) System.out.println (""t2 "" + i);
 s.setState (2);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }",0
1756,"public void run () {
 int emptyCycleCounter = 0;
 while (true) {
 int i = counter.get ();
 if (i > MAX_COUNTER) {
 break;
 }
 if (i % 2 == (odd ? 1 : 0)) {
 System.out.println (i + (odd ? "" odd"" : "" even""));
 counter.incrementAndGet ();
 } else {
 emptyCycleCounter ++;
 Thread.yield ();
 }
 }
 System.out.println (""Finished"" + (odd ? "" odd"" : "" even"") + "" with "" + emptyCycleCounter + "" empty cycles."");
 }","public static void main (String [] args) {
 System.out.println (""Enter Number to convert into words"");
 Scanner sc = new Scanner (System.in);
 long num = sc.nextInt ();
 int rem = 0;
 int i = 0;
 while (num > 0) {
 if (i == 0) {
 rem = (int) (num % 1000);
 printText (rem);
 num = num / 1000;
 i ++;
 } else if (num > 0) {
 rem = (int) (num % 100);
 if (rem > 0) text = denom.values () [i - 1] + "" "" + text;
 printText (rem);
 num = num / 100;
 i ++;
 }
 }
 if (i > 0) System.out.println (text);
 else System.out.println (""Zero"");
 }",0
82,"public void switchPairs () {
 ListNode prev = front;
 if (front != null && front.next != null) {
 ListNode temp = front;
 front = front.next;
 temp.next = front.next;
 front.next = temp;
 prev = temp;
 }
 while (prev != null && prev.next != null && prev.next.next != null) {
 ListNode first_node = prev.next;
 ListNode second_node = first_node.next;
 first_node.next = second_node.next;
 second_node.next = first_node;
 prev.next = second_node;
 prev = first_node;
 }
 }","public ListNode switchPairs () {
 if (this == null || this.next == null) return this;
 ListNode top = this.next;
 ListNode first = this;
 ListNode second = first.next;
 do {
 ListNode third = second.next;
 second.next = first;
 first.next = third;
 first = third;
 System.out.println (""@@@ "" + this.toString ());
 if (first != null) {
 second.next.next = first.next;
 second = first.next;
 }
 } while (first != null && second != null);
 return top;
 }",1
90,"public void actionPerformed (ActionEvent actionEvent) {
 doc.setCharacterAttributes (stringIndex, 1, textpane.getStyle (""Red""), true);
 stringIndex ++;
 try {
 if (stringIndex >= doc.getLength () || doc.getText (stringIndex, 1).equals ("" "")) {
 index ++;
 }
 if (index < times.size ()) {
 double delay = times.get (index).doubleValue ();
 timer.setDelay ((int) (delay / WORDS [index].length ()));
 } else {
 timer.stop ();
 System.err.println (""Timer stopped"");
 }
 } catch (BadLocationException e) {
 e.printStackTrace ();
 }
 }","public void actionPerformed (ActionEvent ae) {
 if (count < charsTiming.size ()) {
 highlightNextWord ();
 ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
 ((Timer) ae.getSource ()).restart ();
 } else {
 reset ();
 ((Timer) ae.getSource ()).stop ();
 }
 count ++;
 }",1
801,"boolean isPerfectSquare (long number) {
 if (number < 0) return false;
 if (number < 2) return true;
 for (int i = 0;
 ; i ++) {
 long square = squareTable [i];
 if (square > number) return false;
 while (number % square == 0) {
 number /= square;
 }
 if (number == 1) return true;
 }
 }","public static boolean isPerfectSquare (long n) {
 if (n < 0) {
 return false;
 } else {
 switch ((byte) n) {
 case - 128 :
 case - 127 :
 case - 124 :
 case - 119 :
 case - 112 :
 case - 111 :
 case - 103 :
 case - 95 :
 case - 92 :
 case - 87 :
 case - 79 :
 case - 71 :
 case - 64 :
 case - 63 :
 case - 60 :
 case - 55 :
 case - 47 :
 case - 39 :
 case - 31 :
 case - 28 :
 case - 23 :
 case - 15 :
 case - 7 :
 case 0 :
 case 1 :
 case 4 :
 case 9 :
 case 16 :
 case 17 :
 case 25 :
 case 33 :
 case 36 :
 case 41 :
 case 49 :
 case 57 :
 case 64 :
 case 65 :
 case 68 :
 case 73 :
 case 81 :
 case 89 :
 case 97 :
 case 100 :
 case 105 :
 case 113 :
 case 121 :
 long i = (n * INV3465)>>> 52;
 if (! good3465 [(int) i]) {
 return false;
 } else {
 long r = round (Math.sqrt (n));
 return r * r == n;
 }
 default :
 return false;
 }
 }
 }",1
20,"public static void main (String...args) {
 Runnable r1 = new Runnable () {
 int n;
 public void run () {
 System.out.println (++ n);
 }}
 ;
 fourTimes (fiveTimes (fiveTimes (r1))).run ();
 }","public static void main (String [] args) {
 Object [] numbers = new Object [100];
 Arrays.fill (numbers, new Object () {
 private int count = 0;
 @Override
 public String toString () {
 return Integer.toString (++ count);
 }}
 );
 System.out.println (Arrays.toString (numbers));
 }",1
417,"public static void main (String [] args) {
 String string = ""check duplicate charcters in string"";
 string = string.toLowerCase ();
 char [] charAr = string.toCharArray ();
 Arrays.sort (charAr);
 for (int i = 1;
 i < charAr.length;) {
 int count = recursiveMethod (charAr, i, 1);
 if (count > 1) {
 System.out.println (""'"" + charAr [i] + ""' comes "" + count + "" times"");
 i = i + count;
 } else i ++;
 }
 }","public static void main (String [] args) {
 String name = ""AnuvratAnuvra"";
 char [] arr = name.toCharArray ();
 HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
 for (char val : arr) {
 map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
 }
 for (Entry < Character, Integer > entry : map.entrySet ()) {
 if (entry.getValue () > 1) {
 Character key = entry.getKey ();
 Object value = entry.getValue ();
 System.out.println (key + "":"" + value);
 }
 }
 }",1
1860,"public static void main (String args []) {
 String value = ""This is testing Program testing Program"";
 String item [] = value.split ("" "");
 HashMap < String, Integer > map = new HashMap < > ();
 for (String t : item) {
 if (map.containsKey (t)) {
 map.put (t, map.get (t) + 1);
 } else {
 map.put (t, 1);
 }
 }
 Set < String > keys = map.keySet ();
 for (String key : keys) {
 System.out.println (key);
 System.out.println (map.get (key));
 }
 }","public void type (CharSequence chars, int ms) {
 ms = ms > 0 ? ms : 0;
 for (int i = 0, len = chars.length ();
 i < len; i ++) {
 char c = chars.charAt (i);
 AWTKeyStroke keyStroke = getKeyStroke (c);
 int keyCode = keyStroke.getKeyCode ();
 boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
 if (shift) {
 robot.keyPress (KeyEvent.VK_SHIFT);
 }
 robot.keyPress (keyCode);
 robot.keyRelease (keyCode);
 if (shift) {
 robot.keyRelease (KeyEvent.VK_SHIFT);
 }
 if (ms > 0) {
 robot.delay (ms);
 }
 }
 }",0
1320,"public int tortoiseMoves () {
 int i = tGen ();
 if (i >= 1 && i <= 5) {
 int fastplod = 3;
 return fastplod;
 }
 if (i >= 6 && i <= 8) {
 int slowplod = 1;
 return slowplod;
 }
 if (i >= 9 && i <= 10) {
 int slip = - 6;
 return slip;
 }
 return someDefaultValue;
 }","public void start (Stage stage) throws Exception {
 FXMLLoader loader = new FXMLLoader (getClass ().getResource (""/sample/screen.fxml""));
 AnchorPane shadowPane = loader.load ();
 AnchorPane rootPane = (AnchorPane) shadowPane.lookup (""#rootPane"");
 rootPane.setStyle (""-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.4), 10, 0.5, 0.0, 0.0);"" + ""-fx-background-color: white;"");
 Scene scene = new Scene (shadowPane);
 stage.setScene (scene);
 shadowPane.setBorder (new Border (new BorderStroke (Color.RED, BorderStrokeStyle.SOLID, null, null)));
 shadowPane.setStyle (""-fx-background-color: transparent;"");
 scene.setFill (Color.TRANSPARENT);
 stage.initStyle (StageStyle.TRANSPARENT);
 stage.show ();
 }",0
1356,"public double getSum () {
 if (subAccounts != null) {
 Double sum = 0.0;
 for (int i = 0;
 i < subAccounts.size (); i ++) {
 sum += subAccounts.get (i).getSum ();
 }
 return amount + sum;
 } else {
 return amount;
 }
 }","public static void main (String...args) {
 long start = System.nanoTime ();
 int letters = 26;
 int count = 6;
 final int combinations = (int) Math.pow (letters, count);
 char [] chars = new char [count];
 Arrays.fill (chars, 'a');
 final int last = count - 1;
 OUTER : while (true) {
 for (chars [last] = 'a'; chars [last] <= 'z'; chars [last] += 2) {
 newComination (chars);
 chars [last] ++;
 newComination (chars);
 }
 UPDATED : {
 for (int i = last - 1;
 i >= 0; i --) {
 if (chars [i] ++ >= 'z') chars [i] = 'a';
 else break UPDATED;
 }
 break OUTER;
 }}
 long time = System.nanoTime () - start;
 System.out.printf (""Took %.3f seconds to generate %,d combinations%n"", time / 1e9, combinations);
 }",0
1283,"public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }","public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if ("""".equals (name)) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || """".equals (decimalValue))) {
 String zeroDecimalValue = """";
 for (int i = 0;
 i < decimalValue.length (); i ++) {
 zeroDecimalValue = zeroDecimalValue + ""0"";
 }
 if (decimalValue.equals (zeroDecimalValue)) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (""zero"").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 } else {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 }
 return name;
 }",0
702,"public void contextDestroyed (ServletContextEvent servletContextEvent) {
 if (this.driver != null) {
 try {
 DriverManager.deregisterDriver (driver);
 LOG.info (String.format (""deregistering jdbc driver: %s"", driver));
 } catch (SQLException e) {
 LOG.warn (String.format (""Error deregistering driver %s"", driver), e);
 }
 this.driver = null;
 } else {
 LOG.warn (""No driver to deregister"");
 }
 }","public void contextDestroyed (ServletContextEvent sce) {
 Context initContext = new InitialContext ();
 Context envContext = (Context) initContext.lookup (""java:/comp/env"");
 DataSource datasource = (DataSource) envContext.lookup (""jdbc/database"");
 try {
 java.sql.Driver mySqlDriver = DriverManager.getDriver (""jdbc:mysql://localhost:3306/"");
 DriverManager.deregisterDriver (mySqlDriver);
 } catch (SQLException ex) {
 logger.info (""Could not deregister driver:"".concat (ex.getMessage ()));
 }
 dataSource = null;
 }",1
439,"public void makeGrid (int size) {
 this.lines = size;
 grid = new Cell [size] [size];
 for (int i = 0;
 i < size; i ++) for (int j = 0;
 j < size; j ++) {
 grid [i] [j] = new Cell ();
 }
 }","public void makeGrid (int size) {
 this.lines = size;
 grid = new Cell [size] [size];
 for (int i = 0;
 i < size; i ++) {
 for (int j = 0;
 j < size; j ++) {
 grid [i] [j] = new Cell ();
 }
 }
 }",1
876,"public static void printArray (int [] [] arr) {
 System.out.println (""["");
 int rows = 3;
 int columns = 4;
 int i, j;
 for (i = 0; i < rows; i ++) {
 for (j = 0; j < columns; j ++) {
 System.out.print (arr [i] [j] + "" "");
 }
 System.out.println ();
 }
 System.out.println (""]"");
 }","public static final void printArray (int [] arr) {
 System.out.print (""["");
 for (int i = 0;
 i < arr.length; i ++) {
 if (i == arr.length - 1) System.out.print (arr [i]);
 else System.out.print (arr [i] + "", "");
 }
 System.out.println (""]"");
 }",1
294,"public static String join (Collection s, String delimiter) {
 StringBuffer buffer = new StringBuffer ();
 Iterator iter = s.iterator ();
 while (iter.hasNext ()) {
 buffer.append (iter.next ());
 if (iter.hasNext ()) {
 buffer.append (delimiter);
 }
 }
 return buffer.toString ();
 }","public static String join (String r [], String d) {
 if (r.length == 0) return """";
 StringBuilder sb = new StringBuilder ();
 int i;
 for (i = 0; i < r.length - 1; i ++) {
 sb.append (r [i]);
 sb.append (d);
 }
 sb.append (r [i]);
 return sb.toString ();
 }",1
1064,"public void sort (int [] input) {
 for (int i = 0;
 i < input.length; i ++) {
 for (int j = i + 1;
 j < input.length; j ++) {
 if (input [i] > input [j]) {
 int tmp = input [i];
 input [i] = input [j];
 input [j] = tmp;
 }
 }
 }
 System.out.println (""Slow sorting is done and the result is :"");
 for (int i : input) {
 System.out.print (i + "","");
 }
 }","public String [] [] allUniqueCombinations () {
 List < String > labels = new ArrayList < String > ();
 List < List < String > > lists = new ArrayList < List < String > > ();
 for (Map.Entry < String, Vector < String > > entry : dataStructure.entrySet ()) {
 labels.add (entry.getKey ());
 lists.add (entry.getValue ());
 }
 List < List < String > > combinations = product (lists);
 int m = combinations.size () + 1;
 int n = labels.size ();
 String [] [] answer = new String [m] [n];
 for (int i = 0;
 i < n; i ++) answer [0] [i] = labels.get (i);
 for (int i = 1;
 i < m; i ++) for (int j = 0;
 j < n; j ++) answer [i] [j] = combinations.get (i - 1).get (j);
 return answer;
 }",0
1855,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 double length = 0.39370;
 System.out.println (""Welcome to simple convertor."");
 boolean cont = true;
 while (cont) {
 System.out.println (""Pick an option and its corresponding letter to select."");
 System.out.println (""Farenheight to Celsius: f"");
 System.out.println (""Celsius to Farenheight: c"");
 System.out.println (""Inches to Centimeters: i"");
 System.out.println (""Centimeters to Inches: ce"");
 System.out.println ("""");
 System.out.println (""Make your choice: "");
 String choice = input.nextLine ();
 if (choice.equals (""f"")) {
 float farenheight;
 System.out.println (""Enter temperatue in Fahrenheit: "");
 farenheight = input.nextInt ();
 farenheight = ((farenheight - 32) * 5) / 9;
 System.out.println (""Temperatue in Celsius = "" + farenheight);
 } else if (choice.equals (""c"")) {
 float celsius;
 System.out.println (""Enter temperatue in Celsius: "");
 celsius = input.nextInt ();
 celsius = ((celsius) * 18 / 10) + 32;
 System.out.println (""Temperatue in Farenheight = "" + celsius);
 } else if (choice.equals (""i"")) {
 double inches;
 System.out.println (""Enter length in Inches: "");
 inches = input.nextInt ();
 inches = (inches / length);
 System.out.println (""Length in Centimeters = "" + inches);
 } else if (choice.equals (""ce"")) {
 double centimeters;
 System.out.println (""Enter length in Centimeters: "");
 centimeters = input.nextInt ();
 centimeters = (centimeters * length);
 System.out.println (""Length in Inches is = "" + length);
 }
 choice = input.nextLine ();
 if (""redo"".equals (choice)) {
 cont = true;
 } else {
 cont = false;
 }
 }
 }","public boolean add (P producer, E item) {
 lock.lock ();
 try {
 if (! queues.containsKey (producer)) {
 queues.put (producer, new PriorityBlockingQueue < > ());
 }
 added.signalAll ();
 return queues.get (producer).add (item);
 } finally {
 lock.unlock ();
 }
 }",0
886,"public String toString () {
 StringBuilder b = new StringBuilder (""["");
 for (Field f : getClass ().getFields ()) {
 if (! isStaticField (f)) {
 try {
 b.append (f.getName () + ""="" + f.get (this) + "" "");
 } catch (IllegalAccessException e) {
 }
 }
 }
 b.append (']');
 return b.toString ();
 }","public String toString (Object obj) {
 if (obj == null) return ""null"";
 if (visited.contains (obj)) return ""..."";
 visited.add (obj);
 Class cl = obj.getClass ();
 if (cl == String.class) return (String) obj;
 if (cl.isArray ()) {
 String r = cl.getComponentType () + ""[]{"";
 for (int i = 0;
 i < Array.getLength (obj); i ++) {
 if (i > 0) r += "","";
 Object val = Array.get (obj, i);
 if (cl.getComponentType ().isPrimitive ()) r += val;
 else r += toString (val);
 }
 return r + ""}"";
 }
 String r = cl.getName ();
 do {
 r += ""["";
 Field [] fields = cl.getDeclaredFields ();
 AccessibleObject.setAccessible (fields, true);
 for (Field f : fields) {
 if (! Modifier.isStatic (f.getModifiers ())) {
 if (! r.endsWith (""["")) r += "","";
 r += f.getName () + ""="";
 try {
 Class t = f.getType ();
 Object val = f.get (obj);
 if (t.isPrimitive ()) r += val;
 else r += toString (val);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }
 }
 r += ""]"";
 cl = cl.getSuperclass ();
 } while (cl != null);
 return r;
 }",1
1412,"public synchronized void run () {
 int i = 2;
 while (i < 50) {
 while (s.getState () != 1) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 1) System.out.println (""t2 "" + i);
 s.setState (2);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }","private static void createAndShowGUI () {
 final JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setLayout (new FlowLayout ());
 JButton readerStopButton_ = new JButton ();
 readerStopButton_.setFocusPainted (false);
 readerStopButton_.setBackground (UIManager.getDefaults ().getColor (""Button.light""));
 readerStopButton_.setFont (new Font (""Geneva"", 0, 12));
 readerStopButton_.setText (""<html><center>READER<br>STOP</center></html>\n"");
 readerStopButton_.setHorizontalTextPosition (SwingConstants.CENTER);
 frame.add (readerStopButton_);
 frame.pack ();
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }",0
84,"public boolean handleMessage (SOAPMessageContext context) {
 Boolean isRequest = (Boolean) context.get (MessageContext.MESSAGE_OUTBOUND_PROPERTY);
 if (isRequest) {
 System.out.println (""is Request"");
 } else {
 System.out.println (""is Response"");
 }
 SOAPMessage message = context.getMessage ();
 try {
 SOAPEnvelope envelope = message.getSOAPPart ().getEnvelope ();
 SOAPHeader header = envelope.getHeader ();
 message.writeTo (System.out);
 } catch (SOAPException | IOException e) {
 e.printStackTrace ();
 }
 return true;
 }","public boolean handleMessage (SOAPMessageContext context) {
 SOAPMessage msg = context.getMessage ();
 try {
 msg.writeTo (System.out);
 } catch (Exception ex) {
 Logger.getLogger (LogMessageHandler.class.getName ()).log (Level.SEVERE, null, ex);
 }
 return true;
 }",1
1454,"public static void main (String [] args) throws URISyntaxException, MalformedURLException {
 URLBuilder urlb = new URLBuilder (""www.example.com"");
 urlb.setConnectionType (""http"");
 urlb.addSubfolder (""somesub"");
 urlb.addSubfolder (""anothersub"");
 urlb.addParameter (""param lol"", ""unknown"");
 urlb.addParameter (""paramY"", ""known"");
 String url = urlb.getURL ();
 System.out.println (url);
 urlb = new URLBuilder ();
 urlb.addSubfolder (""servlet"");
 urlb.addSubfolder (""jsp"");
 urlb.addSubfolder (""somesub"");
 urlb.addSubfolder (""anothersub"");
 urlb.addParameter (""param lol"", ""unknown"");
 urlb.addParameter (""paramY"", ""known"");
 String relUrl = urlb.getRelativeURL ();
 System.out.println (relUrl);
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }",0
280,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, Integer hash, HSSFCellStyle styleOld, XSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (workbookOld, workbookNew, styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (workbookNew, styleOld.getFont (workbookOld)));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }",1
1342,"public static void main (String [] args) {
 String str = ""AAABBBBCC"";
 int length = str.length ();
 StringBuilder sb = new StringBuilder ();
 int count = 1;
 for (int i = 0;
 i < length; i ++) {
 if (i == length - 1) {
 sb.append (str.charAt (i) + """" + count);
 break;
 }
 if (str.charAt (i) == str.charAt (i + 1)) {
 count ++;
 } else {
 sb.append (str.charAt (i) + """" + count);
 count = 1;
 }
 }
 System.out.println (sb.toString ());
 }","public TerminalGui [] getTerminalGuis () {
 Component [] comps = this.getComponents ();
 int j = 0;
 for (int i = 0;
 i < comps.length; i ++) {
 if (comps [i] instanceof TerminalGui) {
 j ++;
 }
 }
 TerminalGui [] terminalGuis = new TerminalGui [j];
 int k = 0;
 for (Component c : comps) {
 if (c instanceof TerminalGui) {
 terminalGuis [k] = c;
 k ++;
 }
 }
 return terminalGuis;
 }",0
304,"public void dispatchEvent (Event event) {
 checkNotNull (event);
 CancellableEvent cancellableEvent = null;
 boolean cancellable;
 if (cancellable = event instanceof CancellableEvent) {
 cancellableEvent = (CancellableEvent) event;
 checkArgument (cancellableEvent.isCancelled ());
 }
 handleEvents (event, true);
 handleEvents (event, false, cancellableEvent);
 }","@Override
 public void dispatchEvent (Event event) {
 checkNotNull (event);
 CancellableEvent cancellableEvent = null;
 boolean cancellable;
 if (cancellable = event instanceof CancellableEvent) {
 cancellableEvent = (CancellableEvent) event;
 checkArgument (cancellableEvent.isCancelled ());
 }
 for (EventPriority priority : EventPriority.values ()) {
 Map < Method, EventListener > internalMapping = getRegistry ().getMethodMap (event.getClass (), priority, true);
 if (internalMapping != null) {
 for (Entry < Method, EventListener > entry : internalMapping.entrySet ()) {
 invokeEntry (entry, event);
 }
 }
 }
 for (EventPriority priority : EventPriority.values ()) {
 Map < Method, EventListener > internalMapping = getRegistry ().getMethodMap (event.getClass (), priority, false);
 if (internalMapping != null) {
 for (Entry < Method, EventListener > entry : internalMapping.entrySet ()) {
 invokeEntry (entry, event);
 if (cancellable && cancellableEvent.isCancelled ()) {
 return;
 }
 }
 }
 }
 }",1
776,"public void actionPerformed (ActionEvent e) {
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }","public void actionPerformed (ActionEvent e) {
 System.out.println ();
 System.out.println (""Display Dialogs"");
 for (Window window : Window.getWindows ()) {
 if (window instanceof JDialog) {
 JDialog dialog = (JDialog) window;
 System.out.println (""\t"" + dialog.getTitle () + "" "" + dialog.isDisplayable ());
 }
 }
 }",1
823,"static boolean hasLoop (Node first) {
 if (first == null) return false;
 Node slow, fast;
 slow = fast = first;
 while (true) {
 slow = slow.next;
 if (fast.next == null) fast = null;
 else fast = fast.next.next;
 if (fast == null) return false;
 if (slow == fast) return true;
 }
 }","public static boolean hasLoop (Node root) {
 if (root == null) return false;
 Node slow = root, fast = root;
 int taken = 0, limit = 2;
 while (fast.next != null) {
 fast = fast.next;
 taken ++;
 if (slow == fast) return true;
 if (taken == limit) {
 taken = 0;
 limit <<= 1;
 slow = fast;
 }
 }
 return false;
 }",1
918,"public int [] solution (String S, int [] P, int [] Q) {
 final char [] characterInput = S.toCharArray ();
 final int [] integerInput = new int [characterInput.length];
 for (int counter = 0;
 counter < characterInput.length; counter ++) {
 integerInput [counter] = characterMapping.get (characterInput [counter]);
 }
 int [] result = new int [P.length];
 for (int index = 0;
 index < P.length; index ++) {
 if (P [index] == Q [index]) {
 result [index] = integerInput [P [index]];
 break;
 }
 final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
 final int minimumValue = minimum (subArray);
 result [index] = minimumValue;
 }
 return result;
 }","public int [] solution (String S, int [] P, int [] Q) {
 int N = S.length ();
 int M = P.length;
 int [] result = new int [M];
 lastOccurrencesMap = new int [3] [N];
 int lastA = - 1;
 int lastC = - 1;
 int lastG = - 1;
 for (int i = 0;
 i < N; i ++) {
 char c = S.charAt (i);
 if (c == 'A') {
 lastA = i;
 } else if (c == 'C') {
 lastC = i;
 } else if (c == 'G') {
 lastG = i;
 }
 lastOccurrencesMap [0] [i] = lastA;
 lastOccurrencesMap [1] [i] = lastC;
 lastOccurrencesMap [2] [i] = lastG;
 }
 for (int i = 0;
 i < M; i ++) {
 int startIndex = P [i];
 int endIndex = Q [i];
 int minimum = 4;
 for (int n = 0;
 n < 3; n ++) {
 int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
 if (lastOccurence != 0) {
 minimum = n + 1;
 break;
 }
 }
 result [i] = minimum;
 }
 return result;
 }",1
498,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 String inString;
 int decimal;
 System.out.println (""Enter a binary number: "");
 inString = input.nextLine ();
 while (inString != ""-1"") {
 int i;
 int binaryLength;
 binaryLength = inString.length ();
 for (i = 0, decimal = 0; i < binaryLength; i ++) {
 decimal = decimal * 2 + (Character.getNumericValue (inString.charAt (i)) - 0);
 System.out.print (decimal);
 }
 System.out.println (""Enter a binary number: "");
 inString = input.nextLine ();
 }
 System.out.println (""All set !"");
 }","public static void main (String [] args) {
 final Scanner input = new Scanner (System.in);
 String inString;
 while (true) {
 System.out.println (""Enter a binary number: "");
 inString = input.nextLine ();
 if (inString.equals (""-1"")) break;
 System.out.println (Integer.parseInt (inString, 2));
 }
 System.out.println (""All set !"");
 }",1
1212,"public static final void main (String...aArgs) {
 log (""Generating random integers in the range 1..10."");
 int START = 1;
 int END = 10;
 Random random = new Random ();
 for (int idx = 1;
 idx <= 10; ++ idx) {
 showRandomInteger (START, END, random);
 }
 log (""Done."");
 }","public static void main (String [] args) throws Exception {
 for (int len : new int [] {100 * 1000 * 1000, 10 * 1000 * 1000, 1000 * 1000, 100 * 1000, 10 * 1000, 1000}) {
 int [] nums = new int [len];
 for (int i = 0;
 i < len; i ++) nums [i] = (int) (Math.random () * (Math.random () * 2001 - 1000));
 Arrays.sort (nums);
 long timeArray = 0;
 long timeSet = 0;
 int runs = len > 1000 * 1000 ? 10 : len >= 100 * 1000 ? 100 : 1000;
 for (int i = 0;
 i < runs; i ++) {
 long time1 = System.nanoTime ();
 int count = countDistinct (nums);
 long time2 = System.nanoTime ();
 int count2 = countDistinctUsingSet (nums);
 long time3 = System.nanoTime ();
 timeArray += time2 - time1;
 timeSet += time3 - time2;
 assert count == count2;
 }
 System.out.printf (""For %,d numbers, using an array took %,d us on average, using a Set took %,d us on average, ratio=%.1f%n"", len, timeArray / 1000 / runs, timeSet / 1000 / runs, 1.0 * timeSet / timeArray);
 }
 }",0
543,"public static final int solution (final int X, final int [] A) {
 if (A.length < ARRAY_SIZE_LOWER || A.length > ARRAY_SIZE_UPPER) {
 throw new RuntimeException (""Array size out of bounds"");
 }
 Set set = new Set (X);
 int ai;
 int counter = X;
 final int NUMBER_REAL_UPPER = min (NUMBER_UPPER, X);
 for (int i = 0;
 i < A.length; i ++) {
 if ((ai = A [i]) < NUMBER_LOWER || ai > NUMBER_REAL_UPPER) {
 throw new RuntimeException (""Number out of bounds"");
 } else if (ai <= X && ! set.contains (ai)) {
 counter --;
 if (counter == 0) {
 return i;
 }
 set.put (ai);
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }",1
1325,"public static int findArray (int [] array, int [] subArray) {
 int index = - 1;
 arrayLoop : for (int i = 0;
 i < array.length; i ++) {
 if (array [i] == subArray [0]) {
 for (int j = 1;
 j < subArray.length; j ++) {
 if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
 }
 index = i;
 }
 }
 return index;
 }","public static final void main (String...aArgs) {
 log (""Generating 10 random integers in range 1..10."");
 int START = 1;
 int END = 10;
 Random randomGenerator = new Random ();
 for (int idx = 1;
 idx <= 10; ++ idx) {
 showRandomInteger (START, END, randomGenerator);
 }
 log (""Done"");
 }",0
1653,"public int solution (int X, int [] A) {
 Set < Integer > set = new HashSet < Integer > ();
 int sum1 = 0, sum2 = 0;
 for (int i = 0;
 i <= X; i ++) {
 sum1 += i;
 }
 for (int i = 0;
 i < A.length; i ++) {
 if (set.contains (A [i])) continue;
 set.add (A [i]);
 sum2 += A [i];
 if (sum1 == sum2) return i;
 }
 return - 1;
 }","public static String validName (Scanner input, Scanner histogram) {
 String user = """";
 String name = input.next ();
 if (histogram.findInLine (name) != null) {
 System.out.println (""This name exist"");
 } else {
 System.out.println (""Name not found"");
 user = validName (input, histogram);
 }
 return user;
 }",0
1490,"public void actionPerformed (ActionEvent arg0) {
 int result = JOptionPane.OK_OPTION;
 if (dirty) {
 result = JOptionPane.showConfirmDialog (gui, ""Erase the current painting?"");
 }
 if (result == JOptionPane.OK_OPTION) {
 clear (canvasImage);
 }
 }","public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setSize (new Dimension (300, 300));
 frame.add (new Panel ());
 frame.setVisible (true);
 }}
 );
 }",0
650,"public static void main (String...args) {
 processor = new DefaultProcessor ();
 long [] values = new long [] {0, 4, 10, 12, 100, 108, 299, 1000, 1003, 2040, 45213, 100000, 100005, 100010, 202020, 202022, 999999, 1000000, 1000001, 10000000, 10000007, 99999999, Long.MAX_VALUE, Long.MIN_VALUE};
 String [] strValues = new String [] {""0001.2"", ""3.141592""};
 for (long val : values) {
 System.out.println (val + "" = "" + processor.getName (val));
 }
 for (String strVal : strValues) {
 System.out.println (strVal + "" = "" + processor.getName (strVal));
 }
 StringBuilder bigNumber = new StringBuilder ();
 for (int d = 0;
 d < 66; d ++) {
 bigNumber.append ((char) ((Math.random () * 10) + '0'));
 }
 bigNumber.append (""."");
 for (int d = 0;
 d < 26; d ++) {
 bigNumber.append ((char) ((Math.random () * 10) + '0'));
 }
 System.out.println (bigNumber.toString () + "" = "" + processor.getName (bigNumber.toString ()));
 }","public static void main (String [] args) {
 System.out.println (""*** "" + FrenchNumberToWords.convert (0));
 System.out.println (""*** "" + FrenchNumberToWords.convert (9));
 System.out.println (""*** "" + FrenchNumberToWords.convert (19));
 System.out.println (""*** "" + FrenchNumberToWords.convert (21));
 System.out.println (""*** "" + FrenchNumberToWords.convert (28));
 System.out.println (""*** "" + FrenchNumberToWords.convert (71));
 System.out.println (""*** "" + FrenchNumberToWords.convert (72));
 System.out.println (""*** "" + FrenchNumberToWords.convert (80));
 System.out.println (""*** "" + FrenchNumberToWords.convert (81));
 System.out.println (""*** "" + FrenchNumberToWords.convert (89));
 System.out.println (""*** "" + FrenchNumberToWords.convert (90));
 System.out.println (""*** "" + FrenchNumberToWords.convert (91));
 System.out.println (""*** "" + FrenchNumberToWords.convert (97));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100));
 System.out.println (""*** "" + FrenchNumberToWords.convert (101));
 System.out.println (""*** "" + FrenchNumberToWords.convert (110));
 System.out.println (""*** "" + FrenchNumberToWords.convert (120));
 System.out.println (""*** "" + FrenchNumberToWords.convert (200));
 System.out.println (""*** "" + FrenchNumberToWords.convert (201));
 System.out.println (""*** "" + FrenchNumberToWords.convert (232));
 System.out.println (""*** "" + FrenchNumberToWords.convert (999));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (1001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (10001));
 System.out.println (""*** "" + FrenchNumberToWords.convert (100000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2000000));
 System.out.println (""*** "" + FrenchNumberToWords.convert (3000000000L));
 System.out.println (""*** "" + FrenchNumberToWords.convert (2147483647));
 }",1
1324,"public static int findArray (int [] array, int [] subArray) {
 int count = 0;
 for (int i = 0;
 i < array.length; i ++) {
 for (int j = 0;
 j < subArray.length; j ++) {
 if (array [i] == subArray [j]) {
 if (array.length > (i + 1) && subArray.length > (j + 1)) {
 if (array [i + 1] == subArray [j + 1]) {
 count += 1;
 continue;
 }
 } else if (subArray.length == j + 1) {
 count += 1;
 continue;
 }
 }
 }
 }
 if (count < subArray.length) {
 return - 1;
 }
 return count;
 }","public static void main (String [] args) {
 int first, second;
 Scanner myScanner = new Scanner (System.in);
 System.out.println (""Enter first integer: "");
 int numOne;
 numOne = myScanner.nextInt ();
 System.out.println (""You have keyed in "" + numOne);
 System.out.println (""Enter second integer: "");
 int numTwo;
 numTwo = myScanner.nextInt ();
 System.out.println (""You have keyed in "" + numTwo);
 Random generator = new Random ();
 int num = (int) (Math.random () * numTwo);
 System.out.println (""Random number: "" + ((num > numOne) ? num : numOne + num));
 }",0
380,"public static void main (String [] args) {
 InputStream inStream = null;
 OutputStream outStream = null;
 try {
 File afile = new File (""C:\\folderA\\Afile.txt"");
 File bfile = new File (""C:\\folderB\\Afile.txt"");
 inStream = new FileInputStream (afile);
 outStream = new FileOutputStream (bfile);
 byte [] buffer = new byte [1024];
 int length;
 while ((length = inStream.read (buffer)) > 0) {
 outStream.write (buffer, 0, length);
 }
 inStream.close ();
 outStream.close ();
 afile.delete ();
 System.out.println (""File is copied successful!"");
 } catch (IOException e) {
 e.printStackTrace ();
 }
 }","public static void main (String [] args) throws IOException {
 Path source = Paths.get (""/path/to/source/dir"");
 Path destination = Paths.get (""/path/to/dest/dir"");
 List < Path > sources = Files.walk (source).collect (toList ());
 List < Path > destinations = sources.stream ().map (source :: relativize).map (destination :: resolve).collect (toList ());
 for (int i = 0;
 i < sources.size (); i ++) {
 Files.copy (sources.get (i), destinations.get (i));
 }
 }",1
1125,"public static void shuffleArray (int [] array) {
 List < Integer > list = new ArrayList < > ();
 for (int i : array) {
 list.add (i);
 }
 Collections.shuffle (list);
 for (int i = 0;
 i < list.size (); i ++) {
 array [i] = list.get (i);
 }
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 int dotPos = - 1;
 int len = dest.length ();
 for (int i = 0;
 i < len; i ++) {
 char c = dest.charAt (i);
 if (c == '.' || c == ',') {
 dotPos = i;
 break;
 }
 }
 if (dotPos >= 0) {
 if (source.equals (""."") || source.equals ("","")) {
 return """";
 }
 if (dend <= dotPos) {
 return null;
 }
 if (len - dotPos > decimalDigits) {
 return """";
 }
 }
 return null;
 }",0
483,"public void refund (float balance) {
 System.out.println (""You have selected the refund option:"");
 for (int counter = (int) balance;
 counter >= 10; counter -= 10) {
 System.out.println (""Balance: £"" + balance);
 balance -= 10;
 }
 for (int counter = (int) balance;
 counter > 0; counter -= 1) {
 System.out.println (""Balance: £"" + balance);
 balance -= 1;
 }
 System.out.println (""Balance: £"" + balance);
 }","public void refund (int balance) {
 while (balance >= 10) {
 System.out.println (""Balance: £"" + balance);
 balance -= 10;
 }
 while (balance >= 0) {
 System.out.println (""Balance: £"" + balance);
 balance -= 1;
 }
 }",1
1357,"public double getSum () {
 double result = this.amount;
 if (this.subAccounts != null) {
 for (Balance subAccount : this.subAccounts) {
 result = result + subAccount.getSum ();
 }
 }
 return result;
 }","public static void main (String [] args) {
 List < Character > characters = new ArrayList < Character > ();
 for (char c = 'a';
 c <= 'z'; c ++) {
 characters.add (c);
 }
 List < String > allStrings = new ArrayList < String > ();
 for (Character c : characters) {
 for (Character d : characters) {
 for (Character e : characters) {
 for (Character f : characters) {
 String s = """" + c + d + e + f;
 allStrings.add (s);
 }
 }
 }
 }
 System.out.println (allStrings.size ());
 }",0
1222,"public String getContactName (final String phoneNumber) {
 Uri uri;
 String [] projection;
 mBaseUri = Contacts.Phones.CONTENT_FILTER_URL;
 projection = new String [] {android.provider.Contacts.People.NAME};
 try {
 Class < ? > c = Class.forName (""android.provider.ContactsContract$PhoneLookup"");
 mBaseUri = (Uri) c.getField (""CONTENT_FILTER_URI"").get (mBaseUri);
 projection = new String [] {""display_name""};
 } catch (Exception e) {
 }
 uri = Uri.withAppendedPath (mBaseUri, Uri.encode (phoneNumber));
 Cursor cursor = this.getContentResolver ().query (uri, projection, null, null, null);
 String contactName = """";
 if (cursor.moveToFirst ()) {
 contactName = cursor.getString (0);
 }
 cursor.close ();
 cursor = null;
 return contactName;
 }","public static int [] genRandoms (int n, int numberOfRandoms, int min) {
 int randomArray [] = new int [numberOfRandoms];
 for (int i = 0;
 i < numberOfRandoms; i ++) {
 randomArray [i] = min;
 }
 for (int i = min * numberOfRandoms;
 i < n; i ++) {
 randomArray [randomRange (numberOfRandoms)] += 1;
 }
 return randomArray;
 }",0
1731,"public static String join (String delimiter, String...inStr) {
 StringBuilder sb = new StringBuilder ();
 if (inStr.length > 0) {
 sb.append (inStr [0]);
 for (int i = 1;
 i < inStr.length; i ++) {
 sb.append (delimiter);
 sb.append (inStr [i]);
 }
 }
 return sb.toString ();
 }","public static String validName (Scanner input, Scanner histogram) {
 String user = """";
 String name = input.next ();
 String tmp = """";
 boolean test = false;
 while (histogram.hasNext ()) {
 user = histogram.next ();
 tmp += user + "" "";
 if (name.equalsIgnoreCase (user)) {
 test = true;
 break;
 } else {
 test = false;
 }
 }
 if (! test) {
 System.out.println (""Name not found"");
 user = validName (input, new Scanner (tmp));
 }
 return user;
 }",0
1159,"private void removeComments (Element article) {
 article.filter (new NodeFilter () {
 @Override
 public FilterResult tail (Node node, int depth) {
 if (node instanceof Comment) {
 return FilterResult.REMOVE;
 }
 return FilterResult.CONTINUE;
 }@Override
 public FilterResult head (Node node, int depth) {
 if (node instanceof Comment) {
 return FilterResult.REMOVE;
 }
 return FilterResult.CONTINUE;
 }}
 );
 }","public static void main (String [] args) throws InterruptedException {
 AtomicInteger counter = new AtomicInteger ();
 ExecutorService pool = Executors.newFixedThreadPool (4);
 for (int i = 0;
 i < 4; ++ i) {
 pool.execute (new MyTask (counter));
 }
 pool.shutdown ();
 pool.awaitTermination (1, TimeUnit.HOURS);
 }",0
1369,"public static String join (String separator, String...values) {
 if (values.length == 0) return """";
 char [] sep = separator.toCharArray ();
 int totalSize = (values.length - 1) * sep.length;
 for (int i = 0;
 i < values.length; i ++) {
 if (values [i] == null) values [i] = """";
 else totalSize += values [i].length ();
 }
 char [] joined = new char [totalSize];
 int pos = 0;
 for (int i = 0, end = values.length - 1;
 i < end; i ++) {
 System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
 pos += values [i].length ();
 System.arraycopy (sep, 0, joined, pos, sep.length);
 pos += sep.length;
 }
 System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
 return new String (joined);
 }","public final void contextDestroyed (ServletContextEvent sce) {
 ClassLoader cl = Thread.currentThread ().getContextClassLoader ();
 Enumeration < Driver > drivers = DriverManager.getDrivers ();
 while (drivers.hasMoreElements ()) {
 Driver driver = drivers.nextElement ();
 if (driver.getClass ().getClassLoader () == cl) {
 try {
 log.info (""Deregistering JDBC driver {}"", driver);
 DriverManager.deregisterDriver (driver);
 } catch (SQLException ex) {
 log.error (""Error deregistering JDBC driver {}"", driver, ex);
 }
 } else {
 log.trace (""Not deregistering JDBC driver {} as it does not belong to this webapp's ClassLoader"", driver);
 }
 }
 }",0
1508,"public static int score (final String gene1, final String gene2) {
 final char [] a;
 final char [] b;
 final int s;
 a = gene1.toCharArray ();
 b = gene2.toCharArray ();
 s = score (a, b, 0, 0);
 return (s);
 }","public static void main (String [] args) throws InterruptedException, ExecutionException {
 CompletableFuture < String > contentsCF = readPage ();
 CompletableFuture < List < String > > linksCF = contentsCF.thenApply (CompletableFutureTest :: getLinks);
 CompletableFuture < Void > completionStage = linksCF.thenAccept (list -> {
 String a = null;
 System.out.println (a.toString ());
 });
 List < String > result = linksCF.get ();
 System.out.println (""Got "" + result);
 try {
 completionStage.get ();
 } catch (ExecutionException e) {
 System.out.println (""Caught "" + e);
 Throwable cause = e.getCause ();
 System.out.println (""cause: "" + cause);
 }
 completionStage.exceptionally (e -> {
 System.out.println (""Future exceptionally finished: "" + e);
 return null;
 });
 try {
 completionStage.get ();
 } catch (Throwable t) {
 System.out.println (""Already handled by the future "" + t);
 }
 }",0
906,"public static double [] [] amountOTP (double [] [] a, int x) {
 if (x > a.length) return a;
 for (double [] arr : a) if (arr.length < x) return a;
 double [] [] newArray = new double [x] [x];
 for (int i = 0;
 i < x; i ++) for (int j = 0;
 j < x; j ++) newArray [i] [j] = a [i] [j];
 return newArray;
 }","public static double [] [] amountOTP (double [] [] a, int x) {
 double [] [] b = new double [x] [x];
 x = Math.min (x, a.length);
 for (int i = 0;
 i < x; i ++) for (int j = 0;
 j < x; j ++) b [i] [j] = a [i] [j];
 return b;
 }",1
719,"public static boolean hasDateExpired (int days, Instant savedDate, Instant currentDate) {
 boolean hasExpired = false;
 if (savedDate != null && currentDate != null) {
 if (savedDate.plus (days, ChronoUnit.DAYS).isBefore (currentDate)) {
 hasExpired = true;
 }
 }
 return hasExpired;
 }","private static boolean hasDateExpired (int days, java.util.Date savedDate) throws ParseException {
 SimpleDateFormat dateFormatUtc = new SimpleDateFormat (""yyyy-MMM-dd HH:mm:ss"");
 dateFormatUtc.setTimeZone (TimeZone.getTimeZone (""UTC""));
 SimpleDateFormat dateFormatLocal = new SimpleDateFormat (""yyyy-MMM-dd HH:mm:ss"");
 savedDate = dateFormatLocal.parse (dateFormatUtc.format (savedDate));
 Date dateTimeNow = dateFormatLocal.parse (dateFormatUtc.format (new Date ()));
 long expires = dateTimeNow.getTime () + (DAY_IN_MS * days);
 Date expiresDate = new Date (expires);
 System.out.println (""savedDate \t\t"" + savedDate + ""\nexpiresDate \t"" + expiresDate);
 return savedDate.before (expiresDate);
 }",1
1234,"public static void main (String [] args) {
 ArrayList < String > al = new ArrayList < String > ();
 Scanner sc = new Scanner (System.in);
 while (true) {
 System.out.print (""Enter name:"");
 String temp = sc.next ();
 if (al.isEmpty () != true) {
 if (temp.equals (al.get (0))) break;
 }
 al.add (temp);
 }
 for (int i = 0;
 i < al.size (); i ++) {
 System.out.println (al.get (i));
 }
 }","public static void main (String [] args) {
 int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
 int [] B = new int [A.length];
 int [] C = new int [A.length];
 int t = 4;
 int j = 0, k = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= t) {
 B [j] = A [i];
 j ++;
 } else {
 C [k] = A [i];
 k ++;
 }
 }
 for (int i = 0;
 i < j; i ++) {
 System.out.println (""B = "" + B [i]);
 }
 for (int i = 0;
 i < k; i ++) {
 System.out.println (""C = "" + C [i]);
 }
 }",0
169,"public void serialize (Test value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 jgen.writeStartObject ();
 Field [] fields = value.getClass ().getDeclaredFields ();
 for (Field field : fields) {
 try {
 jgen.writeObjectField (field.getName (), field.get (value));
 } catch (IllegalArgumentException | IllegalAccessException e) {
 e.printStackTrace ();
 }
 }
 jgen.writeObjectField (""extra_field"", ""whatever_value"");
 jgen.writeEndObject ();
 }","public void serialize (final Object bean, final JsonGenerator jgen, final SerializerProvider provider) throws IOException, JsonGenerationException {
 jgen.writeStartObject ();
 if (_propertyFilterId != null) {
 serializeFieldsFiltered (bean, jgen, provider);
 } else {
 serializeFields (bean, jgen, provider);
 }
 serializerListener.postSerialization (bean, jgen);
 jgen.writeEndObject ();
 }",1
591,"public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 CharSequence out = super.filter (source, start, end, dest, dstart, dend);
 if (out != null) {
 source = out;
 start = 0;
 end = out.length ();
 }
 int len = end - start;
 if (len == 0) {
 return source;
 }
 int dlen = dest.length ();
 for (int i = 0;
 i < dstart; i ++) {
 if (dest.charAt (i) == '.') {
 return (dlen - (i + 1) + len > digits) ? """" : new SpannableStringBuilder (source, start, end);
 }
 }
 for (int i = start;
 i < end; ++ i) {
 if (source.charAt (i) == '.') {
 if ((dlen - dend) + (end - (i + 1)) > digits) return """";
 else break;
 }
 }
 return new SpannableStringBuilder (source, start, end);
 }","public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 String lsStart = """";
 String lsInsert = """";
 String lsEnd = """";
 String lsText = """";
 Log.d (""debug"", moPattern.toString ());
 Log.d (""debug"", ""source: "" + source + "", start: "" + start + "", end:"" + end + "", dest: "" + dest + "", dstart: "" + dstart + "", dend: "" + dend);
 lsText = dest.toString ();
 if (lsText.length () > 0) {
 lsStart = lsText.substring (0, dstart);
 Log.d (""debug"", ""lsStart : "" + lsStart);
 if (source != """") {
 lsInsert = source.toString ();
 Log.d (""debug"", ""lsInsert: "" + lsInsert);
 }
 lsEnd = lsText.substring (dend);
 Log.d (""debug"", ""lsEnd   : "" + lsEnd);
 lsText = lsStart + lsInsert + lsEnd;
 Log.d (""debug"", ""lsText  : "" + lsText);
 }
 Matcher loMatcher = moPattern.matcher (lsText);
 Log.d (""debug"", ""loMatcher.matches(): "" + loMatcher.matches () + "", lsText: "" + lsText);
 if (! loMatcher.matches ()) {
 return """";
 }
 return null;
 }",1
571,"public String removeAdjacentDuplicates (String s) {
 StringBuilder resultBuilder = new StringBuilder ();
 char previous = s.charAt (0);
 resultBuilder.append (previous);
 for (int i = 1;
 i < s.length (); i ++) {
 char current = s.charAt (i);
 if (previous != current) {
 resultBuilder.append (current);
 previous = current;
 }
 }
 return resultBuilder.toString ();
 }","public static String removeAdjacentDuplicates (String input) {
 if (input.length () <= 1) {
 return input;
 }
 StringBuilder sb = new StringBuilder ();
 sb.append (input.charAt (0));
 IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : """").forEach (sb :: append);
 return sb.toString ();
 }",1
524,"public static void main (String [] args) {
 Map < String, String > map = new HashMap < > ();
 map.put (""b"", ""dd"");
 map.put (""c"", ""cc"");
 map.put (""a"", ""aa"");
 map = new TreeMap < > (map);
 for (String key : map.keySet ()) {
 System.out.println (key + ""="" + map.get (key));
 }
 }","public static void main (String [] args) {
 Map < String, Integer > unSortedMap = new LinkedHashMap < String, Integer > ();
 unSortedMap.put (""A"", 2);
 unSortedMap.put (""V"", 1);
 unSortedMap.put (""G"", 5);
 System.out.println (""Unsorted Map :\n"");
 for (Map.Entry < String, Integer > entry : unSortedMap.entrySet ()) {
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 System.out.println (""\n"");
 System.out.println (""Sorting Map Based on Keys :\n"");
 Map < String, Integer > keySortedMap = new TreeMap < String, Integer > (unSortedMap);
 for (Map.Entry < String, Integer > entry : keySortedMap.entrySet ()) {
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 System.out.println (""\n"");
 System.out.println (""Sorting Map Based on Values :\n"");
 List < Entry < String, Integer > > entryList = new ArrayList < Entry < String, Integer > > (unSortedMap.entrySet ());
 Collections.sort (entryList, new Comparator < Entry < String, Integer > > () {
 @Override
 public int compare (Entry < String, Integer > obj1, Entry < String, Integer > obj2) {
 return obj1.getValue ().compareTo (obj2.getValue ());
 }}
 );
 unSortedMap.clear ();
 for (Entry < String, Integer > entry : entryList) {
 unSortedMap.put (entry.getKey (), entry.getValue ());
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 }",1
1302,"public static void main (String [] args) {
 HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
 System.out.println (""Enter an String:"");
 Scanner sc = new Scanner (System.in);
 String s1 = sc.nextLine ();
 for (int i = 0;
 i < s1.length (); i ++) {
 if (! hm.containsKey (s1.charAt (i))) {
 hm.put (s1.charAt (i), (Integer) 1);
 } else {
 hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
 }
 }
 System.out.println (""The Charecters are:"" + hm);
 }","boolean unsignedMultiplyOverflows (final long a, final long b) {
 if ((a == 0L) || (b == 0L)) {
 return false;
 }
 if ((a == 1L) || (b == 1L)) {
 return false;
 }
 if ((a < 0L) || (b < 0L)) {
 return true;
 }
 final boolean unsignedMultiplyOverflows = (a > ((Long.MAX_VALUE / b) * 2L) + ((((Long.MAX_VALUE % b) * 2L) + 1L) / b));
 return unsignedMultiplyOverflows;
 }",0
350,"public void run () {
 try {
 String line = null;
 BufferedReader inErr = new BufferedReader (new InputStreamReader (inErrStream));
 while ((line = inErr.readLine ()) != null) {
 println (line);
 }
 } catch (Exception e) {
 e.printStackTrace ();
 }
 System.out.println (""Exit reading error stream"");
 }","public void run () {
 try {
 int retValue = pro.waitFor ();
 println (""Command exit with return value "" + retValue);
 outStream.close ();
 outStream = null;
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (IOException e) {
 e.printStackTrace ();
 }
 }",1
1912,"public static void main (String [] args) throws InterruptedException {
 String [] arrayElements = {""value1"", ""value2"", ""value3"", ""value4""};
 long start = System.currentTimeMillis ();
 for (int i = 0;
 i < arrayElements.length; i ++) {
 final String value = arrayElements [i];
 new java.util.Timer ().schedule (new java.util.TimerTask () {
 public void run () {
 System.out.println (value);
 }}
 , new Date (start));
 start += 5000;
 }
 }","public boolean hasSameAncestor (String person1, String person2) {
 ArrayList < ArrayList < String > > allRelations = allRelations ();
 int i = 0;
 String name1 = person1;
 String name2 = person2;
 String parent1;
 String parent2;
 for (i = 0, parent1 = """"; i < allRelations.size (); i ++) {
 if (name1.equals (allRelations.get (i).get (1))) {
 parent1 = allRelations.get (i).get (0);
 name1 = parent1;
 i = - 1;
 }
 }
 for (i = 0, parent2 = """"; i < allRelations.size (); i ++) {
 if (name2.equals (allRelations.get (i).get (1))) {
 parent2 = allRelations.get (i).get (0);
 name2 = parent2;
 i = - 1;
 }
 }
 System.out.println (parent1);
 System.out.println (parent2);
 if (parent1.equals (parent2)) {
 return true;
 }
 return false;
 }",0
541,"public void run () {
 synchronized (list) {
 for (int i = 0;
 i < 10; i ++) {
 if (list.size () >= 1) {
 try {
 System.out.println (""producer is waiting "");
 list.wait ();
 } catch (InterruptedException ex) {
 ex.printStackTrace ();
 }
 }
 System.out.println (""produce="" + i);
 list.add (i);
 list.notifyAll ();
 try {
 Thread.sleep (500);
 } catch (InterruptedException ex) {
 ex.printStackTrace ();
 }
 }
 }
 }","public void run () {
 synchronized (list) {
 for (int i = 0;
 i < 10; i ++) {
 while (list.isEmpty ()) {
 System.out.println (""Consumer is waiting"");
 try {
 list.wait ();
 } catch (InterruptedException ex) {
 ex.printStackTrace ();
 }
 }
 int k = list.remove (0);
 System.out.println (""consume="" + k);
 list.notifyAll ();
 try {
 Thread.sleep (500);
 } catch (InterruptedException ex) {
 ex.printStackTrace ();
 }
 }
 }
 }",1
978,"public static void main (String [] args) {
 int a = 100;
 int b = 1000;
 int lowest = b;
 int highest = a;
 int count = 100000;
 Random random = new Random ();
 for (int i = 0;
 i < count; i ++) {
 int nextNumber = (int) ((Math.abs (random.nextDouble ()) * (b - a))) + a;
 if (nextNumber < a || nextNumber > b) {
 System.err.println (""number not in range :"" + nextNumber);
 } else {
 System.out.println (nextNumber);
 }
 if (nextNumber < lowest) {
 lowest = nextNumber;
 }
 if (nextNumber > highest) {
 highest = nextNumber;
 }
 }
 System.out.println (""Produced "" + count + "" numbers from "" + lowest + "" to "" + highest);
 }","public static void main (String [] args) {
 Random ran = new Random ();
 int min, max;
 Scanner sc = new Scanner (System.in);
 System.out.println (""Enter min range:"");
 min = sc.nextInt ();
 System.out.println (""Enter max range:"");
 max = sc.nextInt ();
 int num = ran.nextInt (min);
 int num1 = ran.nextInt (max);
 System.out.println (""Random Number between given range is "" + num1);
 }",1
1278,"public static int [] solution (String S, int [] P, int [] Q) {
 int [] arr = new int [S.length ()];
 for (int i = 0;
 i < S.length (); i ++) {
 switch (S.charAt (i)) {
 case 'A' :
 arr [i] = 1;
 break;
 case 'C' :
 arr [i] = 2;
 break;
 case 'G' :
 arr [i] = 3;
 break;
 case 'T' :
 arr [i] = 4;
 break;
 default :
 break;
 }
 }
 segmentNode root = buildTree (arr, 0, S.length () - 1);
 int [] result = new int [P.length];
 for (int i = 0;
 i < P.length; i ++) {
 result [i] = getMin (root, P [i], Q [i]);
 }
 return result;
 }","public static void countString (String str, char value) {
 String [] arr = str.split ("""");
 StringBuffer tempString = new StringBuffer ();
 for (String s : arr) {
 tempString.append (s);
 for (char ch : s.toCharArray ()) {
 System.out.println (""Number of Occurrence of "" + ch + "" is:"" + tempString.chars ().filter (i -> i == ch).count ());
 }
 }
 if (! (Character.toString (value).isEmpty ())) {
 StringBuffer tempString2 = new StringBuffer ();
 for (String s : arr) {
 tempString2.append (s);
 for (char ch : s.toCharArray ()) {
 if (ch == value) {
 System.out.println (""Number of Occurrence of "" + ch + "" is:"" + tempString2.chars ().filter (i -> i == ch).count ());
 }
 }
 }
 }
 }",0
162,"public static int findArray (int [] array, int [] subArray) {
 int count = 0;
 for (int i = 0;
 i < array.length; i ++) {
 for (int j = 0;
 j < subArray.length; j ++) {
 if (array [i] == subArray [j]) {
 if (array.length > (i + 1) && subArray.length > (j + 1)) {
 if (array [i + 1] == subArray [j + 1]) {
 count += 1;
 continue;
 }
 } else if (subArray.length == j + 1) {
 count += 1;
 continue;
 }
 }
 }
 }
 if (count < subArray.length) {
 return - 1;
 }
 return count;
 }","public static int findArray (int [] array, int [] subArray) {
 int index = - 1;
 arrayLoop : for (int i = 0;
 i < array.length; i ++) {
 if (array [i] == subArray [0]) {
 for (int j = 1;
 j < subArray.length; j ++) {
 if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
 }
 index = i;
 }
 }
 return index;
 }",1
1818,"public void testFooThrowsAtFirstAndSecondTime () {
 Throwable firstException = exceptionThrownBy (new Statement () {
 public void evaluate () throws Throwable {
 foo ();
 }}
 );
 assertEquals (Exception.class, firstException.getClass ());
 Throwable secondException = exceptionThrownBy (new Statement () {
 public void evaluate () throws Throwable {
 foo ();
 }}
 );
 assertEquals (Exception.class, secondException.getClass ());
 foo ()
 }","public static void main (String [] args) {
 int n = 6;
 int radius = 100;
 Point centre = new Point (200, 200);
 double angle = Math.toRadians (360 / n);
 List < Point > points = new ArrayList < Point > ();
 points.add (centre);
 for (int i = 0;
 i < n; i ++) {
 double theta = i * angle;
 int dx = (int) (radius * Math.sin (theta));
 int dy = (int) (- radius * Math.cos (theta));
 Point p = new Point (centre.x + dx, centre.y + dy);
 points.add (p);
 }
 draw (points);
 }",0
1436,"public static boolean isPrime (int num) {
 for (int i = 2;
 i <= num / i; i ++) {
 if (num % i == 0) {
 return false;
 }
 }
 return num > 1;
 }","private static String getProtocol (final String source) {
 assert source != null;
 String protocol = null;
 try {
 final URI uri = new URI (source);
 if (uri.isAbsolute ()) {
 protocol = uri.getScheme ();
 } else {
 final URL url = new URL (source);
 protocol = url.getProtocol ();
 }
 } catch (final Exception e) {
 if (source.startsWith (""//"")) {
 throw new IllegalArgumentException (""Relative context: "" + source);
 } else {
 final File file = new File (source);
 protocol = getProtocol (file);
 }
 }
 return protocol;
 }",0
1916,"public void run () {
 try {
 for (int i = 0;
 i < 5; i ++) {
 world.acquire ();
 System.out.println (""  World!"");
 hello.release ();
 }
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }","public static File createTempDir () throws IOException {
 final File sysTempDir = new File (System.getProperty (""java.io.tmpdir""));
 File newTempDir;
 final int maxAttempts = 9;
 int attemptCount = 0;
 do {
 attemptCount ++;
 if (attemptCount > maxAttempts) {
 throw new IOException (""The highly improbable has occurred! Failed to "" + ""create a unique temporary directory after "" + maxAttempts + "" attempts."");
 }
 String dirName = UUID.randomUUID ().toString ();
 newTempDir = new File (sysTempDir, dirName);
 } while (newTempDir.exists ());
 if (newTempDir.mkdirs ()) {
 return newTempDir;
 } else {
 throw new IOException (""Failed to create temp dir named "" + newTempDir.getAbsolutePath ());
 }
 }",0
989,"public static final void main (String...aArgs) {
 log (""Generating random integers in the range 1..10."");
 int START = 1;
 int END = 10;
 Random random = new Random ();
 for (int idx = 1;
 idx <= 10; ++ idx) {
 showRandomInteger (START, END, random);
 }
 log (""Done."");
 }","public static void main (String [] args) {
 int first, second;
 Scanner myScanner = new Scanner (System.in);
 System.out.println (""Enter first integer: "");
 int numOne;
 numOne = myScanner.nextInt ();
 System.out.println (""You have keyed in "" + numOne);
 System.out.println (""Enter second integer: "");
 int numTwo;
 numTwo = myScanner.nextInt ();
 System.out.println (""You have keyed in "" + numTwo);
 Random generator = new Random ();
 int num = (int) (Math.random () * numTwo);
 System.out.println (""Random number: "" + ((num > numOne) ? num : numOne + num));
 }",1
272,"public static void main (String args []) throws IOException {
 JavaPingExampleProgram ping = new JavaPingExampleProgram ();
 List < String > commands = new ArrayList < String > ();
 commands.add (""ping"");
 commands.add (""-c"");
 commands.add (""5"");
 commands.add (""74.125.236.73"");
 ping.doCommand (commands);
 }","public static void main (String [] args) {
 try {
 InetAddress address = InetAddress.getByName (""192.168.1.103"");
 boolean reachable = address.isReachable (10000);
 System.out.println (""Is host reachable? "" + reachable);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }",1
781,"public static void main (String args []) {
 int [] arr = new int [10];
 Scanner in = new Scanner (System.in);
 int i, min = 0, max = 0;
 for (i = 0; i <= arr.length; i ++) {
 System.out.print (""Enter any number: "");
 arr [i] = in.nextInt ();
 }
 min = arr [0];
 for (i = 0; i <= 9; i ++) {
 if (arr [i] > max) {
 max = arr [i];
 }
 if (arr [i] < min) {
 min = arr [i];
 }
 }
 System.out.println (""Maximum is: "" + max);
 System.out.println (""Minimum is: "" + min);
 }","public static void main (String args []) {
 int n, max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
 System.out.println (""Enter the number of elements: "");
 Scanner sc = new Scanner (System.in);
 int [] arr = new int [sc.nextInt ()];
 System.out.println (""Enter the elements: "");
 for (int i = 0;
 i < arr.length; i ++) {
 int next = sc.nextInt ();
 arr [i] = next;
 }
 for (int j = 0;
 j < arr.length; j ++) {
 if (arr [j] > max) max = arr [j];
 else if (arr [j] < min) min = arr [j];
 }
 System.out.println (""Highest Value in array: "" + max);
 System.out.println (""Smallest Value in array: "" + min);
 }",1
1613,"char wf () {
 Scanner input = new Scanner (System.in);
 System.out.println (""What is your choice? (x/o)"");
 if (input.findInLine (""."") != null) {
 choice = input.findInLine (""."").charAt (0);
 while (choice != 'x' && choice != 'o') {
 System.out.println (""You must enter x or o!"");
 choice = input.findInLine (""."").charAt (0);
 }
 }
 return choice;
 }","public static String toHexString (byte [] bytes) {
 StringBuilder hexString = new StringBuilder ();
 for (int i = 0;
 i < bytes.length; i ++) {
 String hex = Integer.toHexString (0xFF & bytes [i]);
 if (hex.length () == 1) {
 hexString.append ('0');
 }
 hexString.append (hex);
 }
 return hexString.toString ();
 }",0
1009,"public static void bubbleSort (int [] numArray) {
 int n = numArray.length;
 int temp = 0;
 for (int i = 0;
 i < n; i ++) {
 for (int j = 1;
 j < (n - i); j ++) {
 if (numArray [j - 1] > numArray [j]) {
 temp = numArray [j - 1];
 numArray [j - 1] = numArray [j];
 numArray [j] = temp;
 }
 }
 }
 }","public static void main (String arg []) {
 Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
 Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
 double p_int = ArrayMath.ScalarProduct (v1, v2);
 Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
 Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
 Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
 System.out.println (""p_int："" + p_int);
 System.out.println (""p_double："" + p_double);
 }",0
619,"private void printWords () {
 for (int i = 0;
 i < petStrings.length; i ++) {
 String word = petStrings [i].toString ();
 System.out.println (word);
 try {
 Thread.sleep (100);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 three.setText (word);
 }
 three.setText (""<html> Concurency Issues in Swing<br>"" + "" never to use Thread.sleep(int) <br>"" + "" durring EDT, simple to freeze GUI </html>"");
 }","private void printWords () {
 final Timer timer = new Timer (100, null);
 ActionListener listener = new ActionListener () {
 private Iterator < Word > w = words.iterator ();
 @Override
 public void actionPerformed (ActionEvent e) {
 if (w.hasNext ()) {
 _textField.setText (w.next ().getName ());
 } else {
 timer.stop ();
 }
 }}
 ;
 timer.addActionListener (listener);
 timer.start ();
 }",1
1463,"public int solution (int [] A) {
 int [] mark = new int [A.length + 1];
 int counter = 0;
 for (int i = 0;
 i < A.length; ++ i) {
 int value = A [i];
 if (value >= mark.length) {
 return NOT_PERMUTATION;
 }
 if (mark [value] == 0) {
 mark [value] = 1;
 ++ counter;
 } else {
 return NOT_PERMUTATION;
 }
 }
 return counter == A.length ? PERMUTATION : NOT_PERMUTATION;
 }","public static void main (String [] args) {
 String str = ""AAABBBBCC"";
 int length = str.length ();
 StringBuilder sb = new StringBuilder ();
 int count = 1;
 for (int i = 0;
 i < length; i ++) {
 if (i == length - 1) {
 sb.append (str.charAt (i) + """" + count);
 break;
 }
 if (str.charAt (i) == str.charAt (i + 1)) {
 count ++;
 } else {
 sb.append (str.charAt (i) + """" + count);
 count = 1;
 }
 }
 System.out.println (sb.toString ());
 }",0
415,"public static String myTrim (String input, String list) {
 StringBuilder result = new StringBuilder ();
 char c;
 for (int i = 0;
 i < input.length (); i ++) {
 c = input.charAt (i);
 if (list.indexOf (c) < 0) result.append (c);
 }
 return result.toString ();
 }","public static String myTrim (String input, String list) {
 String r = """";
 for (int i = 0;
 i < input.length (); i ++) {
 int k = 0;
 for (; k < list.length (); k ++) {
 if (input.charAt (i) == list.charAt (k)) {
 break;
 }
 }
 if (k == list.length ()) r += input.charAt (i);
 }
 return r;
 }",1
1509,"private static int score (final char [] a, final char [] b, final int idxA, final int idxB) {
 final int value;
 if (idxA >= a.length || idxB >= b.length) {
 value = 0;
 } else if (a [idxA] == b [idxB]) {
 value = 1 + score (a, b, idxA + 1, idxB + 1);
 } else {
 final int x;
 final int y;
 x = score (a, b, idxA + 1, idxB);
 y = score (a, b, idxB, idxB + 1);
 value = max (x, y);
 }
 return (value);
 }","public static void main (String [] args) throws InterruptedException, ExecutionException {
 CompletableFuture < String > future = readPage ();
 CompletableFuture < Void > future2 = future.thenAccept (page -> {
 System.out.println (page);
 throw new IllegalArgumentException (""unexpected exception"");
 });
 future2.exceptionally (e -> {
 e.printStackTrace (System.err);
 return null;
 });
 }",0
232,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 System.out.println (""How many numbers do you want to enter?"");
 int num = input.nextInt ();
 int array [] = new int [num];
 System.out.println (""Enter the "" + num + "" numbers now."");
 for (int i = 0;
 i < array.length; i ++) {
 array [i] = input.nextInt ();
 }
 System.out.println (""These are the numbers you have entered."");
 printArray (array);
 input.close ();
 }","public static void main (String [] args) {
 List < String > list = new ArrayList < String > ();
 Scanner stdin = new Scanner (System.in);
 do {
 System.out.println (""Current list is "" + list);
 System.out.println (""Add more? (y/n)"");
 if (stdin.next ().startsWith (""y"")) {
 System.out.println (""Enter : "");
 list.add (stdin.next ());
 } else {
 break;
 }
 } while (true);
 stdin.close ();
 System.out.println (""List is "" + list);
 String [] arr = list.toArray (new String [0]);
 System.out.println (""Array is "" + Arrays.toString (arr));
 }",1
475,"public static String center (String text, int len) {
 if (len <= text.length ()) return text.substring (0, len);
 int before = (len - text.length ()) / 2;
 if (before == 0) return String.format (""%-"" + len + ""s"", text);
 int rest = len - before;
 return String.format (""%"" + before + ""s%-"" + rest + ""s"", """", text);
 }","public static String center (String s, int size, char pad) {
 if (s == null || size <= s.length ()) return s;
 StringBuilder sb = new StringBuilder (size);
 for (int i = 0;
 i < (size - s.length ()) / 2; i ++) {
 sb.append (pad);
 }
 sb.append (s);
 while (sb.length () < size) {
 sb.append (pad);
 }
 return sb.toString ();
 }",1
1746,"public static String sequenceNums (int [] nums) {
 StringBuilder sb = new StringBuilder ();
 int rangeStart = nums [0];
 int previous = nums [0];
 int current;
 int expected = previous + 1;
 int size = nums.length;
 for (int i = 1;
 i < size; i ++) {
 current = nums [i];
 expected = previous + 1;
 if (current != expected) {
 addRange (sb, rangeStart, previous);
 rangeStart = current;
 }
 previous = current;
 }
 addRange (sb, rangeStart, nums [size - 1]);
 return sb.toString ();
 }","public void start (Stage primaryStage) {
 Canvas canvas = new Canvas (width, height);
 GraphicsContext gc = canvas.getGraphicsContext2D ();
 Scene scene = new Scene (new Group (canvas));
 primaryStage.setScene (scene);
 primaryStage.show ();
 Random ran = new Random ();
 triangle = new Point [3];
 triangle [1] = new Point (0d, 0d);
 triangle [0] = new Point (width / 2d, (double) height);
 triangle [2] = new Point ((double) width, 0d);
 midPoint = Point.findMidTo (triangle [0], triangle [1], triangle [2]);
 AnimationTimer timer = new AnimationTimer () {
 @Override
 public void handle (long now) {
 if (points -- > 0) {
 int r = ran.nextInt (3);
 midPoint = midPoint.findMidTo (triangle [r]);
 gc.fillOval (midPoint.getX (), midPoint.getY (), 1, 1);
 }
 }}
 ;
 timer.start ();
 }",0
1267,"public void actionPerformed (ActionEvent e) {
 int x = (int) (Math.random () * getWidth ());
 int y = (int) (Math.random () * getHeight ());
 int width = (int) (Math.random () * (getWidth () / 4));
 int height = (int) (Math.random () * (getHeight () / 4));
 if (x + width > getWidth ()) {
 x = getWidth () - width;
 }
 if (y + height > getHeight ()) {
 y = getHeight () - height;
 }
 Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
 lstShapes.add (new MyRectangle (x, y, width, height, color));
 repaint ();
 }","public static void main (String [] args) {
 LinkList list = new LinkList ();
 list.insert (1, 1.01);
 list.insert (2, 2.02);
 list.insert (3, 3.03);
 list.insert (4, 4.04);
 list.insert (5, 5.05);
 list.printList ();
 while (! list.isEmpty ()) {
 Link deletedLink = list.delete ();
 System.out.print (""deleted: "");
 deletedLink.printLink ();
 System.out.println ("""");
 }
 list.printList ();
 }",0
699,"public static int solution (int X, int [] A) {
 int [] counter = new int [X + 1];
 int ans = - 1;
 int x = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (counter [A [i]] == 0) {
 counter [A [i]] = A [i];
 x += 1;
 if (x == X) {
 return i;
 }
 }
 }
 return ans;
 }","public int solution (int X, int [] A) {
 int len = A.length;
 if (X > len) {
 return - 1;
 }
 int [] isFilled = new int [X];
 int jumped = 0;
 Arrays.fill (isFilled, 0);
 for (int i = 0;
 i < len; i ++) {
 int x = A [i];
 if (x <= X) {
 if (isFilled [x - 1] == 0) {
 isFilled [x - 1] = 1;
 jumped += 1;
 if (jumped == X) {
 return i;
 }
 }
 }
 }
 return - 1;
 }",1
466,"public void registerModule (HttpServletRequest req, ModuleType moduleType) {
 LOGGER.debug (""Register New Module - "" + moduleType.name ());
 try {
 if (req.getParts ().isEmpty () || req.getParameterMap ().isEmpty ()) {
 LOGGER.error (""The rest request is empty.No info to register"");
 return;
 }
 ModuleEntityGenerator moduleEntityGenerator = new ModuleEntityGenerator ();
 ModuleEntityDao moduleEntityDao = moduleEntityGenerator.get (req, moduleType);
 if (moduleEntityDao == null) {
 LOGGER.error (""The BA object is null. There is nothing to register"");
 return;
 }
 if (processRegistryDal.getModule (moduleType, moduleEntityDao.getId ()) == null) {
 processRegistryDal.addNewModule (moduleEntityDao);
 } else {
 processRegistryDal.updateModule (moduleEntityDao);
 }
 } catch (IOException e) {
 LOGGER.error (""IO Error\n"" + e.getMessage ());
 } catch (ServletException e) {
 LOGGER.error (""Servlet Error\n"" + e.getMessage ());
 }
 }","public void registerModule (HttpServletRequest req, ModuleType moduleType) {
 LOGGER.debug (""Register New Module - "" + moduleType.name ());
 try {
 ModuleEntityDao moduleEntityDao;
 if (req.getParts ().isEmpty () || req.getParameterMap ().isEmpty ()) {
 LOGGER.error (""The rest request is empty.No info to register"");
 } else if ((moduleEntityDao = new ModuleEntityGenerator ().get (req, moduleType)) == null) {
 LOGGER.error (""The BA object is null. There is nothing to register"");
 } else if (processRegistryDal.getModule (moduleType, moduleEntityDao.getId ()) == null) {
 processRegistryDal.addNewModule (moduleEntityDao);
 } else {
 processRegistryDal.updateModule (moduleEntityDao);
 }
 } catch (IOException e) {
 LOGGER.error (""IO Error\n"" + e.getMessage ());
 } catch (ServletException e) {
 LOGGER.error (""Servlet Error\n"" + e.getMessage ());
 }
 }",1
1611,"public int solution (int N) {
 String binary = Integer.toString (N, 2);
 int largestGap = 0;
 for (int i = 1, gap = 0;
 i < binary.length (); i ++) {
 while (i < binary.length () && binary.charAt (i) == '0') {
 i ++;
 gap ++;
 }
 if (gap > largestGap && i < binary.length ()) {
 largestGap = gap;
 }
 gap = 0;
 }
 return largestGap;
 }","@Override
 public void serialize (Test value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 jgen.writeStartObject ();
 Field [] fields = value.getClass ().getDeclaredFields ();
 for (Field field : fields) {
 try {
 jgen.writeObjectField (field.getName (), field.get (value));
 } catch (IllegalArgumentException | IllegalAccessException e) {
 e.printStackTrace ();
 }
 }
 jgen.writeObjectField (""extra_field"", ""whatever_value"");
 jgen.writeEndObject ();
 }",0
1512,"public void run () {
 try {
 UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
 }
 JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.setLayout (new BorderLayout ());
 frame.add (new BlinkPane ());
 frame.pack ();
 frame.setLocationRelativeTo (null);
 frame.setVisible (true);
 }","public static String getDurationBreakdown (long millis) {
 if (millis < 0) {
 throw new IllegalArgumentException (""Duration must be greater than zero!"");
 }
 long days = TimeUnit.MILLISECONDS.toDays (millis);
 long hours = TimeUnit.MILLISECONDS.toHours (millis) % 24;
 long minutes = TimeUnit.MILLISECONDS.toMinutes (millis) % 60;
 long seconds = TimeUnit.MILLISECONDS.toSeconds (millis) % 60;
 long milliseconds = millis % 1000;
 return String.format (""%d Days %d Hours %d Minutes %d Seconds %d Milliseconds"", days, hours, minutes, seconds, milliseconds);
 }",0
1511,"public static void main (String [] args) {
 Scanner scan = new Scanner (System.in);
 int numOfItems = 0;
 System.out.print (""Enter How Many Items: "");
 try {
 numOfItems = Integer.parseInt (scan.nextLine ().trim ());
 } catch (NumberFormatException e) {
 System.out.print (""Number of items you entered is invalid!"");
 System.exit (0);
 }
 Grocery grocery = new Grocery (numOfItems);
 for (int i = 0;
 i < numOfItems; i ++) {
 System.out.print (""Enter Item "" + (i + 1) + "" : "");
 if (! grocery.addItem (scan.nextLine ())) {
 System.out.println (""First Item Duplicate Detected!"");
 System.exit (0);
 }
 }
 scan.close ();
 System.out.println (grocery.toString ());
 }","public static void main (String [] args) {
 List < Integer > initialNumbers = new ArrayList < Integer > ();
 initialNumbers.add (1);
 initialNumbers.add (2);
 Observable < Integer > observableInitial = Observable.from (initialNumbers);
 ReplaySubject < Integer > subject = ReplaySubject.create ();
 Observable < Integer > source = Observable.merge (observableInitial, subject);
 source.subscribe (System.out :: println);
 for (int i = 0;
 i < 100; ++ i) {
 subject.onNext (i);
 }
 }",0
388,"public static void main (String [] args) {
 String s = ""aaaabbccccdddeee"";
 String s1 = """";
 String s2 = """";
 int count = 0;
 for (int i = 0;
 i < s.length (); i ++) {
 if (s1.indexOf (s.charAt (i)) < 0) {
 s1 = s1 + s.charAt (i);
 }
 }
 for (int i = 0;
 i < s1.length (); i ++) {
 for (int j = 0;
 j < s.length (); j ++) {
 if (s1.charAt (i) == s.charAt (j)) {
 count ++;
 }
 }
 s2 = s2 + s1.charAt (i) + count;
 count = 0;
 }
 System.out.println (s2);
 }","public static void main (String [] args) {
 String string = ""aaabbbbbaccc"";
 int counter;
 String result = """";
 int i = 0;
 while (i < string.length ()) {
 counter = 1;
 for (int j = i + 1;
 j < string.length (); j ++) {
 System.out.println (""string length ="" + string.length ());
 if (string.charAt (i) == string.charAt (j)) {
 counter ++;
 }
 }
 result = result + string.charAt (i) + counter;
 string = string.replaceAll (String.valueOf (string.charAt (i)), """");
 }
 System.out.println (""result is = "" + result);
 }",1
1764,"public String getName (String value) {
 boolean negative = false;
 if (value.startsWith (""-"")) {
 negative = true;
 value = value.substring (1);
 }
 int decimals = value.indexOf (""."");
 String decimalValue = null;
 if (0 <= decimals) {
 decimalValue = value.substring (decimals + 1);
 value = value.substring (0, decimals);
 }
 String name = processor.getName (value);
 if (name.isEmpty ()) {
 name = ZERO_TOKEN;
 } else if (negative) {
 name = MINUS.concat (SEPARATOR).concat (name);
 }
 if (! (null == decimalValue || decimalValue.isEmpty ())) {
 name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
 }
 return name;
 }","public static void main (String args []) {
 int i;
 int largestSize = 4;
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34};
 int large [] = Arrays.copyOf (array, largestSize);
 int smallest = large [0];
 int smallestIndex = 0;
 for (int j = 1;
 j < large.length; ++ j) {
 if (smallest > large [j]) {
 smallest = large [j];
 smallestIndex = j;
 }
 }
 for (i = large.length; i < array.length; i ++) {
 if (smallest < array [i]) {
 large [smallestIndex] = array [i];
 smallest = large [0];
 smallestIndex = 0;
 for (int j = 1;
 j < large.length; ++ j) {
 if (smallest > large [j]) {
 smallest = large [j];
 smallestIndex = j;
 }
 }
 }
 }
 for (int j = 0;
 j < large.length; j ++) {
 System.out.println (""Largest 5 : "" + large [j]);
 }
 System.out.println ();
 System.out.println (""Largest is: "" + getHighest (large));
 }",0
301,"public static void main (String [] args) {
 Scanner stdin = new Scanner (System.in);
 int [] wordCount = new int [1000];
 String [] wordList = new String [1000];
 int j = 0;
 while (stdin.hasNextLine ()) {
 String s = stdin.nextLine ();
 String [] words = s.split (""\\W+"");
 for (String word : words) {
 int listIndex = - 1;
 for (int i = 0;
 i < wordList.length; i ++) {
 if (word.equals (wordList [i])) {
 listIndex = i;
 }
 }
 if (listIndex > - 1) {
 wordCount [listIndex] ++;
 } else {
 wordList [j] = word;
 wordCount [j] ++;
 j ++;
 }
 }
 for (int i = 0;
 i < j; i ++) {
 System.out.println (""the word: "" + wordList [i] + "" occured "" + wordCount [i] + "" time(s)."");
 }
 }
 }","public static void main (String [] args) {
 Scanner stdin = new Scanner (System.in);
 String [] wordArray = new String [10000];
 int [] wordCount = new int [10000];
 int numWords = 0;
 while (stdin.hasNextLine ()) {
 String s = stdin.nextLine ();
 ArrayList < String > noDuplicated = new ArrayList < String > ();
 String [] words = s.replaceAll (""[^a-zA-Z ]"", """").toLowerCase ().split (""\\s+"");
 for (int i = 0;
 i < words.length; i ++) {
 if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
 }
 for (int i = 0;
 i < noDuplicated.size (); i ++) {
 int count = 0;
 for (int j = 0;
 j < words.length; j ++) {
 if (noDuplicated.get (i).equals (words [j])) count ++;
 }
 System.out.println (""word count: → "" + words [i] + "" "" + count);
 }
 }
 }",1
1070,"public static void main (String [] args) {
 int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
 int mArray [] = new int [5];
 int j = 0;
 for (int i = 0;
 i < array.length; i ++) {
 if (array [i] > lower (mArray)) {
 mArray [lowerPos (mArray)] = array [i];
 }
 }
 System.out.println (Arrays.toString (mArray));
 }","public static String compressBad (String str) {
 if (str.length () == 1) return str + ""1"";
 int countConsecutive = 0;
 String compressedString = """";
 for (int i = 0;
 i < str.length (); i ++) {
 if (i > 0) {
 countConsecutive ++;
 if (str.charAt (i) != str.charAt (i - 1)) {
 compressedString += """" + str.charAt (i - 1) + countConsecutive;
 countConsecutive = 0;
 }
 if (i == str.length () - 1) {
 countConsecutive ++;
 compressedString += """" + str.charAt (i) + countConsecutive;
 }
 }
 }
 return compressedString;
 }",0
353,"public static boolean isPrime (long num) {
 if (num > 2 && num % 2 == 0) {
 System.out.println (num + "" is not prime"");
 return false;
 }
 int top = (int) Math.sqrt (num) + 1;
 for (int i = 3;
 i < top; i += 2) {
 if (num % i == 0) {
 System.out.println (num + "" is not prime"");
 return false;
 }
 }
 System.out.println (num + "" is prime"");
 return true;
 }","boolean isPrime (int x) {
 for (int i = 2;
 i * i <= x; i ++) {
 if (x % i == 0) {
 return false;
 }
 }
 return true;
 }",1
59,"public static void main (String [] args) {
 Vector v1 = new Vector ();
 v1.add (new PrintOneToHundered ());
 Vector v2 = new Vector ();
 v2.addAll (v1);
 v2.addAll (v1);
 Vector v4 = new Vector ();
 v4.addAll (v2);
 v4.addAll (v2);
 Vector v8 = new Vector ();
 v8.addAll (v4);
 v8.addAll (v4);
 Vector v16 = new Vector ();
 v16.addAll (v8);
 v16.addAll (v8);
 Vector v32 = new Vector ();
 v32.addAll (v16);
 v32.addAll (v16);
 Vector v64 = new Vector ();
 v64.addAll (v32);
 v64.addAll (v32);
 Vector v100 = new Vector ();
 v100.addAll (v64);
 v100.addAll (v32);
 v100.addAll (v4);
 System.out.println (v100);
 }","public static void main (String [] args) {
 String set = new java.util.BitSet () {
 {
 set (1, 100 + 1);
 }
 }
 .toString ();
 System.out.append (set, 1, set.length () - 1);
 }",1
880,"static void test_02 () throws FileNotFoundException {
 final File file = new File (""43620487.txt"");
 final Scanner scanner = new Scanner (file);
 int [] houseLocations = new int [73382];
 for (int counter = 0;
 counter < 73382; counter ++) {
 houseLocations [counter] = scanner.nextInt ();
 }
 final int [] uniqueHouseLocationsSorted = uniqueHouseLocationsSorted (houseLocations);
 final Random random = new Random (0);
 long sum = 0;
 for (int i = 0;
 i < 100; i ++) {
 final int transmitterRange = random.nextInt (70000) + 1;
 final int minNumOfTransmitters = minNumOfTransmitters (uniqueHouseLocationsSorted, transmitterRange);
 sum += minNumOfTransmitters;
 }
 final long start = System.currentTimeMillis ();
 for (int i = 0;
 i < 4000; i ++) {
 final int transmitterRange = random.nextInt (70000) + 1;
 final int minNumOfTransmitters = minNumOfTransmitters (uniqueHouseLocationsSorted, transmitterRange);
 sum += minNumOfTransmitters;
 }
 final long end = System.currentTimeMillis ();
 System.out.println (""Took: "" + (end - start) + "" milliseconds. Sum = "" + sum);
 }","static void test_02 () throws FileNotFoundException {
 final File file = new File (""input.txt"");
 final Scanner scanner = new Scanner (file);
 int [] houseLocations = new int [73382];
 for (int counter = 0;
 counter < 73382; counter ++) {
 houseLocations [counter] = scanner.nextInt ();
 }
 scanner.close ();
 final int rounds = 400;
 final int [] uniqueHouseLocationsSorted = uniqueHouseLocationsSorted (houseLocations);
 final int transmitterRange = 73381;
 final long start = System.currentTimeMillis ();
 for (int i = 0;
 i < rounds; i ++) {
 final int minNumOfTransmitters = minNumOfTransmitters (uniqueHouseLocationsSorted, transmitterRange);
 }
 final long end = System.currentTimeMillis ();
 System.out.println (""Took: "" + (end - start) + "" milliseconds.."");
 }",1
1903,"public int solution (int X, int [] A) {
 int len = A.length;
 if (X > len) {
 return - 1;
 }
 int [] isFilled = new int [X];
 int jumped = 0;
 Arrays.fill (isFilled, 0);
 for (int i = 0;
 i < len; i ++) {
 int x = A [i];
 if (x <= X) {
 if (isFilled [x - 1] == 0) {
 isFilled [x - 1] = 1;
 jumped += 1;
 if (jumped == X) {
 return i;
 }
 }
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 int size = A.length;
 int [] check = new int [X];
 int cmp = 0;
 int time = - 1;
 for (int x = 0;
 x < size; x ++) {
 int temp = A [x];
 if (temp <= X) {
 if (check [temp - 1] > 0) {
 continue;
 }
 check [temp - 1] ++;
 cmp ++;
 }
 if (cmp == X) {
 time = x;
 break;
 }
 }
 return time;
 }",0
116,"public int solution (int X, int [] A) {
 int list [] = A;
 int sum = 0;
 int searchedValue = X;
 int sumV = searchedValue * (searchedValue + 1) / 2;
 List < Integer > arrayList = new ArrayList < Integer > ();
 for (int iii = 0;
 iii < list.length; iii ++) {
 if (list [iii] <= searchedValue && ! arrayList.contains (list [iii])) {
 sum += list [iii];
 if (sum == sumV) {
 return iii;
 }
 arrayList.add (list [iii]);
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 int size = A.length;
 int [] check = new int [X];
 int cmp = 0;
 int time = - 1;
 for (int x = 0;
 x < size; x ++) {
 int temp = A [x];
 if (temp <= X) {
 if (check [temp - 1] > 0) {
 continue;
 }
 check [temp - 1] ++;
 cmp ++;
 }
 if (cmp == X) {
 time = x;
 break;
 }
 }
 return time;
 }",1
698,"public void run () {
 System.out.println (i);
 try {
 cb.await ();
 i = i + 3;
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 }","public void run () {
 int i = 1;
 while (i < 50) {
 while (s.getState () != 3) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 3) System.out.println (""t1 "" + i);
 s.setState (1);
 i = i + 3;
 s.notifyAll ();
 }
 }
 }",1
1450,"public ListNode reverse (ListNode toBeNextNode, ListNode currentNode) {
 ListNode currentHead = currentNode;
 if ((currentNode == null || currentNode.next == null) && toBeNextNode == null) return currentHead;
 if (currentNode.next != null) currentHead = reverse (currentNode, currentNode.next);
 currentNode.next = toBeNextNode;
 return currentHead;
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 boolean tensFound = false;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number >= 20) {
 buffer.append (TOKENS [(number / 10) - 2]);
 number %= 10;
 tensFound = true;
 } else {
 number %= 20;
 }
 if (number != 0) {
 if (tensFound) {
 buffer.append (UNION_SEPARATOR);
 }
 buffer.append (unitProcessor.getName (number));
 }
 return buffer.toString ();
 }",0
188,"static String shuffle (String text) {
 if (text.length () <= 1) return text;
 int split = text.length () / 2;
 String temp1 = shuffle (text.substring (0, split));
 String temp2 = shuffle (text.substring (split));
 if (Math.random () > 0.5) return temp1 + temp2;
 else return temp2 + temp1;
 }","public static String shuffle (String text) {
 char [] characters = text.toCharArray ();
 for (int i = 0;
 i < characters.length; i ++) {
 int randomIndex = (int) (Math.random () * characters.length);
 char temp = characters [i];
 characters [i] = characters [randomIndex];
 characters [randomIndex] = temp;
 }
 return new String (characters);
 }",1
1910,"public remove (Element element) {
 for (Element e : myLinkedList) {
 if (e.equals (element)) {
 if (next != 0) previousPtr = nextPtr;
 else previousPtr = null;
 }
 }
 }","public int read () throws IOException {
 if (currentPos < currentLineEnd) {
 in.seek (currentPos ++);
 int readByte = in.readByte ();
 return readByte;
 } else if (currentPos < 0) {
 return - 1;
 } else {
 findPrevLine ();
 return read ();
 }
 }",0
191,"public static void main (String [] args) {
 JFrame frame = new JFrame ();
 frame.setTitle (""Stackoverflow"");
 JButton button = new JButton (""Change Size"");
 button.setVisible (true);
 frame.getContentPane ().add (button, BorderLayout.SOUTH);
 frame.setSize (200, 200);
 frame.setVisible (true);
 button.addActionListener (new ActionListener () {
 @Override
 public void actionPerformed (ActionEvent e) {
 frame.setSize (frame.getWidth (), frame.getHeight () + 50);
 }}
 );
 }","public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 new Main ();
 }}
 );
 }",1
827,"static int gcd (int a, int b) {
 if (a == 0 || b == 0) return 0;
 if (a == b) return a;
 if (a > b) return gcd (a - b, b);
 return gcd (a, b - a);
 }","public static final int gcd (int a, int b) {
 if (a == Integer.MIN_VALUE) {
 if (b == Integer.MIN_VALUE) throw new IllegalArgumentException (""gcd() is greater than Integer.MAX_VALUE"");
 return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
 }
 if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
 a = Math.abs (a);
 b = Math.abs (b);
 if (a == 0) return b;
 if (b == 0) return a;
 int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
 a>>= factorsOfTwoInA;
 b>>= factorsOfTwoInB;
 while (a != b) {
 if (a > b) {
 a = (a - b);
 a>>= Integer.numberOfTrailingZeros (a);
 } else {
 b = (b - a);
 b>>= Integer.numberOfTrailingZeros (b);
 }
 }
 return a << commonFactorsOfTwo;
 }",1
444,"public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 new Mail ().initUI ();
 }}
 );
 }","public static void main (String [] args) {
 JFrame frame = new JFrame (""New Message"");
 frame.setSize (100, 100);
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 JTextArea textArea = new JTextArea ();
 frame.add (textArea, BorderLayout.CENTER);
 JPanel list = new JPanel ();
 list.setLayout (new BoxLayout (list, BoxLayout.Y_AXIS));
 frame.add (list, BorderLayout.NORTH);
 String [] labels = {""To: "", ""Cc: "", ""Bcc: "", ""Subject: ""};
 for (int i = 0;
 i < labels.length; i ++) {
 JLabel l = new JLabel (labels [i]);
 JTextField f = new JTextField ();
 JPanel p = new JPanel (new BorderLayout ());
 p.add (l, BorderLayout.WEST);
 p.add (f, BorderLayout.CENTER);
 list.add (p);
 }
 frame.pack ();
 frame.setVisible (true);
 }",1
1345,"public static void main (String...args) {
 final CountDownLatch latch = new CountDownLatch (28);
 for (int i = 0;
 i < 28; i ++) {
 Thread t = new Thread (new Runnable () {
 public void run () {
 try {
 } finally {
 latch.countDown ();
 }
 }}
 );
 t.start ();
 }
 latch.await ();
 }","private static int solution (int N) {
 int gap = 0;
 String binaryStr = Integer.toBinaryString (N);
 String [] zeroArrays = binaryStr.split (""1"");
 System.out.println (Arrays.toString (zeroArrays));
 for (String zeroArray : zeroArrays) {
 gap = zeroArray.length () > gap ? zeroArray.length () : gap;
 }
 return gap;
 }",0
398,"public static void main (String [] args) {
 String str = ""abcdabghplhhnfl"".toLowerCase ();
 Integer [] ar = new Integer [26];
 for (int i = 0;
 i < str.length (); i ++) {
 int j = str.charAt (i) - 'a';
 if (ar [j] == null) {
 ar [j] = 1;
 } else {
 ar [j] += 1;
 }
 }
 for (int i = 0;
 i < ar.length; i ++) {
 if (ar [i] != null && ar [i] > 1) {
 char c = (char) (97 + i);
 System.out.println (""'"" + c + ""' comes "" + ar [i] + "" times."");
 }
 }
 }","public static void main (String [] args) {
 HashMap < Character, Integer > hm = new HashMap < Character, Integer > ();
 System.out.println (""Enter an String:"");
 Scanner sc = new Scanner (System.in);
 String s1 = sc.nextLine ();
 for (int i = 0;
 i < s1.length (); i ++) {
 if (! hm.containsKey (s1.charAt (i))) {
 hm.put (s1.charAt (i), (Integer) 1);
 } else {
 hm.put (s1.charAt (i), hm.get (s1.charAt (i)) + 1);
 }
 }
 System.out.println (""The Charecters are:"" + hm);
 }",1
1635,"public static void main (String [] args) {
 String [] colors = new String [args.length];
 int color_ix = 0;
 int number_idx = 0;
 Integer [] number = new Integer [args.length];
 for (int i = 0;
 i < args.length; i ++) {
 if (args [i] == null) {
 continue;
 }
 try {
 number [number_idx] = Integer.parseInt (args [i]);
 number_idx ++;
 } catch (NumberFormatException e) {
 colors [color_ix] = args [i];
 color_ix ++;
 }
 }
 System.out.println (""-----Number-----"");
 for (int i = 0;
 i < number_idx; i ++) {
 System.out.println (number [i]);
 }
 System.out.println (""-----Colors-----"");
 for (int i = 0;
 i < color_ix; i ++) {
 System.out.println (colors [i]);
 }
 }","public static void main (String [] args) {
 String output = """";
 Multiset < String > wordsMultiset = HashMultiset.create ();
 String [] words = ""AAABBBBCC"".split ("""");
 wordsMultiset.addAll (Arrays.asList (words));
 for (Entry < String > string : wordsMultiset.entrySet ()) {
 if (! string.getElement ().isEmpty ()) output += string.getCount () + """" + string.getElement ();
 }
 System.out.println (output);
 }",0
1531,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, Integer hash, XSSFCellStyle styleOld, HSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (workbookOld, workbookNew, styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (workbookNew, (XSSFFont) styleOld.getFont ()));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }","public void actionPerformed (ActionEvent e) {
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 if (! isConnected) {
 System.out.println (""connect action"");
 connect ();
 isConnected = true;
 } else {
 System.out.println (""disconnect action"");
 disconnect ();
 isConnected = false;
 }
 }}
 );
 }",0
1254,"public static void main (String [] args) {
 String sr = new String (""fsdfesfsfdddddddsfdsfssdfdsfdsfdsfdsfdsdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghghghghggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggfsdfesfsfdddddddsfdsfssdfdsfdsfdsfdsfdsdfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghghghghggggggggggggggggggggggggggggggggggggggggg"");
 byte [] data = sr.getBytes ();
 System.out.println (""src size "" + data.length);
 try {
 compress (data);
 } catch (IOException e) {
 e.printStackTrace ();
 }
 }","public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }",0
946,"private int binarySearch (int [] a, int x, int low, int high) {
 if (low > high) return - 1;
 int mid = (low + high) / 2;
 if (a [mid] == x) return mid;
 else if (a [mid] < x) return binarySearch (a, x, mid + 1, high);
 else return binarySearch (a, x, low, mid - 1);
 }","public static int binarySearch (int intToSearch, int [] sortedArray) {
 int lower = 0;
 int upper = sortedArray.length - 1;
 while (lower <= upper) {
 int mid = lower + (upper - lower) / 2;
 if (intToSearch < sortedArray [mid]) upper = mid - 1;
 else if (intToSearch > sortedArray [mid]) lower = mid + 1;
 else return mid;
 }
 return - 1;
 }",1
1966,"public void refund (float balance) {
 System.out.println (""You have selected the refund option:"");
 for (int counter = (int) balance;
 counter >= 10; counter -= 10) {
 System.out.println (""Balance: £"" + balance);
 balance -= 10;
 }
 for (int counter = (int) balance;
 counter > 0; counter -= 1) {
 System.out.println (""Balance: £"" + balance);
 balance -= 1;
 }
 System.out.println (""Balance: £"" + balance);
 }","static int findMIN (int [] A, int c) {
 int first = c;
 int id = c;
 int x = A [c];
 while (c < A.length) {
 if (x > A [c]) {
 x = A [c];
 id = c;
 }
 c ++;
 }
 int tmp = A [first];
 A [first] = A [id];
 A [id] = tmp;
 return x;
 }",0
1144,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Distance (m)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 gg.drawString (string, (getWidth () - width) / 2, 11);
 }","public int [] solution (String S, int [] P, int [] K) {
 char [] sc = S.toCharArray ();
 int [] A = new int [sc.length];
 int [] G = new int [sc.length];
 int [] C = new int [sc.length];
 int prevA = - 1, prevG = - 1, prevC = - 1;
 for (int i = 0;
 i < sc.length; i ++) {
 if (sc [i] == 'A') prevA = i;
 else if (sc [i] == 'G') prevG = i;
 else if (sc [i] == 'C') prevC = i;
 A [i] = prevA;
 G [i] = prevG;
 C [i] = prevC;
 }
 int [] result = new int [P.length];
 for (int i = 0;
 i < P.length; i ++) {
 if (A [K [i]] >= P [i] && A [K [i]] <= K [i]) {
 result [i] = 1;
 } else if (C [K [i]] >= P [i] && C [K [i]] <= K [i]) {
 result [i] = 2;
 } else if (G [K [i]] >= P [i] && G [K [i]] <= K [i]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 return result;
 }",0
1319,"public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
 CharSequence out = super.filter (source, start, end, dest, dstart, dend);
 if (out != null) {
 source = out;
 start = 0;
 end = out.length ();
 }
 int len = end - start;
 if (len == 0) {
 return source;
 }
 int dlen = dest.length ();
 for (int i = 0;
 i < dstart; i ++) {
 if (dest.charAt (i) == '.') {
 return (dlen - (i + 1) + len > digits) ? """" : new SpannableStringBuilder (source, start, end);
 }
 }
 for (int i = start;
 i < end; ++ i) {
 if (source.charAt (i) == '.') {
 if ((dlen - dend) + (end - (i + 1)) > digits) return """";
 else break;
 }
 }
 return new SpannableStringBuilder (source, start, end);
 }","public Object instantiateItem (final ViewGroup container, int position) {
 Button button = new Button (container.getContext ());
 ViewGroup.LayoutParams params = new ViewGroup.LayoutParams (ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
 button.setLayoutParams (params);
 button.setText (String.valueOf (position));
 LinearLayout layout = new LinearLayout (container.getContext ());
 layout.setOrientation (LinearLayout.VERTICAL);
 ViewGroup.LayoutParams layoutParams = new ViewGroup.LayoutParams (ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
 layout.addView (button);
 final int page = position;
 button.setOnClickListener (new View.OnClickListener () {
 @Override
 public void onClick (View v) {
 Toast.makeText (container.getContext (), ""You clicked: "" + page + "". page."", Toast.LENGTH_SHORT).show ();
 }}
 );
 container.addView (layout);
 return layout;
 }",0
500,"public int [] randNums (int total, int minVal, int numRands) {
 if (minVal * numRands > total) {
 throw new IllegalArgumentException ();
 }
 int [] results = randNums (total - minVal * numRands, numRands);
 for (int i = 0;
 i < numRands; ++ i) {
 results [i] += minVal;
 }
 return results;
 }","private int [] randNums (int total, int n) {
 final int [] results = new int [n];
 if (total == 0) {
 Arrays.fill (results, 0);
 return results;
 }
 final BigInteger [] rs = new BigInteger [n];
 final BigInteger totalPlus1 = BigInteger.valueOf (total + 1L);
 while (true) {
 for (int i = 0;
 i < n; ++ i) {
 rs [i] = new BigInteger (256, rand);
 }
 BigInteger sum = BigInteger.ZERO;
 for (BigInteger r : rs) {
 sum = sum.add (r);
 }
 if (sum.compareTo (BigInteger.ZERO) == 0) {
 continue;
 }
 for (int i = 0;
 i < n; ++ i) {
 results [i] = sum.mod (rs [i]).mod (totalPlus1).intValue ();
 }
 return results;
 }
 }",1
943,"public static void main (String [] args) throws Exception {
 Class unsafeClass = Class.forName (""sun.misc.Unsafe"");
 Field f = unsafeClass.getDeclaredField (""theUnsafe"");
 f.setAccessible (true);
 Unsafe unsafe = (Unsafe) f.get (null);
 System.out.print (""4..3..2..1..."");
 try {
 for (;;) unsafe.allocateMemory (1024 * 1024);
 } catch (Error e) {
 System.out.println (""Boom :)"");
 e.printStackTrace ();
 }
 }","public static void main (String [] args) throws InterruptedException {
 while (makeMore) {
 new Leakee (0).check ();
 }
 while (true) {
 Thread.sleep (1000);
 System.out.println (""memory="" + Runtime.getRuntime ().freeMemory () + "" / "" + Runtime.getRuntime ().totalMemory ());
 }
 }",1
1767,"public static void main (String [] args) {
 final int max = 100;
 new java.util.concurrent.Semaphore (max) {
 void go () {
 acquireUninterruptibly ();
 System.err.println (max - availablePermits ());
 go ();
 }}
 .go ();
 }","public static int [] removeDuplicates (int [] arr) {
 boolean [] set = new boolean [1001];
 int totalItems = 0;
 for (int i = 0;
 i < arr.length; ++ i) {
 if (! set [arr [i]]) {
 set [arr [i]] = true;
 totalItems ++;
 }
 }
 int [] ret = new int [totalItems];
 int c = 0;
 for (int i = 0;
 i < set.length; ++ i) {
 if (set [i]) {
 ret [c ++] = i;
 }
 }
 return ret;
 }",0
1721,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Distance (m)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 gg.drawString (string, (getWidth () - width) / 2, 11);
 }","public static boolean isPalindrome (String str) {
 str = str.toUpperCase ();
 char [] strChars = str.toCharArray ();
 List < Character > word = new ArrayList < > ();
 for (char c : strChars) {
 word.add (c);
 }
 while (true) {
 if ((word.size () == 1) || (word.size () == 0)) {
 return true;
 }
 if (word.get (0) == word.get (word.size () - 1)) {
 word.remove (0);
 word.remove (word.size () - 1);
 } else {
 return false;
 }
 }
 }",0
765,"public void actionPerformed (ActionEvent e) {
 if (! connected) {
 JOptionPane.showMessageDialog (null, ""Connected"");
 putValue (NAME, ""Disonnect"");
 connected = true;
 } else {
 JOptionPane.showMessageDialog (null, ""Disconnected"");
 putValue (NAME, ""Connect"");
 connected = false;
 }
 }","public void actionPerformed (ActionEvent e) {
 SwingUtilities.invokeLater (new Runnable () {
 public void run () {
 if (! isConnected) {
 System.out.println (""connect action"");
 connect ();
 isConnected = true;
 } else {
 System.out.println (""disconnect action"");
 disconnect ();
 isConnected = false;
 }
 }}
 );
 }",1
578,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","private void transform () {
 String call = ""transform "";
 System.out.println (call + ""Workbook"");
 XSSFSheet sheetNew;
 HSSFSheet sheetOld;
 this.workbookNew.setForceFormulaRecalculation (this.workbookOld.getForceFormulaRecalculation ());
 this.workbookNew.setMissingCellPolicy (this.workbookOld.getMissingCellPolicy ());
 for (int i = 0;
 i < this.workbookOld.getNumberOfSheets (); i ++) {
 sheetOld = this.workbookOld.getSheetAt (i);
 sheetNew = this.workbookNew.getSheet (sheetOld.getSheetName ());
 System.out.println (call + ""Sheet erstellt: "" + sheetOld.getSheetName ());
 sheetNew = this.workbookNew.createSheet (sheetOld.getSheetName ());
 this.transform (sheetOld, sheetNew);
 }
 System.out.println (call + ""Anzahl verwendeter Styles: "" + this.styleMap.size ());
 System.out.println (call + ""abgeschlossen"");
 }",1
1924,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","public boolean equals (Object obj) {
 if (obj == null) {
 return false;
 }
 if (! Person.class.isAssignableFrom (obj.getClass ())) {
 return false;
 }
 final Person other = (Person) obj;
 if ((this.name == null) ? (other.name != null) : ! this.name.equals (other.name)) {
 return false;
 }
 if (this.age != other.age) {
 return false;
 }
 return true;
 }",0
816,"public static String sequenceNums (int [] nums) {
 StringBuilder sb = new StringBuilder ();
 int rangeStart = nums [0];
 int previous = nums [0];
 int current;
 int expected = previous + 1;
 int size = nums.length;
 for (int i = 1;
 i < size; i ++) {
 current = nums [i];
 expected = previous + 1;
 if (current != expected) {
 addRange (sb, rangeStart, previous);
 rangeStart = current;
 }
 previous = current;
 }
 addRange (sb, rangeStart, nums [size - 1]);
 return sb.toString ();
 }","public static String sequenceNums (int [] nums) {
 StringBuilder sb = new StringBuilder ();
 int rangeStart = nums [0];
 int previous = nums [0];
 int current;
 int expected = previous + 1;
 for (int i = 1;
 i < nums.length; i ++) {
 current = nums [i];
 expected = previous + 1;
 if (current != expected || i == (nums.length - 1)) {
 if (current == rangeStart) {
 sb.append (previous + "","");
 } else {
 if (rangeStart != previous) {
 if (i == nums.length - 1) sb.append (rangeStart + ""-"" + current);
 else sb.append (rangeStart + ""-"" + previous + "","");
 } else {
 if (i == nums.length - 1) sb.append (rangeStart + "","" + current);
 else sb.append (rangeStart + "","");
 }
 }
 rangeStart = current;
 }
 previous = current;
 }
 if (sb.charAt (sb.length () - 1) == ',') {
 sb.deleteCharAt (sb.length () - 1);
 }
 return sb.toString ();
 }",1
1427,"public static void main (String...a) {
 System.out.print (""Enter the String"");
 Scanner sc = new Scanner (System.in);
 String st = sc.nextLine ();
 int [] ar = new int [256];
 for (int i = 0;
 i < st.length (); i ++) {
 ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
 }
 for (int i = 0;
 i < 256; i ++) {
 char ch = (char) i;
 if (ar [i] > 0) {
 if (ar [i] == 1) {
 System.out.print (ch);
 } else {
 System.out.print (ch + """" + ar [i]);
 }
 }
 }
 }","public static void main (String [] args) {
 for (int i = 0;
 i < 9; i ++) {
 for (int j = 0;
 j < 9; j ++) {
 for (int k = 0;
 k < 9; k ++) {
 if (condition1) {
 System.out.println (""Breaking from Loop K and J"");
 k = 9;
 j = 9;
 }
 if (condition2) {
 System.out.println (""Breaking from Loop K, J and I"");
 k = 9;
 j = 9;
 i = 9;
 }
 }
 }
 }
 System.out.println (""End of I , J , K"");
 }",0
575,"public static int getRandomNumberBetween (int min, int max) {
 Random foo = new Random ();
 int randomNumber = foo.nextInt (max - min) + min;
 if (randomNumber == min) {
 return min + 1;
 } else {
 return randomNumber;
 }
 }","private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
 if (numberOne == numberTwo) {
 throw new Exception (""Both the numbers can not be equal"");
 }
 float rand = (float) Math.random ();
 float highRange = Math.max (numberOne, numberTwo);
 float lowRange = Math.min (numberOne, numberTwo);
 float lowRand = (float) Math.floor (rand - 1);
 float highRand = (float) Math.ceil (rand + 1);
 float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
 return genRand;
 }",1
1880,"public static Node reverse (Node root) {
 if (root == null || root.next == null) {
 return root;
 }
 Node curr, prev, next;
 curr = root;
 prev = next = null;
 while (curr != null) {
 next = curr.next;
 curr.next = prev;
 prev = curr;
 curr = next;
 }
 return prev;
 }","public void start (Stage primaryStage) {
 try {
 StackPane root = new StackPane ();
 Text text2 = new Text (""I will be aligned TOPLEFT"");
 Text text = new Text ("" Level 2 \n\n"" + ""Press ENTER to start a new game"");
 text.setTextAlignment (TextAlignment.CENTER);
 root.getChildren ().addAll (text2, text);
 StackPane.setAlignment (text2, Pos.TOP_LEFT);
 StackPane.setAlignment (text, Pos.CENTER);
 Scene scene = new Scene (root, 400, 400);
 primaryStage.setScene (scene);
 primaryStage.show ();
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }",0
1105,"static boolean isAnagram (String s1, String s2) {
 if (s1.length () != s2.length ()) return false;
 int n = s1.length ();
 int [] charMap = new int [256];
 for (int i = 0;
 i < n; i ++) {
 char c1 = s1.charAt (i);
 charMap [c1] ++;
 char c2 = s2.charAt (i);
 charMap [c2] --;
 }
 for (int i = 0;
 i < charMap.length; i ++) {
 if (charMap [i] != 0) return false;
 }
 return true;
 }","public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
 if (x1 == x2) {
 return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
 }
 double m = (y2 - y1) / (x2 - x1);
 double r1 = x1 + m * y1;
 double r2 = x2 + m * y2;
 double r = x + m * y;
 return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
 }",0
1045,"public static String replaceHostInUrl (String originalURL, String newAuthority) throws URISyntaxException, MalformedURLException {
 URI uri = new URI (originalURL);
 uri = new URI (uri.getScheme ().toLowerCase (Locale.US), newAuthority, uri.getPath (), uri.getQuery (), uri.getFragment ());
 int port = uri.getPort ();
 if (port > 0 && port == uri.toURL ().getDefaultPort ()) {
 uri = new URI (uri.getScheme (), uri.getUserInfo (), uri.getHost (), - 1, uri.getPath (), uri.getQuery (), uri.getFragment ());
 }
 return uri.toString ();
 }","static void copyFolder (File src, File dest) {
 if (src == null || dest == null) return;
 if (! src.isDirectory ()) return;
 if (dest.exists ()) {
 if (! dest.isDirectory ()) {
 return;
 }
 } else {
 dest.mkdir ();
 }
 if (src.listFiles () == null || src.listFiles ().length == 0) return;
 String strAbsPathSrc = src.getAbsolutePath ();
 String strAbsPathDest = dest.getAbsolutePath ();
 try {
 Files.walkFileTree (src.toPath (), new SimpleFileVisitor < Path > () {
 @Override
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
 if (dstFile.exists ()) return FileVisitResult.CONTINUE;
 if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
 Files.copy (file, dstFile.toPath ());
 return FileVisitResult.CONTINUE;
 }}
 );
 } catch (IOException e) {
 return;
 }
 return;
 }",0
756,"public static String getDurationBreakdown (long millis) {
 if (millis < 0) {
 throw new IllegalArgumentException (""Duration must be greater than zero!"");
 }
 long days = TimeUnit.MILLISECONDS.toDays (millis);
 long hours = TimeUnit.MILLISECONDS.toHours (millis) % 24;
 long minutes = TimeUnit.MILLISECONDS.toMinutes (millis) % 60;
 long seconds = TimeUnit.MILLISECONDS.toSeconds (millis) % 60;
 long milliseconds = millis % 1000;
 return String.format (""%d Days %d Hours %d Minutes %d Seconds %d Milliseconds"", days, hours, minutes, seconds, milliseconds);
 }","public static String getDurationBreakdown (long millis) {
 String [] units = {"" Days "", "" Hours "", "" Minutes "", "" Seconds ""};
 Long [] values = new Long [units.length];
 if (millis < 0) {
 throw new IllegalArgumentException (""Duration must be greater than zero!"");
 }
 values [0] = TimeUnit.MILLISECONDS.toDays (millis);
 millis -= TimeUnit.DAYS.toMillis (values [0]);
 values [1] = TimeUnit.MILLISECONDS.toHours (millis);
 millis -= TimeUnit.HOURS.toMillis (values [1]);
 values [2] = TimeUnit.MILLISECONDS.toMinutes (millis);
 millis -= TimeUnit.MINUTES.toMillis (values [2]);
 values [3] = TimeUnit.MILLISECONDS.toSeconds (millis);
 StringBuilder sb = new StringBuilder (64);
 boolean startPrinting = false;
 for (int i = 0;
 i < units.length; i ++) {
 if (! startPrinting && values [i] != 0) startPrinting = true;
 if (startPrinting) {
 sb.append (values [i]);
 sb.append (units [i]);
 }
 }
 return (sb.toString ());
 }",1
1694,"public MyViewHolder (View view) {
 super (view);
 view.setOnClickListener ((v) -> {
 int adapterPosition = getAdapterPosition ();
 if (adapterPosition >= 0) {
 clicks.onItemSelected (myObject, adapterPosition);
 }
 });
 }","public static int solution (int X, int [] A) {
 int [] counter = new int [X + 1];
 int ans = - 1;
 int x = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (counter [A [i]] == 0) {
 counter [A [i]] = A [i];
 x += 1;
 if (x == X) {
 return i;
 }
 }
 }
 return ans;
 }",0
1184,"public static void main (String [] args) throws Exception {
 Experius a = new Experius ();
 int count = 10000000;
 int v = 0;
 long tm = System.currentTimeMillis ();
 for (int i = 0;
 i < count; ++ i) {
 v = a.something (i + v);
 ++ v;
 }
 tm = System.currentTimeMillis () - tm;
 System.out.println (""Time: "" + tm);
 tm = System.currentTimeMillis ();
 Method method = Experius.class.getMethod (""something"", Integer.TYPE);
 for (int i = 0;
 i < count; ++ i) {
 Object o = method.invoke (a, i + v);
 ++ v;
 }
 tm = System.currentTimeMillis () - tm;
 System.out.println (""Time: "" + tm);
 }","public static void main (String [] args) {
 boolean ObjectID = false;
 boolean Class = false;
 boolean LastChangedBy = false;
 boolean Number = false;
 boolean StartEffectivity = false;
 boolean EndEffectivity = false;
 boolean StartSerialNumberEffectivity = false;
 boolean EndSerialNumberEffectivity = false;
 boolean StartLotNumberEffectivity = false;
 boolean EndLotNumberEffectivity = false;
 boolean SerialNumberEffectivityCxtPartNumber = false;
 boolean LotNumberEffectivityCxtPartNumber = false;
 boolean DefaultUnit = false;
 boolean Name = false;
 boolean PartType = false;
 boolean Source = false;
 boolean State = false;
 boolean IsPhantom = false;
 boolean Version = false;
 boolean Iteration = false;
 boolean PreviousVersion = false;
 boolean IsConfigurable = false;
 boolean IsCollapsible = false;
 boolean TargetID = false;
 try {
 XMLInputFactory factory = XMLInputFactory.newInstance ();
 XMLEventReader eventReader = factory.createXMLEventReader (new FileReader (""c:\\staxTestFile.xml""));
 while (eventReader.hasNext ()) {
 XMLEvent event = eventReader.nextEvent ();
 switch (event.getEventType ()) {
 case XMLStreamConstants.START_ELEMENT :
 StartElement startElement = event.asStartElement ();
 String qName = startElement.getName ().getLocalPart ();
 if (qName.equalsIgnoreCase (""Part"")) {
 System.out.println (""Start Element : Part"");
 Iterator < Attribute > attributes = startElement.getAttributes ();
 } else if (qName.equalsIgnoreCase (""ObjectID"")) {
 ObjectID = true;
 } else if (qName.equalsIgnoreCase (""Class"")) {
 Class = true;
 } else if (qName.equalsIgnoreCase (""LastChangedBy"")) {
 LastChangedBy = true;
 } else if (qName.equalsIgnoreCase (""Number"")) {
 Number = true;
 } else if (qName.equalsIgnoreCase (""StartEffectivity"")) {
 StartEffectivity = true;
 } else if (qName.equalsIgnoreCase (""EndSerialNumberEffectivity"")) {
 EndSerialNumberEffectivity = true;
 } else if (qName.equalsIgnoreCase (""StartSerialNumberEffectivity"")) {
 StartSerialNumberEffectivity = true;
 } else if (qName.equalsIgnoreCase (""EndSerialNumberEffectivity"")) {
 EndSerialNumberEffectivity = true;
 } else if (qName.equalsIgnoreCase (""StartLotNumberEffectivity"")) {
 StartLotNumberEffectivity = true;
 } else if (qName.equalsIgnoreCase (""EndLotNumberEffectivity"")) {
 EndLotNumberEffectivity = true;
 } else if (qName.equalsIgnoreCase (""SerialNumberEffectivityCxtPartNumber"")) {
 SerialNumberEffectivityCxtPartNumber = true;
 } else if (qName.equalsIgnoreCase (""LotNumberEffectivityCxtPartNumber"")) {
 LotNumberEffectivityCxtPartNumber = true;
 } else if (qName.equalsIgnoreCase (""DefaultUnit"")) {
 DefaultUnit = true;
 } else if (qName.equalsIgnoreCase (""Name"")) {
 Name = true;
 } else if (qName.equalsIgnoreCase (""PartType"")) {
 PartType = true;
 } else if (qName.equalsIgnoreCase (""Source"")) {
 Source = true;
 } else if (qName.equalsIgnoreCase (""State"")) {
 State = true;
 } else if (qName.equalsIgnoreCase (""IsPhantom"")) {
 IsPhantom = true;
 } else if (qName.equalsIgnoreCase (""Version"")) {
 Version = true;
 } else if (qName.equalsIgnoreCase (""Iteration"")) {
 Iteration = true;
 } else if (qName.equalsIgnoreCase (""PreviousVersion"")) {
 PreviousVersion = true;
 } else if (qName.equalsIgnoreCase (""IsConfigurable"")) {
 IsConfigurable = true;
 } else if (qName.equalsIgnoreCase (""IsCollapsible"")) {
 IsCollapsible = true;
 } else if (qName.equalsIgnoreCase (""TargetID"")) {
 TargetID = true;
 }
 break;
 case XMLStreamConstants.CHARACTERS :
 Characters characters = event.asCharacters ();
 if (ObjectID) {
 System.out.println (""ObjectID: "" + characters.getData ());
 ObjectID = false;
 }
 if (Class) {
 System.out.println (""Class: "" + characters.getData ());
 Class = false;
 }
 if (LastChangedBy) {
 System.out.println (""LastChangedBy "" + characters.getData ());
 LastChangedBy = false;
 }
 if (Number) {
 System.out.println (""Number: "" + characters.getData ());
 Number = false;
 }
 if (StartEffectivity) {
 System.out.println (""StartEffectivity: "" + characters.getData ());
 StartEffectivity = false;
 }
 if (EndEffectivity) {
 System.out.println (""EndEffectivity "" + characters.getData ());
 EndEffectivity = false;
 }
 if (StartSerialNumberEffectivity) {
 System.out.println (""StartSerialNumberEffectivity "" + characters.getData ());
 StartSerialNumberEffectivity = false;
 }
 if (EndSerialNumberEffectivity) {
 System.out.println (""EndSerialNumberEffectivity: "" + characters.getData ());
 EndSerialNumberEffectivity = false;
 }
 if (StartLotNumberEffectivity) {
 System.out.println (""StartLotNumberEffectivity"" + characters.getData ());
 StartLotNumberEffectivity = false;
 }
 if (EndLotNumberEffectivity) {
 System.out.println (""EndLotNumberEffectivity: "" + characters.getData ());
 EndLotNumberEffectivity = false;
 }
 if (SerialNumberEffectivityCxtPartNumber) {
 System.out.println (""SerialNumberEffectivityCxtPartNumber "" + characters.getData ());
 SerialNumberEffectivityCxtPartNumber = false;
 }
 if (LotNumberEffectivityCxtPartNumber) {
 System.out.println (""LotNumberEffectivityCxtPartNumber: "" + characters.getData ());
 LotNumberEffectivityCxtPartNumber = false;
 }
 if (DefaultUnit) {
 System.out.println (""DefaultUnit: "" + characters.getData ());
 DefaultUnit = false;
 }
 if (Name) {
 System.out.println (""Name: "" + characters.getData ());
 Name = false;
 }
 if (PartType) {
 System.out.println (""PartType: "" + characters.getData ());
 PartType = false;
 }
 if (Source) {
 System.out.println (""Source: "" + characters.getData ());
 Source = false;
 }
 if (State) {
 System.out.println (""State: "" + characters.getData ());
 State = false;
 }
 if (IsPhantom) {
 System.out.println (""IsPhantom: "" + characters.getData ());
 IsPhantom = false;
 }
 if (Version) {
 System.out.println (""Version: "" + characters.getData ());
 Version = false;
 }
 if (Iteration) {
 System.out.println (""Iteration: "" + characters.getData ());
 Iteration = false;
 }
 if (PreviousVersion) {
 System.out.println (""PreviousVersion: "" + characters.getData ());
 PreviousVersion = false;
 }
 if (IsConfigurable) {
 System.out.println (""IsConfigurable: "" + characters.getData ());
 IsConfigurable = false;
 }
 if (IsCollapsible) {
 System.out.println (""IsCollapsible: "" + characters.getData ());
 IsCollapsible = false;
 }
 if (TargetID) {
 System.out.println (""TargetID: "" + characters.getData ());
 TargetID = false;
 }
 break;
 case XMLStreamConstants.END_ELEMENT :
 EndElement endElement = event.asEndElement ();
 if (endElement.getName ().getLocalPart ().equalsIgnoreCase (""Part"")) {
 System.out.println (""End Element : Part"");
 System.out.println ();
 }
 break;
 }
 }
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }",0
1542,"public void actionPerformed (ActionEvent e) {
 timer.stop ();
 if (SwingUtilities.isEventDispatchThread ()) {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 } else {
 Runnable doRun = new Runnable () {
 @Override
 public void run () {
 remWins ();
 }}
 ;
 SwingUtilities.invokeLater (doRun);
 }
 }","public static int getHours () {
 while (true) {
 if (console.hasNextInt ()) {
 System.out.print (""**hours input accepted**"");
 return console.nextInt ();
 }
 console.nextLine ();
 System.out.print ("", please re-enter the hours again:"");
 }
 }",0
391,"public V remove (Object key) {
 readWriteLock.writeLock ().lock ();
 V value;
 try {
 value = super.remove (key);
 } finally {
 readWriteLock.writeLock ().unlock ();
 }
 return value;
 }","public K remove () {
 if (head == null) return null;
 K val = head.value;
 if (head.next == null) {
 head = null;
 tail = null;
 } else {
 head = head.next;
 head.prev = null;
 }
 return val;
 }",1
1994,"public static void main (String [] args) {
 char [] values = {'a', 'b', 'c', 'd'};
 int n = values.length;
 int r = 2;
 int i = 0, j = 0;
 for (i = 0; i < n; i ++) {
 for (j = 0; j < n; j ++) {
 System.out.println (values [j] + "" "" + values [i]);
 }
 }
 }","public static int mode (int [] [] arr) {
 int [] oneDArray = new int [arr.length * arr.length];
 for (int i = 0;
 i < arr.length; i ++) {
 for (int s = 0;
 s < arr.length; s ++) {
 oneDArray [(i * arr.length) + s] = arr [i] [s];
 }
 }
 }",0
1241,"private void parseComments (InputStream in, Workbook workbook) {
 try {
 DefaultHandler handler = getCommentHandler (workbook);
 SAXParser saxParser = getSAXParser ();
 saxParser.parse (in, handler);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 }","public synchronized void run () {
 int i = 3;
 while (i < 50) {
 while (s.getState () != 2) {
 synchronized (s) {
 try {
 s.wait ();
 } catch (InterruptedException e) {
 e.printStackTrace ();
 }
 }
 }
 synchronized (s) {
 if (s.getState () == 2) System.out.println (""t3 "" + i);
 i = i + 3;
 s.setState (3);
 s.notifyAll ();
 }
 }
 }",0
1647,"public static void main (String [] args) {
 String output = """";
 Multiset < String > wordsMultiset = HashMultiset.create ();
 String [] words = ""AAABBBBCC"".split ("""");
 wordsMultiset.addAll (Arrays.asList (words));
 for (Entry < String > string : wordsMultiset.entrySet ()) {
 if (! string.getElement ().isEmpty ()) output += string.getCount () + """" + string.getElement ();
 }
 System.out.println (output);
 }","public static boolean hasLoop (Node root) {
 if (root == null) return false;
 Node slow = root, fast = root;
 int taken = 0, limit = 2;
 while (fast.next != null) {
 fast = fast.next;
 taken ++;
 if (slow == fast) return true;
 if (taken == limit) {
 taken = 0;
 limit <<= 1;
 slow = fast;
 }
 }
 return false;
 }",0
1293,"static int [] sort (int arr []) {
 for (int i = 0;
 i < arr.length; i ++) {
 for (int j = i;
 j < arr.length; j ++) {
 if (arr [j] < arr [i]) {
 int temp = arr [i];
 arr [i] = arr [j];
 arr [j] = temp;
 }
 }
 }
 return arr;
 }","public static void main (String [] args) {
 int len = args.length;
 if (len == 0) {
 sopl (""\n\tUsage: java echo <args:String[]>"");
 System.exit (0);
 }
 sop (""\n\t"");
 for (int i = 0;
 i < len; i ++) {
 sop (args [i] + "" "");
 }
 sop (""\n\t"");
 while (len > 0) sop (args [args.length - len --] + "" "");
 sopl ("""");
 }",0
1439,"public void run () {
 JMenuBar menuBar = new JMenuBar ();
 JMenu menu = new JMenu (""A regular menu"");
 menu.add (new JMenuItem (""Menu item""));
 JMenu gridMenu = new JMenu (""Menu with grid"");
 gridMenu.getPopupMenu ().setLayout (new GridLayout (2, 2));
 gridMenu.add (""Top left"");
 gridMenu.add (""Top right"");
 gridMenu.add (""Bottom left"");
 gridMenu.add (""Bottom right"");
 menu.add (gridMenu);
 menuBar.add (menu);
 JFrame frame = new JFrame (""Menus"");
 frame.setJMenuBar (menuBar);
 frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 frame.pack ();
 frame.setVisible (true);
 }","private static boolean hasDateExpired (int days, java.util.Date savedDate) throws ParseException {
 SimpleDateFormat dateFormatUtc = new SimpleDateFormat (""yyyy-MMM-dd HH:mm:ss"");
 dateFormatUtc.setTimeZone (TimeZone.getTimeZone (""UTC""));
 SimpleDateFormat dateFormatLocal = new SimpleDateFormat (""yyyy-MMM-dd HH:mm:ss"");
 savedDate = dateFormatLocal.parse (dateFormatUtc.format (savedDate));
 Date dateTimeNow = dateFormatLocal.parse (dateFormatUtc.format (new Date ()));
 long expires = dateTimeNow.getTime () + (DAY_IN_MS * days);
 Date expiresDate = new Date (expires);
 System.out.println (""savedDate \t\t"" + savedDate + ""\nexpiresDate \t"" + expiresDate);
 return savedDate.before (expiresDate);
 }",0
300,"public static void main (String [] args) throws TwilioRestException {
 TwilioRestClient client = new TwilioRestClient (ACCOUNT_SID, AUTH_TOKEN);
 List < NameValuePair > params = new ArrayList < NameValuePair > ();
 params.add (new BasicNameValuePair (""Body"", ""Test Twilio message""));
 params.add (new BasicNameValuePair (""To"", ""+14159352345""));
 params.add (new BasicNameValuePair (""From"", ""+14158141829""));
 MessageFactory messageFactory = client.getAccount ().getMessageFactory ();
 Message message = messageFactory.create (params);
 System.out.println (message.getSid ());
 }","public static void main (String [] args) throws Exception {
 AuthMethod auth = new TokenAuthMethod (API_KEY, API_SECRET);
 NexmoClient client = new NexmoClient (auth);
 TextMessage message = new TextMessage (FROM_NUMBER, TO_NUMBER, ""Hello from Nexmo!"");
 SmsSubmissionResult [] responses = client.getSmsClient ().submitMessage (message);
 for (SmsSubmissionResult response : responses) {
 System.out.println (response);
 }
 }",1
889,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
 HSSFCell cellNew;
 rowNew.setHeight (rowOld.getHeight ());
 for (Cell cell : rowOld) {
 cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
 if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
 }
 this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
 }","private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, Integer hash, HSSFCellStyle styleOld, XSSFCellStyle styleNew) {
 styleNew.setAlignment (styleOld.getAlignment ());
 styleNew.setBorderBottom (styleOld.getBorderBottom ());
 styleNew.setBorderLeft (styleOld.getBorderLeft ());
 styleNew.setBorderRight (styleOld.getBorderRight ());
 styleNew.setBorderTop (styleOld.getBorderTop ());
 styleNew.setDataFormat (this.transform (workbookOld, workbookNew, styleOld.getDataFormat ()));
 styleNew.setFillBackgroundColor (styleOld.getFillBackgroundColor ());
 styleNew.setFillForegroundColor (styleOld.getFillForegroundColor ());
 styleNew.setFillPattern (styleOld.getFillPattern ());
 styleNew.setFont (this.transform (workbookNew, styleOld.getFont (workbookOld)));
 styleNew.setHidden (styleOld.getHidden ());
 styleNew.setIndention (styleOld.getIndention ());
 styleNew.setLocked (styleOld.getLocked ());
 styleNew.setVerticalAlignment (styleOld.getVerticalAlignment ());
 styleNew.setWrapText (styleOld.getWrapText ());
 this.styleMap.put (hash, styleNew);
 }",1
309,"public static void main (String args []) throws IOException {
 BufferedReader dataIn = new BufferedReader (new InputStreamReader (System.in));
 String strSize, strGrades;
 int laki = 100;
 int totalGrades = 0;
 float gradeAverage = 0;
 float [] grades = new float [laki];
 System.out.print (""How many grades will you enter?"");
 strSize = dataIn.readLine ();
 laki = Integer.parseInt (strSize);
 grades = new float [laki];
 for (int i = 0;
 i < laki; i ++) {
 System.out.print (""Please enter grade # "" + (i + 1) + "": "");
 strGrades = dataIn.readLine ();
 grades [i] = Float.parseFloat (strGrades);
 totalGrades += grades [i];
 }
 gradeAverage = totalGrades / laki;
 System.out.println (""Your grades average is "" + gradeAverage);
 }","public static void main (String args []) throws IOException {
 BufferedReader dataIn = new BufferedReader (new InputStreamReader (System.in));
 int totalGrades = 0;
 float gradeAverage = 0;
 System.out.print (""How many grades will you enter?"");
 int laki = Integer.parseInt (dataIn.readLine ());
 float [] grades = new float [laki];
 int count = 0;
 while (laki > 0) {
 System.out.print (""Please enter grade # "" + (count + 1) + "": "");
 grades [count] = Float.parseFloat (dataIn.readLine ());
 totalGrades += grades [count];
 laki --;
 count ++;
 }
 gradeAverage = (float) totalGrades / count;
 System.out.println (""Your grades average is "" + gradeAverage);
 }",1
971,"public void run () {
 try {
 writeLatch.await ();
 map.put (150, 150);
 readLatch.countDown ();
 } catch (InterruptedException e) {
 Thread.currentThread ().interrupt ();
 }
 }","public void run () {
 for (int i = 0;
 ; i ++) {
 if (i % 1000 == 0) {
 System.out.printf (""get: %d\n"", i);
 }
 Map < K, String > m2 = new HashMap < > (map);
 }
 }",1
445,"public void run () {
 System.out.println (i);
 try {
 cb.await ();
 i = i + 3;
 Thread.sleep (1000);
 } catch (InterruptedException e) {
 e.printStackTrace ();
 } catch (BrokenBarrierException e) {
 e.printStackTrace ();
 }
 }","public void run () {
 try {
 for (int i = 0;
 i < 2; i ++) {
 System.out.println (""toe"");
 }
 } catch (Exception e) {
 e.getStackTrace ();
 }
 }",1
174,"public static int solution (int X, int [] A) {
 int [] count = new int [X];
 for (int i = 0;
 i < A.length; i ++) {
 try {
 count [A [i] - 1] ++;
 } catch (ArrayIndexOutOfBoundsException e) {
 }
 if (i >= X - 1) {
 for (int j = 0;
 j < count.length; j ++) {
 if (count [j] == 0) {
 break;
 }
 if (j == count.length - 1) {
 return i;
 }
 }
 }
 }
 return - 1;
 }","public int solution (int X, int [] A) {
 int len = A.length;
 if (X > len) {
 return - 1;
 }
 int [] isFilled = new int [X];
 int jumped = 0;
 Arrays.fill (isFilled, 0);
 for (int i = 0;
 i < len; i ++) {
 int x = A [i];
 if (x <= X) {
 if (isFilled [x - 1] == 0) {
 isFilled [x - 1] = 1;
 jumped += 1;
 if (jumped == X) {
 return i;
 }
 }
 }
 }
 return - 1;
 }",1
1391,"private void type (char character) {
 handleSpecialCharacter (character);
 if (Character.isLowerCase (character)) {
 typeCharacter (Character.toUpperCase (character));
 }
 if (Character.isUpperCase (character)) {
 typeShiftCharacter (character);
 }
 if (Character.isDigit (character)) {
 typeCharacter (character);
 }
 }","public static void main (String [] args) {
 Address address = new Address ();
 address.setSomeCrap (null);
 Person person = new Person ();
 person.setAddress (address);
 long startTime = System.currentTimeMillis ();
 for (int i = 0;
 i < 1000000; i ++) {
 try {
 System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
 } catch (NullPointerException npe) {
 }
 }
 long endTime = System.currentTimeMillis ();
 System.out.println ((endTime - startTime) / 1000F);
 long startTime1 = System.currentTimeMillis ();
 for (int i = 0;
 i < 1000000; i ++) {
 if (person != null) {
 Address address1 = person.getAddress ();
 if (address1 != null) {
 SomeCrap someCrap2 = address1.getSomeCrap ();
 if (someCrap2 != null) {
 System.out.println (someCrap2.getCrap ());
 }
 }
 }
 }
 long endTime1 = System.currentTimeMillis ();
 System.out.println ((endTime1 - startTime1) / 1000F);
 }",0
1806,"private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFSheet sheetOld, HSSFSheet sheetNew) {
 System.out.println (""transform Sheet"");
 sheetNew.setDisplayFormulas (sheetOld.isDisplayFormulas ());
 sheetNew.setDisplayGridlines (sheetOld.isDisplayGridlines ());
 sheetNew.setDisplayGuts (sheetOld.getDisplayGuts ());
 sheetNew.setDisplayRowColHeadings (sheetOld.isDisplayRowColHeadings ());
 sheetNew.setDisplayZeros (sheetOld.isDisplayZeros ());
 sheetNew.setFitToPage (sheetOld.getFitToPage ());
 sheetNew.setHorizontallyCenter (sheetOld.getHorizontallyCenter ());
 sheetNew.setMargin (Sheet.BottomMargin, sheetOld.getMargin (Sheet.BottomMargin));
 sheetNew.setMargin (Sheet.FooterMargin, sheetOld.getMargin (Sheet.FooterMargin));
 sheetNew.setMargin (Sheet.HeaderMargin, sheetOld.getMargin (Sheet.HeaderMargin));
 sheetNew.setMargin (Sheet.LeftMargin, sheetOld.getMargin (Sheet.LeftMargin));
 sheetNew.setMargin (Sheet.RightMargin, sheetOld.getMargin (Sheet.RightMargin));
 sheetNew.setMargin (Sheet.TopMargin, sheetOld.getMargin (Sheet.TopMargin));
 sheetNew.setPrintGridlines (sheetNew.isPrintGridlines ());
 sheetNew.setRightToLeft (sheetNew.isRightToLeft ());
 sheetNew.setRowSumsBelow (sheetNew.getRowSumsBelow ());
 sheetNew.setRowSumsRight (sheetNew.getRowSumsRight ());
 sheetNew.setVerticallyCenter (sheetOld.getVerticallyCenter ());
 HSSFRow rowNew;
 for (Row row : sheetOld) {
 rowNew = sheetNew.createRow (row.getRowNum ());
 if (rowNew != null) this.transform (workbookOld, workbookNew, (XSSFRow) row, rowNew);
 }
 for (int i = 0;
 i < this.lastColumn; i ++) {
 sheetNew.setColumnWidth (i, sheetOld.getColumnWidth (i));
 sheetNew.setColumnHidden (i, sheetOld.isColumnHidden (i));
 }
 for (int i = 0;
 i < sheetOld.getNumMergedRegions (); i ++) {
 CellRangeAddress merged = sheetOld.getMergedRegion (i);
 sheetNew.addMergedRegion (merged);
 }
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2d = (Graphics2D) g.create ();
 Shape outer = new Rectangle (0, 0, getWidth (), getHeight ());
 Shape inner = new Rectangle (0, 0, 50, 50);
 Area area = new Area (outer);
 area.subtract (new Area (inner));
 g2d.setColor (getBackground ());
 g2d.fill (area);
 g2d.dispose ();
 }",0
1051,"public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
 Path p = Files.createFile (Paths.get (zipFilePath));
 try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
 Path pp = Paths.get (sourceDirPath);
 Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
 ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
 try {
 zs.putNextEntry (zipEntry);
 Files.copy (path, zs);
 zs.closeEntry ();
 } catch (IOException e) {
 System.err.println (e);
 }
 });
 }
 }","public static void main (String [] args) {
 int count = 0;
 String str = ""hi this is is is line"";
 String [] s1 = str.split ("" "");
 for (int i = 0;
 i <= s1.length - 1; i ++) {
 if (s1 [i].equals (""is"")) {
 count ++;
 }
 }
 System.out.println (count);
 }",0
1820,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Time (s)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 drawRotate (gg, getWidth (), (getHeight () + width) / 2, 270, string);
 }","public void runScript (Reader reader) throws IOException, SQLException {
 try {
 boolean originalAutoCommit = connection.getAutoCommit ();
 try {
 if (originalAutoCommit != this.autoCommit) {
 connection.setAutoCommit (this.autoCommit);
 }
 runScript (connection, reader);
 } finally {
 connection.setAutoCommit (originalAutoCommit);
 }
 } catch (IOException e) {
 throw e;
 } catch (SQLException e) {
 throw e;
 } catch (Exception e) {
 throw new RuntimeException (""Error running script.  Cause: "" + e, e);
 }
 }",0
78,"public int [] solution (String S, int [] P, int [] Q) {
 final char [] characterInput = S.toCharArray ();
 final int [] integerInput = new int [characterInput.length];
 for (int counter = 0;
 counter < characterInput.length; counter ++) {
 integerInput [counter] = characterMapping.get (characterInput [counter]);
 }
 int [] result = new int [P.length];
 for (int index = 0;
 index < P.length; index ++) {
 if (P [index] == Q [index]) {
 result [index] = integerInput [P [index]];
 break;
 }
 final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
 final int minimumValue = minimum (subArray);
 result [index] = minimumValue;
 }
 return result;
 }","public int [] solution (String S, int [] P, int [] Q) {
 int [] result = new int [P.length];
 int [] factor1 = new int [S.length ()];
 int [] factor2 = new int [S.length ()];
 int [] factor3 = new int [S.length ()];
 int [] factor4 = new int [S.length ()];
 int factor1Sum = 0;
 int factor2Sum = 0;
 int factor3Sum = 0;
 int factor4Sum = 0;
 for (int i = 0;
 i < S.length (); i ++) {
 switch (S.charAt (i)) {
 case 'A' :
 factor1Sum ++;
 break;
 case 'C' :
 factor2Sum ++;
 break;
 case 'G' :
 factor3Sum ++;
 break;
 case 'T' :
 factor4Sum ++;
 break;
 default :
 break;
 }
 factor1 [i] = factor1Sum;
 factor2 [i] = factor2Sum;
 factor3 [i] = factor3Sum;
 factor4 [i] = factor4Sum;
 }
 for (int i = 0;
 i < P.length; i ++) {
 int start = P [i];
 int end = Q [i];
 if (start == 0) {
 if (factor1 [end] > 0) {
 result [i] = 1;
 } else if (factor2 [end] > 0) {
 result [i] = 2;
 } else if (factor3 [end] > 0) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 } else {
 if (factor1 [end] > factor1 [start - 1]) {
 result [i] = 1;
 } else if (factor2 [end] > factor2 [start - 1]) {
 result [i] = 2;
 } else if (factor3 [end] > factor3 [start - 1]) {
 result [i] = 3;
 } else {
 result [i] = 4;
 }
 }
 }
 return result;
 }",1
1,"public ZonedDateTime parseToZonedDateTime (String date, String dateFormat) {
 DateTimeFormatter formatter = DateTimeFormatter.ofPattern (dateFormat);
 TemporalAccessor parsed = formatter.parseBest (date, ZonedDateTime :: from, LocalDateTime :: from);
 if (parsed instanceof ZonedDateTime) {
 return (ZonedDateTime) parsed;
 }
 if (parsed instanceof LocalDateTime) {
 LocalDateTime dt = (LocalDateTime) parsed;
 return dt.atZone (ZoneId.systemDefault ());
 }
 return null;
 }","public ZonedDateTime parseToZonedDateTime (String date, String dateFormat) {
 DateTimeFormatter formatter = DateTimeFormatter.ofPattern (dateFormat);
 ZonedDateTime zonedDateTime = null;
 try {
 zonedDateTime = ZonedDateTime.parse (date, formatter);
 } catch (DateTimeException e) {
 LocalDateTime localDateTime = LocalDateTime.parse (date, formatter);
 zonedDateTime = localDateTime.atZone (ZoneId.systemDefault ());
 }
 return zonedDateTime;
 }",1
519,"public void actionPerformed (ActionEvent e) {
 JFileChooser ch = getFileChooser ();
 int result = ch.showSaveDialog (gui);
 if (result == JFileChooser.APPROVE_OPTION) {
 try {
 File f = ch.getSelectedFile ();
 ImageIO.write (BasicPaint.this.canvasImage, ""png"", f);
 BasicPaint.this.originalImage = BasicPaint.this.canvasImage;
 dirty = false;
 } catch (IOException ioe) {
 showError (ioe);
 ioe.printStackTrace ();
 }
 }
 }","public void actionPerformed (ActionEvent e) {
 int x = (int) (Math.random () * getWidth ());
 int y = (int) (Math.random () * getHeight ());
 int width = (int) (Math.random () * (getWidth () / 4));
 int height = (int) (Math.random () * (getHeight () / 4));
 if (x + width > getWidth ()) {
 x = getWidth () - width;
 }
 if (y + height > getHeight ()) {
 y = getHeight () - height;
 }
 Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
 lstShapes.add (new MyRectangle (x, y, width, height, color));
 repaint ();
 }",1
222,"public void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D gg = (Graphics2D) g;
 gg.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 Font font = new Font (""Arial"", Font.PLAIN, 15);
 String string = ""Distance (m)"";
 FontMetrics metrics = g.getFontMetrics (font);
 int width = metrics.stringWidth (string);
 int height = metrics.getHeight ();
 gg.setFont (font);
 gg.drawString (string, (getWidth () - width) / 2, 11);
 }","protected void paintComponent (Graphics g) {
 super.paintComponent (g);
 Graphics2D g2 = (Graphics2D) g;
 g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
 double xScale = ((double) getWidth () - (2 * padding) - labelPadding) / (scores.size () - 1);
 double yScale = ((double) getHeight () - 2 * padding - labelPadding) / (getMaxScore () - getMinScore ());
 List < Point > graphPoints = new ArrayList < > ();
 for (int i = 0;
 i < scores.size (); i ++) {
 int x1 = (int) (i * xScale + padding + labelPadding);
 int y1 = (int) ((getMaxScore () - scores.get (i)) * yScale + padding);
 graphPoints.add (new Point (x1, y1));
 }
 g2.setColor (Color.WHITE);
 g2.fillRect (padding + labelPadding, padding, getWidth () - (2 * padding) - labelPadding, getHeight () - 2 * padding - labelPadding);
 g2.setColor (Color.BLACK);
 for (int i = 0;
 i < numberYDivisions + 1; i ++) {
 int x0 = padding + labelPadding;
 int x1 = pointWidth + padding + labelPadding;
 int y0 = getHeight () - ((i * (getHeight () - padding * 2 - labelPadding)) / numberYDivisions + padding + labelPadding);
 int y1 = y0;
 if (scores.size () > 0) {
 g2.setColor (gridColor);
 g2.drawLine (padding + labelPadding + 1 + pointWidth, y0, getWidth () - padding, y1);
 g2.setColor (Color.BLACK);
 String yLabel = ((int) ((getMinScore () + (getMaxScore () - getMinScore ()) * ((i * 1.0) / numberYDivisions)) * 100)) / 100.0 + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (yLabel);
 g2.drawString (yLabel, x0 - labelWidth - 5, y0 + (metrics.getHeight () / 2) - 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 for (int i = 0;
 i < scores.size (); i ++) {
 if (scores.size () > 1) {
 int x0 = i * (getWidth () - padding * 2 - labelPadding) / (scores.size () - 1) + padding + labelPadding;
 int x1 = x0;
 int y0 = getHeight () - padding - labelPadding;
 int y1 = y0 - pointWidth;
 if ((i % ((int) ((scores.size () / 20.0)) + 1)) == 0) {
 g2.setColor (gridColor);
 g2.drawLine (x0, getHeight () - padding - labelPadding - 1 - pointWidth, x1, padding);
 g2.setColor (Color.BLACK);
 String xLabel = i + """";
 FontMetrics metrics = g2.getFontMetrics ();
 int labelWidth = metrics.stringWidth (xLabel);
 g2.drawString (xLabel, x0 - labelWidth / 2, y0 + metrics.getHeight () + 3);
 }
 g2.drawLine (x0, y0, x1, y1);
 }
 }
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, padding + labelPadding, padding);
 g2.drawLine (padding + labelPadding, getHeight () - padding - labelPadding, getWidth () - padding, getHeight () - padding - labelPadding);
 Stroke oldStroke = g2.getStroke ();
 g2.setColor (lineColor);
 g2.setStroke (GRAPH_STROKE);
 for (int i = 0;
 i < graphPoints.size () - 1; i ++) {
 int x1 = graphPoints.get (i).x;
 int y1 = graphPoints.get (i).y;
 int x2 = graphPoints.get (i + 1).x;
 int y2 = graphPoints.get (i + 1).y;
 g2.drawLine (x1, y1, x2, y2);
 }
 g2.setStroke (oldStroke);
 g2.setColor (pointColor);
 for (int i = 0;
 i < graphPoints.size (); i ++) {
 int x = graphPoints.get (i).x - pointWidth / 2;
 int y = graphPoints.get (i).y - pointWidth / 2;
 int ovalW = pointWidth;
 int ovalH = pointWidth;
 g2.fillOval (x, y, ovalW, ovalH);
 }
 }",1
328,"public static void main (String [] args) throws Exception {
 AuthMethod auth = new TokenAuthMethod (API_KEY, API_SECRET);
 NexmoClient client = new NexmoClient (auth);
 TextMessage message = new TextMessage (FROM_NUMBER, TO_NUMBER, ""Hello from Nexmo!"");
 SmsSubmissionResult [] responses = client.getSmsClient ().submitMessage (message);
 for (SmsSubmissionResult response : responses) {
 System.out.println (response);
 }
 }","public static void main (String args []) {
 GSMConnect gsm = new GSMConnect (comPort);
 if (gsm.init ()) {
 try {
 System.out.println (""Initialization Success"");
 gsm.connect ();
 Thread.sleep (5000);
 gsm.checkStatus ();
 Thread.sleep (5000);
 gsm.sendMessage (""+91XXXXXXXX"", ""Trial Success"");
 Thread.sleep (1000);
 gsm.hangup ();
 Thread.sleep (1000);
 gsm.closePort ();
 gsm.outCommand ();
 System.exit (1);
 } catch (Exception e) {
 e.printStackTrace ();
 }
 } else {
 System.out.println (""Can't init this card"");
 }
 }",1
503,"public void type (char character) {
 switch (character) {
 case 'a' :
 doType (VK_A);
 break;
 case 'b' :
 doType (VK_B);
 break;
 case 'c' :
 doType (VK_C);
 break;
 case 'd' :
 doType (VK_D);
 break;
 case 'e' :
 doType (VK_E);
 break;
 case 'f' :
 doType (VK_F);
 break;
 case 'g' :
 doType (VK_G);
 break;
 case 'h' :
 doType (VK_H);
 break;
 case 'i' :
 doType (VK_I);
 break;
 case 'j' :
 doType (VK_J);
 break;
 case 'k' :
 doType (VK_K);
 break;
 case 'l' :
 doType (VK_L);
 break;
 case 'm' :
 doType (VK_M);
 break;
 case 'n' :
 doType (VK_N);
 break;
 case 'o' :
 doType (VK_O);
 break;
 case 'p' :
 doType (VK_P);
 break;
 case 'q' :
 doType (VK_Q);
 break;
 case 'r' :
 doType (VK_R);
 break;
 case 's' :
 doType (VK_S);
 break;
 case 't' :
 doType (VK_T);
 break;
 case 'u' :
 doType (VK_U);
 break;
 case 'v' :
 doType (VK_V);
 break;
 case 'w' :
 doType (VK_W);
 break;
 case 'x' :
 doType (VK_X);
 break;
 case 'y' :
 doType (VK_Y);
 break;
 case 'z' :
 doType (VK_Z);
 break;
 case 'A' :
 doType (VK_SHIFT, VK_A);
 break;
 case 'B' :
 doType (VK_SHIFT, VK_B);
 break;
 case 'C' :
 doType (VK_SHIFT, VK_C);
 break;
 case 'D' :
 doType (VK_SHIFT, VK_D);
 break;
 case 'E' :
 doType (VK_SHIFT, VK_E);
 break;
 case 'F' :
 doType (VK_SHIFT, VK_F);
 break;
 case 'G' :
 doType (VK_SHIFT, VK_G);
 break;
 case 'H' :
 doType (VK_SHIFT, VK_H);
 break;
 case 'I' :
 doType (VK_SHIFT, VK_I);
 break;
 case 'J' :
 doType (VK_SHIFT, VK_J);
 break;
 case 'K' :
 doType (VK_SHIFT, VK_K);
 break;
 case 'L' :
 doType (VK_SHIFT, VK_L);
 break;
 case 'M' :
 doType (VK_SHIFT, VK_M);
 break;
 case 'N' :
 doType (VK_SHIFT, VK_N);
 break;
 case 'O' :
 doType (VK_SHIFT, VK_O);
 break;
 case 'P' :
 doType (VK_SHIFT, VK_P);
 break;
 case 'Q' :
 doType (VK_SHIFT, VK_Q);
 break;
 case 'R' :
 doType (VK_SHIFT, VK_R);
 break;
 case 'S' :
 doType (VK_SHIFT, VK_S);
 break;
 case 'T' :
 doType (VK_SHIFT, VK_T);
 break;
 case 'U' :
 doType (VK_SHIFT, VK_U);
 break;
 case 'V' :
 doType (VK_SHIFT, VK_V);
 break;
 case 'W' :
 doType (VK_SHIFT, VK_W);
 break;
 case 'X' :
 doType (VK_SHIFT, VK_X);
 break;
 case 'Y' :
 doType (VK_SHIFT, VK_Y);
 break;
 case 'Z' :
 doType (VK_SHIFT, VK_Z);
 break;
 case '`' :
 doType (VK_BACK_QUOTE);
 break;
 case '0' :
 doType (VK_0);
 break;
 case '1' :
 doType (VK_1);
 break;
 case '2' :
 doType (VK_2);
 break;
 case '3' :
 doType (VK_3);
 break;
 case '4' :
 doType (VK_4);
 break;
 case '5' :
 doType (VK_5);
 break;
 case '6' :
 doType (VK_6);
 break;
 case '7' :
 doType (VK_7);
 break;
 case '8' :
 doType (VK_8);
 break;
 case '9' :
 doType (VK_9);
 break;
 case '-' :
 doType (VK_MINUS);
 break;
 case '=' :
 doType (VK_EQUALS);
 break;
 case '~' :
 doType (VK_BACK_QUOTE);
 break;
 case '!' :
 doType (VK_SHIFT, VK_EXCLAMATION_MARK);
 break;
 case '@' :
 doType (VK_SHIFT, VK_AT);
 break;
 case '#' :
 doType (VK_SHIFT, VK_NUMBER_SIGN);
 break;
 case '$' :
 doType (VK_SHIFT, VK_DOLLAR);
 break;
 case '%' :
 doType (VK_SHIFT, VK_5);
 break;
 case '^' :
 doType (VK_SHIFT, VK_CIRCUMFLEX);
 break;
 case '&' :
 doType (VK_SHIFT, VK_AMPERSAND);
 break;
 case '*' :
 doType (VK_SHIFT, VK_ASTERISK);
 break;
 case '(' :
 doType (VK_LEFT_PARENTHESIS);
 break;
 case ')' :
 doType (VK_RIGHT_PARENTHESIS);
 break;
 case '_' :
 doType (VK_SHIFT, VK_UNDERSCORE);
 break;
 case '+' :
 doType (VK_SHIFT, VK_PLUS);
 break;
 case '\t' :
 doType (VK_TAB);
 break;
 case '\n' :
 doType (VK_ENTER);
 break;
 case '[' :
 doType (VK_OPEN_BRACKET);
 break;
 case ']' :
 doType (VK_CLOSE_BRACKET);
 break;
 case '\\' :
 doType (VK_BACK_SLASH);
 break;
 case '{' :
 doType (VK_SHIFT, VK_OPEN_BRACKET);
 break;
 case '}' :
 doType (VK_SHIFT, VK_CLOSE_BRACKET);
 break;
 case '|' :
 doType (VK_SHIFT, VK_BACK_SLASH);
 break;
 case ';' :
 doType (VK_SEMICOLON);
 break;
 case ':' :
 doType (VK_SHIFT, VK_COLON);
 break;
 case '\'' :
 doType (VK_QUOTE);
 break;
 case '""' :
 doType (VK_SHIFT, VK_QUOTEDBL);
 break;
 case ',' :
 doType (VK_COMMA);
 break;
 case '<' :
 doType (VK_SHIFT, VK_COMMA);
 break;
 case '.' :
 doType (VK_PERIOD);
 break;
 case '>' :
 doType (VK_SHIFT, VK_PERIOD);
 break;
 case '/' :
 doType (VK_SLASH);
 break;
 case '?' :
 doType (VK_SHIFT, VK_SLASH);
 break;
 case ' ' :
 doType (VK_SPACE);
 break;
 case '\b' :
 doType (VK_BACK_SPACE);
 break;
 default :
 throw new IllegalArgumentException (""Cannot type character "" + character);
 }
 }","public void type (String text) {
 char c;
 for (int ii = 0;
 ii < text.length (); ii ++) {
 c = text.charAt (ii);
 if (c <= 31 || c == 129) {
 pressControlKey (c);
 } else {
 typeAsciiCode (c);
 }
 }
 }",1
1113,"public boolean equals (Object object) {
 if (this == object) {
 return true;
 }
 if (object == null) {
 return false;
 }
 if (! (object instanceof CircularList < ? >)) {
 return false;
 }
 CircularList < ? > that = (CircularList < ? >) object;
 Element < ? > first0 = first;
 Element < ? > current0 = first0;
 Element < ? > first1 = that.first;
 Element < ? > current1 = first1;
 while (true) {
 if (equalSequence (current0, current0, current1, current1)) {
 return true;
 }
 current1 = current1.next;
 if (current1 == first1) {
 return false;
 }
 }
 }","public static void main (String [] args) throws InterruptedException {
 BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
 expensiveObjects.put (new Object ());
 expensiveObjects.put (new Object ());
 expensiveObjects.put (new Object ());
 expensiveObjects.put (new Object ());
 ExecutorService executorService = Executors.newFixedThreadPool (4);
 for (int i = 0;
 i < 4; i ++) {
 executorService.execute (new MyRunnable (expensiveObjects));
 }
 executorService.shutdown ();
 executorService.awaitTermination (5, TimeUnit.SECONDS);
 System.out.println (""Final: "" + outputCount.get ());
 }",0
1367,"public String startOz (String str) {
 int len = str.length ();
 if (len < 1) return new String ("""");
 if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String (""oz"");
 if (str.charAt (0) == 'o') return new String (""o"");
 if (str.charAt (1) == 'z') return new String (""z"");
 return new String ("""");
 }","public static void main (String [] args) {
 String x = ""flskdafsld~fdsakçkçfsda sfdaldsak~çfdskkfadsçlkçfldskçlflçfdskçldksçlkfdslçakafdslçdsklçfdskçlafdskçkdfsçlkfds~çlkfasdçlçfdls~kçlf~dksçlsakdçlkfç"";
 System.out.println (""x length: "" + x.length ());
 String [] lines = Split (x, 30, 210);
 for (int i = 0;
 i < lines.length; i ++) {
 System.out.println (""lines["" + i + ""]: (len: "" + lines [i].length () + "") : "" + lines [i]);
 }
 }",0
1558,"private static int score (char [] a, char [] b, int i, int j) {
 if (i == a.length || j == b.length) {
 return 0;
 } else if (a [i] == b [j]) {
 return 1 + score (a, b, i + 1, j + 1);
 } else {
 return max (score (a, b, i + 1, j), score (a, b, i, j + 1));
 }
 }","public static void main (String [] args) {
 File fileName = new File (""hello.txt"");
 try {
 Scanner scan = new Scanner (fileName);
 while (scan.hasNextLine ()) {
 String line = scan.nextLine ();
 System.out.println (line);
 int indexHello = line.lastIndexOf (""hello"", 0);
 int indexBye = line.indexOf (""bye"".indexHello);
 String newString = line.substring (indexHello, indexBye);
 }
 } catch (FileNotFoundException e) {
 e.printStackTrace ();
 }
 }",0
1352,"public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 boolean tensFound = false;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number >= 20) {
 buffer.append (TOKENS [(number / 10) - 2]);
 number %= 10;
 tensFound = true;
 } else {
 number %= 20;
 }
 if (number != 0) {
 if (tensFound) {
 buffer.append (UNION_SEPARATOR);
 }
 buffer.append (unitProcessor.getName (number));
 }
 return buffer.toString ();
 }","public void actionPerformed (ActionEvent e) {
 tick ();
 int delta = 20;
 int width = SPRITE_WIDTH + 2 * delta;
 int height = width;
 if (moved) {
 int x = oldMX - delta;
 int y = oldMY - delta;
 repaint (x, y, width, height);
 }
 int x = mX - delta;
 int y = mY - delta;
 repaint (x, y, width, height);
 moved = false;
 }",0
1021,"public boolean isBalanced (String strExpression) {
 Map < Character, Character > bracketPair = new HashMap < Character, Character > ();
 bracketPair.put ('(', ')');
 bracketPair.put ('[', ']');
 bracketPair.put ('{', '}');
 Stack < Character > stk = new Stack < Character > ();
 for (int i = 0;
 i < strExpression.length (); i ++) {
 if (bracketPair.containsKey (strExpression.charAt (i))) stk.push (strExpression.charAt (i));
 else if (bracketPair.containsValue (strExpression.charAt (i))) if (stk.isEmpty () || bracketPair.get (stk.pop ()) != strExpression.charAt (i)) return false;
 }
 if (stk.isEmpty ()) return true;
 else return false;
 }","private static int pow (int x, int n) {
 if (n == 0) return 1;
 if (n == 1) return x;
 if (n < 0) {
 if (x == 1 || (x == 2 && n == - 1)) return 1;
 else return 0;
 }
 if ((n & 1) == 0) {
 long num = pow (x * x, n / 2);
 if (num > Integer.MAX_VALUE) return Integer.MAX_VALUE;
 return (int) num;
 } else {
 long num = x * pow (x * x, n / 2);
 if (num > Integer.MAX_VALUE) return Integer.MAX_VALUE;
 return (int) num;
 }
 }",0
870,"public static void main (String [] args) {
 String name = ""AnuvratAnuvra"";
 char [] arr = name.toCharArray ();
 HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
 for (char val : arr) {
 map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
 }
 for (Entry < Character, Integer > entry : map.entrySet ()) {
 if (entry.getValue () > 1) {
 Character key = entry.getKey ();
 Object value = entry.getValue ();
 System.out.println (key + "":"" + value);
 }
 }
 }","public static void main (String [] args) {
 String test = ""The quick brown fox jumped over the lazy dog."";
 int countA = 0, countO = 0, countSpace = 0, countDot = 0;
 for (int i = 0;
 i < test.length (); i ++) {
 switch (test.charAt (i)) {
 case 'a' :
 case 'A' :
 countA ++;
 break;
 case 'o' :
 case 'O' :
 countO ++;
 break;
 case ' ' :
 countSpace ++;
 break;
 case '.' :
 countDot ++;
 break;
 }
 }
 System.out.printf (""%s%d%n%s%d%n%s%d%n%s%d"", ""A: "", countA, ""O: "", countO, ""Space: "", countSpace, ""Dot: "", countDot);
 }",1
1770,"public static void main (String [] args) {
 Calendar calendar = Calendar.getInstance ();
 int countFirstSunday = 0;
 for (int year = 1901;
 year <= 2000; year ++) {
 for (int month = 0;
 month <= 11; month ++) {
 calendar.set (year, month, 1);
 if (calendar.get (Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
 countFirstSunday ++;
 }
 }
 }
 System.out.println (""Sundays as the first of month: "" + countFirstSunday);
 }","public String getName (String value) {
 StringBuilder buffer = new StringBuilder ();
 int offset = NO_VALUE;
 int number;
 if (value.length () > 3) {
 number = Integer.valueOf (value.substring (value.length () - 3), 10);
 } else {
 number = Integer.valueOf (value, 10);
 }
 number %= 100;
 if (number < 10) {
 offset = (number % 10) - 1;
 } else if (number < 20) {
 offset = (number % 20) - 1;
 }
 if (offset != NO_VALUE && offset < TOKENS.length) {
 buffer.append (TOKENS [offset]);
 }
 return buffer.toString ();
 }",0
362,"public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 System.out.print (""\t\tPlease enter the maximum: "");
 int max = input.nextInt ();
 System.out.print (""\t\tPlease enter the minimum: "");
 int min = input.nextInt ();
 System.out.print (""enter: "");
 input.nextLine ();
 String word = input.nextLine ();
 System.out.print (word);
 int countwords = 0;
 for (int i = 0;
 i < word.length (); i ++) {
 if (word.charAt (i) == ' ') {
 countwords ++;
 }
 }
 countwords ++;
 System.out.println (countwords);
 if (countwords <= max && countwords >= min) {
 System.out.println (""YAY!!!!!!!!! YOU'RE WTHIN THE RAAAANGE!!!!!!!!!!!!!!!!!!!!!!!"");
 }
 }","public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 System.out.print (""\t\tPlease enter the maximum: "");
 int max = input.nextInt ();
 System.out.print (""\t\tPlease enter the minimum: "");
 int min = input.nextInt ();
 System.out.print (""enter: "");
 Scanner lineInput = new Scanner (System.in);
 String word = lineInput.nextLine ();
 String [] lengthword = word.split (""\\s+"");
 int countwords = lengthword.length;
 if (countwords <= max && countwords >= min) {
 System.out.println (""YAY!!!!!!!!! YOU'RE WTHIN THE RAAAANGE!!!!!!!!!!!!!!!!!!!!!!!"");
 } else {
 System.out.println (""Ohh!!!!!!!!! YOU'RE Not in RAAAANGE!!!!!!!!!!!!!!!!!!!!!!!"");
 }
 }",1
1067,"public int solution (int X, int [] A) {
 Set < Integer > leaves = new HashSet < > ();
 for (int i = 0;
 i < A.length; i ++) {
 leaves.add (A [i]);
 if (leaves.contains (X) && leaves.size () == X) return i;
 }
 return - 1;
 }","public void start (Stage stage) {
 stage.setTitle (""TRON Synopsis"");
 Font.loadFont (CustomFontApp.class.getResource (""TRON.TTF"").toExternalForm (), 10);
 Label title = new Label (""TRON"");
 title.getStyleClass ().add (""title"");
 Label caption = new Label (""A sci-fi flick set in an alternate reality."");
 caption.getStyleClass ().add (""caption"");
 caption.setMaxWidth (220);
 caption.setWrapText (true);
 caption.setTextAlignment (TextAlignment.CENTER);
 VBox layout = new VBox (10);
 layout.setStyle (""-fx-padding: 20px; -fx-background-color: silver"");
 layout.setAlignment (Pos.CENTER);
 layout.getChildren ().setAll (title, new ImageView (new Image (""http://ia.media-imdb.com/images/M/MV5BMTY5NjM2MjAwOV5BMl5BanBnXkFtZTYwMTgyMzA5.V1.SY317.jpg"")), caption);
 final Scene scene = new Scene (layout);
 scene.getStylesheets ().add (getClass ().getResource (""custom-font-styles.css"").toExternalForm ());
 stage.setScene (scene);
 stage.show ();
 }",0
666,"public static void main (String [] arguments) {
 Scanner input = new Scanner (System.in);
 String username;
 double age;
 String gender;
 String marital_status;
 int telephone_number;
 Scanner one = new Scanner (System.in);
 System.out.println (""Enter Name:"");
 username = one.next ();
 System.out.println (""Name accepted "" + username);
 Scanner two = new Scanner (System.in);
 System.out.println (""Enter Age:"");
 age = two.nextDouble ();
 System.out.println (""Age accepted "" + age);
 Scanner three = new Scanner (System.in);
 System.out.println (""Enter Gender:"");
 gender = three.next ();
 System.out.println (""Gender accepted "" + gender);
 Scanner four = new Scanner (System.in);
 System.out.println (""Enter Marital status:"");
 marital_status = four.next ();
 System.out.println (""Marital status accepted "" + marital_status);
 Scanner five = new Scanner (System.in);
 System.out.println (""Enter Telephone number:"");
 telephone_number = five.nextInt ();
 System.out.println (""Telephone number accepted "" + telephone_number);
 }","public static void main (String [] args) {
 Scanner input = new Scanner (System.in);
 final int valid = 6;
 Scanner one = new Scanner (System.in);
 System.out.println (""Enter your username: "");
 String s = one.nextLine ();
 if (s.length () < valid) {
 System.out.println (""Enter a valid username"");
 System.out.println (""User name must contain "" + valid + "" characters"");
 System.out.println (""Enter again: "");
 s = one.nextLine ();
 }
 System.out.println (""Username accepted: "" + s);
 Scanner two = new Scanner (System.in);
 System.out.println (""Enter your age: "");
 int a = two.nextInt ();
 System.out.println (""Age accepted: "" + a);
 Scanner three = new Scanner (System.in);
 System.out.println (""Enter your sex: "");
 String sex = three.nextLine ();
 System.out.println (""Sex accepted: "" + sex);
 }",1
1304,"public static void main (String [] args) {
 int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
 int [] B = new int [A.length];
 int [] C = new int [A.length];
 int t = 4;
 int j = 0, k = 0;
 for (int i = 0;
 i < A.length; i ++) {
 if (A [i] <= t) {
 B [j] = A [i];
 j ++;
 } else {
 C [k] = A [i];
 k ++;
 }
 }
 for (int i = 0;
 i < j; i ++) {
 System.out.println (""B = "" + B [i]);
 }
 for (int i = 0;
 i < k; i ++) {
 System.out.println (""C = "" + C [i]);
 }
 }","public static void type (String characters) {
 Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard ();
 StringSelection stringSelection = new StringSelection (characters);
 clipboard.setContents (stringSelection, clipboardOwner);
 robot.keyPress (KeyEvent.VK_CONTROL);
 robot.keyPress (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_V);
 robot.keyRelease (KeyEvent.VK_CONTROL);
 }",0
486,"public void move (Container container) {
 if (leftRight) {
 x += deltaX;
 if (x >= (Ball.this.getWidth () - canvasWidth / 2)) {
 leftRight = false;
 updateDelta ();
 }
 } else {
 x += - deltaX;
 if (x <= 0) {
 leftRight = true;
 updateDelta ();
 }
 }
 if (upDown) {
 y += deltaY;
 upDown = ! (y >= (Ball.this.getHeight () - canvasHeight / 2));
 if (y >= (Ball.this.getHeight () - canvasHeight / 2)) {
 upDown = false;
 updateDelta ();
 }
 } else {
 y += - deltaY;
 if (y <= 0) {
 upDown = true;
 updateDelta ();
 }
 }
 }","public void move (Container container) {
 if (x >= canvasWidth || x <= 0) {
 deltaX = - 1 * deltaX;
 }
 if (y >= canvasHeight || y <= 0) {
 deltaY = - 1 * deltaY;
 }
 x += deltaX;
 y += deltaY;
 }",1
701,"public static void main (String [] args) {
 Map < String, Integer > unSortedMap = new LinkedHashMap < String, Integer > ();
 unSortedMap.put (""A"", 2);
 unSortedMap.put (""V"", 1);
 unSortedMap.put (""G"", 5);
 System.out.println (""Unsorted Map :\n"");
 for (Map.Entry < String, Integer > entry : unSortedMap.entrySet ()) {
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 System.out.println (""\n"");
 System.out.println (""Sorting Map Based on Keys :\n"");
 Map < String, Integer > keySortedMap = new TreeMap < String, Integer > (unSortedMap);
 for (Map.Entry < String, Integer > entry : keySortedMap.entrySet ()) {
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 System.out.println (""\n"");
 System.out.println (""Sorting Map Based on Values :\n"");
 List < Entry < String, Integer > > entryList = new ArrayList < Entry < String, Integer > > (unSortedMap.entrySet ());
 Collections.sort (entryList, new Comparator < Entry < String, Integer > > () {
 @Override
 public int compare (Entry < String, Integer > obj1, Entry < String, Integer > obj2) {
 return obj1.getValue ().compareTo (obj2.getValue ());
 }}
 );
 unSortedMap.clear ();
 for (Entry < String, Integer > entry : entryList) {
 unSortedMap.put (entry.getKey (), entry.getValue ());
 System.out.println (entry.getKey () + ""   "" + entry.getValue ());
 }
 }","public static void main (String [] args) {
 Map < Object, Object > handler = new LinkedHashMap < Object, Object > ();
 handler.put (""item"", ""Value"");
 handler.put (2, ""Movies"");
 handler.put (""isAlive"", true);
 for (Map.Entry < Object, Object > entrY : handler.entrySet ()) System.out.println (entrY.getKey () + ""><![CDATA[>"" + entrY.getValue ());
 List < Map.Entry < String, Integer > > entries = new ArrayList < Map.Entry < String, Integer > > ();
 Collections.sort (entries, new Comparator < Map.Entry < String, Integer > > () {
 public int compare (Map.Entry < String, Integer > a, Map.Entry < String, Integer > b) {
 return a.getValue ().compareTo (b.getValue ());
 }}
 );
 }",1
753,"public static void main (String [] args) {
 int [] arr = new int [10];
 arr [0] = 2;
 for (int i = 1;
 i < arr.length; i ++) arr [i] = arr [i - 1] + 2;
 for (int i = 0;
 i < arr.length; i ++) System.out.print (arr [i] + "" "");
 System.out.println ();
 for (int i = 0;
 i < arr.length; i ++) System.out.print (arr [9 - i] + "" "");
 }","public static void main (String [] args) throws Exception {
 int [] values = new int [10];
 values [0] = 2;
 System.out.print (values [0]);
 for (int i = 1;
 i < values.length; i ++) {
 values [i] = values [i - 1] + 2;
 System.out.print ("" "" + values [i]);
 }
 }",1
722,"public static void main (String [] args) {
 String scaleOne;
 String scaleTwo;
 System.out.println (""What scale is your temp currently in?\n"" + ""1: Fahrenheit\n"" + ""2: Celsius\n"" + ""3: Kelvin\n"" + ""Please enter 1, 2, or 3: \n"");
 scaleOne = getScale ();
 System.out.println (""What scale would you like to convert to?\n"" + ""1: Fahrenheit\n"" + ""2: Celsius\n"" + ""3: Kelvin\n"" + ""Please enter 1, 2, or 3:\n "");
 scaleTwo = getScale ();
 System.out.print (""Your final temp is: "" + convert (scaleOne, scaleTwo));
 }","public static void main (String [] args) {
 char cont = 'E';
 do {
 temp1 = getTemp ();
 scale1 = scaleOne ();
 scale2 = toScale ();
 System.out.print (""Your final temp is: "" + convert () + ' ' + scale2);
 } while (cont == 'N');
 }",1
