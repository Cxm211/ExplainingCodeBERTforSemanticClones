,method_1,method_2,label
1888,"public static void main (String [] args) {
 SwingUtilities.invokeLater (new Runnable () {
 @Override
 public void run () {
 new Mail ().initUI ();
 }}
 );
 }","public static void main (String [] args) {
 JFrame main = new JFrame ();
 JPanel p = new JPanel ();
 p.setLayout (new BorderLayout ());
 p.add (new JLabel (""test""), BorderLayout.WEST);
 p.add (new JTextField (""growable""), BorderLayout.CENTER);
 p.add (new JComboBox (), BorderLayout.EAST);
 main.add (p);
 main.pack ();
 main.setVisible (true);
 }",0
1179,"public static void main (String [] args) {
 String input = ""(A,Name1,200), (A,Name1,200), (R,Name1,200), (A,Name2,900), (A,Name2,500)"";
 String [] scoreSets = input.split (""\\),"");
 List < Score > scoreList = new ArrayList < Score > ();
 for (String score : scoreSets) {
 score = score.trim ().substring (1);
 int closeBrace = score.indexOf (')');
 if (closeBrace == score.length () - 1) {
 score = score.substring (0, score.length () - 1);
 }
 String [] tokens = score.split ("","");
 scoreList.add (new Score (tokens [0], tokens [1], Double.valueOf (tokens [2])));
 }
 }","static int search (int [] A, int K) {
 int l = 0;
 int u = A.length - 1;
 int m;
 while (l <= u) {
 m = (u - l) / 2 + l;
 if (A [m] < K) l = m + 1;
 else if (A [m] == K) return m;
 else u = m - 1;
 }
 return - 1;
 }",0
25,"public static void pack (final Path folder, final Path zipFilePath) throws IOException {
 try (FileOutputStream fos = new FileOutputStream (zipFilePath.toFile ()); ZipOutputStream zos = new ZipOutputStream (fos)) {
 Files.walkFileTree (folder, new SimpleFileVisitor < Path > () {
 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
 zos.putNextEntry (new ZipEntry (folder.relativize (file).toString ()));
 Files.copy (file, zos);
 zos.closeEntry ();
 return FileVisitResult.CONTINUE;
 } public FileVisitResult preVisitDirectory (Path dir, BasicFileAttributes attrs) throws IOException {
 zos.putNextEntry (new ZipEntry (folder.relativize (dir).toString () + ""/""));
 zos.closeEntry ();
 return FileVisitResult.CONTINUE;
 }}
 );
 }
 }","public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
 Path p = Files.createFile (Paths.get (zipFilePath));
 try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
 Path pp = Paths.get (sourceDirPath);
 Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
 ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
 try {
 zs.putNextEntry (zipEntry);
 Files.copy (path, zs);
 zs.closeEntry ();
 } catch (IOException e) {
 System.err.println (e);
 }
 });
 }
 }",1
1387,"public static String toJavaMethodName (final String nonJavaMethodName) {
 final StringBuilder nameBuilder = new StringBuilder ();
 boolean capitalizeNextChar = false;
 boolean first = true;
 for (int i = 0;
 i < nonJavaMethodName.length (); i ++) {
 final char c = nonJavaMethodName.charAt (i);
 if (! Character.isLetterOrDigit (c)) {
 if (! first) {
 capitalizeNextChar = true;
 }
 } else {
 nameBuilder.append (capitalizeNextChar ? Character.toUpperCase (c) : Character.toLowerCase (c));
 capitalizeNextChar = false;
 first = false;
 }
 }
 return nameBuilder.toString ();
 }","public static void main (String [] args) {
 JFrame frame = new JFrame ();
 frame.setDefaultCloseOperation (WindowConstants.EXIT_ON_CLOSE);
 frame.getContentPane ().setLayout (new BorderLayout (0, 0));
 JPanel centerPanel = new JPanel ();
 centerPanel.setPreferredSize (new Dimension (300, 200));
 centerPanel.setBackground (Color.green);
 centerPanel.setCursor (new Cursor (java.awt.Cursor.HAND_CURSOR));
 frame.getContentPane ().add (centerPanel);
 JPanel northPanel = new JPanel ();
 northPanel.setBackground (Color.RED);
 northPanel.setForeground (Color.BLACK);
 northPanel.setPreferredSize (new Dimension (0, 150));
 frame.getContentPane ().add (northPanel, BorderLayout.NORTH);
 JPanel westPanel = new JPanel ();
 westPanel.setBackground (Color.MAGENTA);
 westPanel.setPreferredSize (new Dimension (200, 0));
 frame.getContentPane ().add (westPanel, BorderLayout.WEST);
 JPanel southPanel = new JPanel ();
 southPanel.setBackground (Color.YELLOW);
 southPanel.setPreferredSize (new Dimension (0, 150));
 frame.getContentPane ().add (southPanel, BorderLayout.SOUTH);
 JPanel eastPanel = new JPanel ();
 eastPanel.setBackground (Color.BLUE);
 eastPanel.setPreferredSize (new Dimension (200, 0));
 frame.getContentPane ().add (eastPanel, BorderLayout.EAST);
 frame.pack ();
 frame.setVisible (true);
 frame.setLocationRelativeTo (null);
 }",0